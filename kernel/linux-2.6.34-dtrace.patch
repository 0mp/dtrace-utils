diff -urN ../linux-2.6.34/include/linux/sched.h ./include/linux/sched.h
--- ../linux-2.6.34/include/linux/sched.h	2010-07-28 17:48:29.000000000 -0400
+++ ./include/linux/sched.h	2010-12-21 16:03:41.000000000 -0500
@@ -92,6 +92,8 @@
 #include <linux/latencytop.h>
 #include <linux/cred.h>
 
+#include <linux/clocksource.h>
+
 #include <asm/processor.h>
 
 struct exec_domain;
@@ -1505,6 +1507,15 @@
 		unsigned long memsw_bytes; /* uncharged mem+swap usage */
 	} memcg_batch;
 #endif
+#ifdef CONFIG_DTRACE
+	uint32_t predcache;
+	cycle_t dtrace_vtime;
+	cycle_t dtrace_start;
+	cycle_t dtrace_stop;
+	cycle_t dtrace_sig;
+
+	void *dtrace_helpers;
+#endif
 };
 
 /* Future-safe accessor for struct task_struct's cpus_allowed. */
diff -urN ../linux-2.6.34/init/Kconfig ./init/Kconfig
--- ../linux-2.6.34/init/Kconfig	2010-07-28 17:48:29.000000000 -0400
+++ ./init/Kconfig	2010-08-19 00:33:47.000000000 -0400
@@ -1100,6 +1100,8 @@
 	  Say Y here to enable the extended profiling support mechanisms used
 	  by profilers such as OProfile.
 
+source "kernel/dtrace/Kconfig"
+
 #
 # Place an empty function call at each tracepoint site. Can be
 # dynamically changed for a probe function.
diff -urN ../linux-2.6.34/kernel/dtrace/cyclic.c ./kernel/dtrace/cyclic.c
--- ../linux-2.6.34/kernel/dtrace/cyclic.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/cyclic.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,23 @@
+/*
+ * FILE:	cyclic.c
+ * DESCRIPTION:	Cyclic implementation
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include "cyclic.h"
+
+/*
+ * Add a new cyclic to the system.
+ */
+cyclic_id_t cyclic_add(cyc_handler_t *hdlr, cyc_time_t *when)
+{
+	return 0;
+}
+
+/*
+ * Remove the specific cyclic from the system.
+ */
+void cyclic_remove(cyclic_id_t id)
+{
+}
diff -urN ../linux-2.6.34/kernel/dtrace/cyclic.h ./kernel/dtrace/cyclic.h
--- ../linux-2.6.34/kernel/dtrace/cyclic.h	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/cyclic.h	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,33 @@
+#ifndef _CYCLIC_H_
+#define _CYCLIC_H_
+
+#include <linux/clocksource.h>
+#include <linux/types.h>
+
+#define CY_LOW_LEVEL	0
+#define CY_LOCK_LEVEL	1
+#define CY_HIGH_LEVEL	2
+#define CY_SOFT_LEVELS	2
+#define CY_LEVELS	3
+
+typedef uintptr_t	cyclic_id_t;
+typedef uint16_t	cyc_level_t;
+typedef void		(*cyc_func_t)(void *);
+
+#define CYCLIC_NONE	((cyclic_id_t)0)
+
+typedef struct cyc_handler {
+	cyc_func_t cyh_func;
+	void *cyh_arg;
+	cyc_level_t cyh_level;
+} cyc_handler_t;
+
+typedef struct cyc_time {
+	cycle_t cyt_when;
+	cycle_t cyt_interval;
+} cyc_time_t;
+
+extern cyclic_id_t cyclic_add(cyc_handler_t *, cyc_time_t *);
+extern void cyclic_remove(cyclic_id_t);
+
+#endif /* _CYCLIC_H_ */
diff -urN ../linux-2.6.34/kernel/dtrace/dtrace_actdesc.c ./kernel/dtrace/dtrace_actdesc.c
--- ../linux-2.6.34/kernel/dtrace/dtrace_actdesc.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/dtrace_actdesc.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,62 @@
+/*
+ * FILE:	dtrace_actdesc.c
+ * DESCRIPTION:	Dynamic Tracing: action description functions
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/slab.h>
+
+#include "dtrace.h"
+
+dtrace_actdesc_t *dtrace_actdesc_create(dtrace_actkind_t kind, uint32_t ntuple,
+					uint64_t uarg, uint64_t arg)
+{
+	dtrace_actdesc_t	*act;
+
+	ASSERT(!DTRACEACT_ISPRINTFLIKE(kind) ||
+	       (arg != NULL && arg >= KERNELBASE) ||
+	       (arg == NULL && kind == DTRACEACT_PRINTA));
+
+	act = kzalloc(sizeof (dtrace_actdesc_t), GFP_KERNEL);
+	act->dtad_kind = kind;
+	act->dtad_ntuple = ntuple;
+	act->dtad_uarg = uarg;
+	act->dtad_arg = arg;
+	act->dtad_refcnt = 1;
+
+	return act;
+}
+
+void dtrace_actdesc_hold(dtrace_actdesc_t *act)
+{
+	ASSERT(act->dtad_refcnt >= 1);
+
+	act->dtad_refcnt++;
+}
+
+void dtrace_actdesc_release(dtrace_actdesc_t *act, dtrace_vstate_t *vstate)
+{
+	dtrace_actkind_t	kind = act->dtad_kind;
+	dtrace_difo_t		*dp;
+
+	ASSERT(act->dtad_refcnt >= 1);
+
+	if (--act->dtad_refcnt != 0)
+		return;
+
+	if ((dp = act->dtad_difo) != NULL)
+		dtrace_difo_release(dp, vstate);
+
+	if (DTRACEACT_ISPRINTFLIKE(kind)) {
+		char	*str = (char *)(uintptr_t)act->dtad_arg;
+
+		ASSERT((str != NULL && (uintptr_t)str >= KERNELBASE) ||
+		       (str == NULL && act->dtad_kind == DTRACEACT_PRINTA));
+
+		if (str != NULL)
+			kfree(str);
+	}
+
+	kfree(act);
+}
diff -urN ../linux-2.6.34/kernel/dtrace/dtrace_anon.c ./kernel/dtrace/dtrace_anon.c
--- ../linux-2.6.34/kernel/dtrace/dtrace_anon.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/dtrace_anon.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,132 @@
+/*
+ * FILE:	dtrace_anon.c
+ * DESCRIPTION:	Dynamic Tracing: anonymous enabling functions
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include "dtrace.h"
+
+dtrace_anon_t	dtrace_anon;
+
+dtrace_state_t *dtrace_anon_grab(void)
+{
+	dtrace_state_t	*state;
+
+	ASSERT(mutex_is_locked(&dtrace_lock));
+
+	if ((state = dtrace_anon.dta_state) == NULL) {
+		ASSERT(dtrace_anon.dta_enabling == NULL);
+
+		return NULL;
+	}
+
+	ASSERT(dtrace_anon.dta_enabling != NULL);
+	ASSERT(dtrace_retained != NULL);
+
+	dtrace_enabling_destroy(dtrace_anon.dta_enabling);
+	dtrace_anon.dta_enabling = NULL;
+	dtrace_anon.dta_state = NULL;
+
+	return state;
+}
+
+void dtrace_anon_property(void)
+{
+	int		i, rv;
+	dtrace_state_t	*state;
+	dof_hdr_t	*dof;
+	char		c[32];             /* enough for "dof-data-" + digits */
+
+	ASSERT(mutex_is_locked(&dtrace_lock));
+	/* FIXME: ASSERT(mutex_is_locked(&cpu_lock)); */
+
+	for (i = 0; ; i++) {
+		snprintf(c, sizeof (c), "dof-data-%d", i);
+
+		dtrace_err_verbose = 1;
+
+		if ((dof = dtrace_dof_property(c)) == NULL) {
+			dtrace_err_verbose = 0;
+			break;
+		}
+
+#ifdef FIXME
+		/*
+		 * We want to create anonymous state, so we need to transition
+		 * the kernel debugger to indicate that DTrace is active.  If
+		 * this fails (e.g. because the debugger has modified text in
+		 * some way), we won't continue with the processing.
+		 */
+		if (kdi_dtrace_set(KDI_DTSET_DTRACE_ACTIVATE) != 0) {
+			pr_info("kernel debugger active; "
+				"anonymous enabling ignored.");
+			dtrace_dof_destroy(dof);
+			break;
+		}
+#endif
+
+		/*
+		 * If we haven't allocated an anonymous state, we'll do so now.
+		*/
+		if ((state = dtrace_anon.dta_state) == NULL) {
+			state = dtrace_state_create(NULL);
+			dtrace_anon.dta_state = state;
+
+			if (state == NULL) {
+				/*
+				 * This basically shouldn't happen: there is no
+				 * failure mode from dtrace_state_create().
+				 * Still, the interface allows for a failure
+				 * mode, and we want to fail as gracefully as
+				 * possible: we'll emit an error message and
+				 * cease processing anonymous state in this
+				 * case.
+				 */
+				pr_warning("failed to create anonymous state");
+				dtrace_dof_destroy(dof);
+				break;
+			}
+		}
+
+		rv = dtrace_dof_slurp(dof,
+&state->dts_vstate,
+current_cred(),
+				      &dtrace_anon.dta_enabling, 0, TRUE);
+
+		if (rv == 0)
+			rv = dtrace_dof_options(dof, state);
+
+		dtrace_err_verbose = 0;
+		dtrace_dof_destroy(dof);
+
+		if (rv != 0) {
+			/*
+			 * This is malformed DOF; chuck any anonymous state
+			 * that we created.
+			 */
+			ASSERT(dtrace_anon.dta_enabling == NULL);
+			dtrace_state_destroy(state);
+			dtrace_anon.dta_state = NULL;
+			break;
+		}
+
+		ASSERT(dtrace_anon.dta_enabling != NULL);
+	}
+
+	if (dtrace_anon.dta_enabling != NULL) {
+		int	rval;
+
+		/*
+		 * dtrace_enabling_retain() can only fail because we are
+		 * trying to retain more enablings than are allowed -- but
+		 * we only have one anonymous enabling, and we are guaranteed
+		 * to be allowed at least one retained enabling; we assert
+		 * that dtrace_enabling_retain() returns success.
+		 */
+		rval = dtrace_enabling_retain(dtrace_anon.dta_enabling);
+		ASSERT(rval == 0);
+
+		dtrace_enabling_dump(dtrace_anon.dta_enabling);
+	}
+}
diff -urN ../linux-2.6.34/kernel/dtrace/dtrace_buffer.c ./kernel/dtrace/dtrace_buffer.c
--- ../linux-2.6.34/kernel/dtrace/dtrace_buffer.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/dtrace_buffer.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,370 @@
+/*
+ * FILE:	dtrace_buffer.c
+ * DESCRIPTION:	Dynamic Tracing: buffer functions
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/slab.h>
+
+#include "dtrace.h"
+
+dtrace_optval_t		dtrace_nonroot_maxsize = (16 * 1024 * 1024);
+
+void dtrace_buffer_activate(dtrace_state_t *state)
+{
+	dtrace_buffer_t		*buf;
+	dtrace_icookie_t	cookie = dtrace_interrupt_disable();
+
+	buf = &state->dts_buffer[smp_processor_id()];
+
+	if (buf->dtb_tomax != NULL) {
+		/*
+		 * We might like to assert that the buffer is marked inactive,
+		 * but this isn't necessarily true:  the buffer for the CPU
+		 * that processes the BEGIN probe has its buffer activated
+		 * manually.  In this case, we take the (harmless) action
+		 * re-clearing the bit INACTIVE bit.
+		 */
+		 buf->dtb_flags &= ~DTRACEBUF_INACTIVE;
+	}
+
+	dtrace_interrupt_enable(cookie);
+}
+
+int dtrace_buffer_alloc(dtrace_buffer_t *bufs, size_t size, int flags,
+			processorid_t cpuid)
+{
+	processorid_t	cpu;
+	dtrace_buffer_t	*buf;
+
+	ASSERT(mutex_is_locked(&dtrace_lock));
+	/* FIXME: ASSERT(mutex_is_locked(&cpu_lock)); */
+
+#ifdef FIXME
+	if (size > dtrace_nonroot_maxsize &&
+	    !PRIV_POLICY_CHOICE(current_cred(), PRIV_ALL, FALSE))
+		return -EFBIG;
+#endif
+
+	for_each_online_cpu(cpu) {
+		if (cpuid != DTRACE_CPUALL && cpuid != cpu)
+			continue;
+
+		buf = &bufs[cpu];
+
+		/*
+		 * If there is already a buffer allocated for this CPU, it
+		 * is only possible that this is a DR event.  In this case,
+		 * the buffer size must match our specified size.
+		 */
+		if (buf->dtb_tomax != NULL) {
+			ASSERT(buf->dtb_size == size);
+			continue;
+		}
+
+		ASSERT(buf->dtb_xamot == NULL);
+
+		if ((buf->dtb_tomax = kzalloc(size, GFP_KERNEL)) == NULL)
+			goto err;
+
+		buf->dtb_size = size;
+		buf->dtb_flags = flags;
+		buf->dtb_offset = 0;
+		buf->dtb_drops = 0;
+
+		if (flags & DTRACEBUF_NOSWITCH)
+			continue;
+
+		if ((buf->dtb_xamot = kzalloc(size, GFP_KERNEL)) == NULL)
+			goto err;
+	}
+
+	return 0;
+
+err:
+	for_each_online_cpu(cpu) {
+		if (cpuid != DTRACE_CPUALL && cpuid != cpu)
+			continue;
+
+		buf = &bufs[cpu];
+
+		if (buf->dtb_xamot != NULL) {
+			ASSERT(buf->dtb_tomax != NULL);
+			ASSERT(buf->dtb_size == size);
+			kfree(buf->dtb_xamot);
+		}
+
+		if (buf->dtb_tomax != NULL) {
+			ASSERT(buf->dtb_size == size);
+			kfree(buf->dtb_tomax);
+		}
+
+		buf->dtb_tomax = NULL;
+		buf->dtb_xamot = NULL;
+		buf->dtb_size = 0;
+	}
+
+	return -ENOMEM;
+}
+void dtrace_buffer_drop(dtrace_buffer_t *buf)
+{
+	buf->dtb_drops++;
+}
+
+intptr_t dtrace_buffer_reserve(dtrace_buffer_t *buf, size_t needed,
+			       size_t align, dtrace_state_t *state,
+			       dtrace_mstate_t *mstate)
+{
+	intptr_t	offs = buf->dtb_offset, soffs;
+	intptr_t	woffs;
+	caddr_t		tomax;
+	size_t		total;
+
+	if (buf->dtb_flags & DTRACEBUF_INACTIVE)
+		return -1;
+
+	if ((tomax = buf->dtb_tomax) == NULL) {
+		dtrace_buffer_drop(buf);
+		return -1;
+	}
+
+	if (!(buf->dtb_flags & (DTRACEBUF_RING | DTRACEBUF_FILL))) {
+		while (offs & (align - 1)) {
+			/*
+			 * Assert that our alignment is off by a number which
+			 * is itself sizeof (uint32_t) aligned.
+			 */
+			ASSERT(!((align - (offs & (align - 1))) &
+				(sizeof (uint32_t) - 1)));
+			DTRACE_STORE(uint32_t, tomax, offs, DTRACE_EPIDNONE);
+			offs += sizeof (uint32_t);
+		}
+
+		if ((soffs = offs + needed) > buf->dtb_size) {
+			dtrace_buffer_drop(buf);
+			return -1;
+		}
+
+		if (mstate == NULL)
+			return (offs);
+
+		mstate->dtms_scratch_base = (uintptr_t)tomax + soffs;
+		mstate->dtms_scratch_size = buf->dtb_size - soffs;
+		mstate->dtms_scratch_ptr = mstate->dtms_scratch_base;
+
+		return offs;
+	}
+
+	if (buf->dtb_flags & DTRACEBUF_FILL) {
+		if (state->dts_activity != DTRACE_ACTIVITY_COOLDOWN &&
+		    (buf->dtb_flags & DTRACEBUF_FULL))
+			return -1;
+
+		goto out;
+	}
+
+	total = needed + (offs & (align - 1));
+
+	/*
+	 * For a ring buffer, life is quite a bit more complicated.  Before
+	 * we can store any padding, we need to adjust our wrapping offset.
+	 * (If we've never before wrapped or we're not about to, no adjustment
+	 * is required.)
+	 */
+	if ((buf->dtb_flags & DTRACEBUF_WRAPPED) ||
+	    offs + total > buf->dtb_size) {
+		woffs = buf->dtb_xamot_offset;
+
+		if (offs + total > buf->dtb_size) {
+			/*
+			 * We can't fit in the end of the buffer.  First, a
+			 * sanity check that we can fit in the buffer at all.
+			 */
+			if (total > buf->dtb_size) {
+				dtrace_buffer_drop(buf);
+				return -1;
+			}
+
+			/*
+			 * We're going to be storing at the top of the buffer,
+			 * so now we need to deal with the wrapped offset.  We
+			 * only reset our wrapped offset to 0 if it is
+			 * currently greater than the current offset.  If it
+			 * is less than the current offset, it is because a
+			 * previous allocation induced a wrap -- but the
+			 * allocation didn't subsequently take the space due
+			 * to an error or false predicate evaluation.  In this
+			 * case, we'll just leave the wrapped offset alone: if
+			 * the wrapped offset hasn't been advanced far enough
+			 * for this allocation, it will be adjusted in the
+			 * lower loop.
+			 */
+			if (buf->dtb_flags & DTRACEBUF_WRAPPED) {
+				if (woffs >= offs)
+					woffs = 0;
+			} else
+				woffs = 0;
+
+			/*
+			 * Now we know that we're going to be storing to the
+			 * top of the buffer and that there is room for us
+			 * there.  We need to clear the buffer from the current
+			 * offset to the end (there may be old gunk there).
+			 */
+			while (offs < buf->dtb_size)
+				tomax[offs++] = 0;
+
+			/*
+			 * We need to set our offset to zero.  And because we
+			 * are wrapping, we need to set the bit indicating as
+			 * much.  We can also adjust our needed space back
+			 * down to the space required by the ECB -- we know
+			 * that the top of the buffer is aligned.
+			 */
+			offs = 0;
+			total = needed;
+			buf->dtb_flags |= DTRACEBUF_WRAPPED;
+		} else {
+			/*
+			 * There is room for us in the buffer, so we simply
+			 * need to check the wrapped offset.
+			 */
+			if (woffs < offs) {
+				/*
+				 * The wrapped offset is less than the offset.
+				 * This can happen if we allocated buffer space
+				 * that induced a wrap, but then we didn't
+				 * subsequently take the space due to an error
+				 * or false predicate evaluation.  This is
+				 * okay; we know that _this_ allocation isn't
+				 * going to induce a wrap.  We still can't
+				 * reset the wrapped offset to be zero,
+				 * however: the space may have been trashed in
+				 * the previous failed probe attempt.  But at
+				 * least the wrapped offset doesn't need to
+				 * be adjusted at all...
+				 */
+				goto out;
+			}
+		}
+
+		while (offs + total > woffs) {
+			dtrace_epid_t	epid = *(uint32_t *)(tomax + woffs);
+			size_t		size;
+
+			if (epid == DTRACE_EPIDNONE)
+				size = sizeof (uint32_t);
+			else {
+				ASSERT(epid <= state->dts_necbs);
+				ASSERT(state->dts_ecbs[epid - 1] != NULL);
+
+				size = state->dts_ecbs[epid - 1]->dte_size;
+			}
+
+			ASSERT(woffs + size <= buf->dtb_size);
+			ASSERT(size != 0);
+
+			if (woffs + size == buf->dtb_size) {
+				/*
+				 * We've reached the end of the buffer; we want
+				 * to set the wrapped offset to 0 and break
+				 * out.  However, if the offs is 0, then we're
+				 * in a strange edge-condition:  the amount of
+				 * space that we want to reserve plus the size
+				 * of the record that we're overwriting is
+				 * space but subsequently don't consume it (due
+				 * to a failed predicate or error) the wrapped
+				 * offset will be 0 -- yet the EPID at offset 0
+				 * will not be committed.  This situation is
+				 * relatively easy to deal with:  if we're in
+				 * this case, the buffer is indistinguishable
+				 * from one that hasn't wrapped; we need only
+				 * finish the job by clearing the wrapped bit,
+				 * explicitly setting the offset to be 0, and
+				 * zero'ing out the old data in the buffer.
+				 */
+				if (offs == 0) {
+					buf->dtb_flags &= ~DTRACEBUF_WRAPPED;
+					buf->dtb_offset = 0;
+					woffs = total;
+
+					while (woffs < buf->dtb_size)
+						tomax[woffs++] = 0;
+				}
+
+				woffs = 0;
+				break;
+			}
+
+			woffs += size;
+		}
+
+		/*
+		 * We have a wrapped offset.  It may be that the wrapped offset
+		 * has become zero -- that's okay.
+		 */
+		buf->dtb_xamot_offset = woffs;
+	}
+
+out:
+	/*
+	 * Now we can plow the buffer with any necessary padding.
+	 */
+	while (offs & (align - 1)) {
+		/*
+		 * Assert that our alignment is off by a number which
+		 * is itself sizeof (uint32_t) aligned.
+		 */
+		ASSERT(!((align - (offs & (align - 1))) &
+			(sizeof (uint32_t) - 1)));
+		DTRACE_STORE(uint32_t, tomax, offs, DTRACE_EPIDNONE);
+		offs += sizeof (uint32_t);
+	}
+
+	if (buf->dtb_flags & DTRACEBUF_FILL) {
+		if (offs + needed > buf->dtb_size - state->dts_reserve) {
+			buf->dtb_flags |= DTRACEBUF_FULL;
+			return -1;
+		}
+	}
+
+	if (mstate == NULL)
+		return offs;
+
+	/*
+	 * For ring buffers and fill buffers, the scratch space is always
+	 * the inactive buffer.
+	 */
+	mstate->dtms_scratch_base = (uintptr_t)buf->dtb_xamot;
+	mstate->dtms_scratch_size = buf->dtb_size;
+	mstate->dtms_scratch_ptr = mstate->dtms_scratch_base;
+
+	return offs;
+}
+
+void dtrace_buffer_free(dtrace_buffer_t *bufs)
+{
+	int	cpu;
+
+	for_each_online_cpu(cpu) {
+		dtrace_buffer_t	*buf = &bufs[cpu];
+
+		if (buf->dtb_tomax == NULL) {
+			ASSERT(buf->dtb_xamot == NULL);
+			ASSERT(buf->dtb_size == 0);
+
+			continue;
+		}
+
+		if (buf->dtb_xamot != NULL) {
+			ASSERT(!(buf->dtb_flags & DTRACEBUF_NOSWITCH));
+
+			kfree(buf->dtb_xamot);
+		}
+
+		kfree(buf->dtb_tomax);
+		buf->dtb_size = 0;
+		buf->dtb_tomax = NULL;
+	}
+}
diff -urN ../linux-2.6.34/kernel/dtrace/dtrace_dev.c ./kernel/dtrace/dtrace_dev.c
--- ../linux-2.6.34/kernel/dtrace/dtrace_dev.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/dtrace_dev.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,849 @@
+/*
+ * FILE:	dtrace_dev.c
+ * DESCRIPTION:	Dynamic Tracing: device file handling
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/fs.h>
+#include <linux/miscdevice.h>
+#include <linux/slab.h>
+#include <asm/uaccess.h>
+
+#include "dtrace.h"
+#include "dtrace_dev.h"
+#include "dtrace_ioctl.h"
+
+uint32_t			dtrace_helptrace_next = 0;
+uint32_t			dtrace_helptrace_nlocals;
+char				*dtrace_helptrace_buffer;
+int				dtrace_helptrace_bufsize = 512 * 1024;
+
+#ifdef DEBUG
+int				dtrace_helptrace_enabled = 1;
+#else
+int				dtrace_helptrace_enabled = 0;
+#endif
+
+int				dtrace_opens;
+int				dtrace_err_verbose;
+
+dtrace_pops_t			dtrace_provider_ops = {
+	(void (*)(void *, const dtrace_probedesc_t *))dtrace_nullop,
+	(void (*)(void *, struct module *))dtrace_nullop,
+	(int (*)(void *, dtrace_id_t, void *))dtrace_enable_nullop,
+	(void (*)(void *, dtrace_id_t, void *))dtrace_nullop,
+	(void (*)(void *, dtrace_id_t, void *))dtrace_nullop,
+	(void (*)(void *, dtrace_id_t, void *))dtrace_nullop,
+	NULL,
+	NULL,
+	NULL,
+	(void (*)(void *, dtrace_id_t, void *))dtrace_nullop
+};
+
+dtrace_toxrange_t		*dtrace_toxrange;
+int				dtrace_toxranges;
+
+static size_t			dtrace_retain_max = 1024;
+
+static int			dtrace_toxranges_max;
+
+static dtrace_pattr_t		dtrace_provider_attr = {
+{ DTRACE_STABILITY_STABLE, DTRACE_STABILITY_STABLE, DTRACE_CLASS_COMMON },
+{ DTRACE_STABILITY_PRIVATE, DTRACE_STABILITY_PRIVATE, DTRACE_CLASS_UNKNOWN },
+{ DTRACE_STABILITY_PRIVATE, DTRACE_STABILITY_PRIVATE, DTRACE_CLASS_UNKNOWN },
+{ DTRACE_STABILITY_STABLE, DTRACE_STABILITY_STABLE, DTRACE_CLASS_COMMON },
+{ DTRACE_STABILITY_STABLE, DTRACE_STABILITY_STABLE, DTRACE_CLASS_COMMON },
+};
+
+void dtrace_nullop(void)
+{
+}
+
+int dtrace_enable_nullop(void)
+{
+	return 0;
+}
+
+static int dtrace_ioctl_pmfound(dtrace_probe_t *probe, void *arg)
+{
+	*(dtrace_probe_t **)arg = probe;
+
+	return DTRACE_MATCH_DONE;
+}
+
+static long dtrace_ioctl(struct file *file,
+			 unsigned int cmd, unsigned long arg)
+{
+	dtrace_state_t	*state = (dtrace_state_t *)file->private_data;
+	int		rval;
+	void __user	*argp = (void __user *)arg;
+
+	if (state->dts_anon) {
+		ASSERT(dtrace_anon.dta_state == NULL);
+		state = state->dts_anon;
+	}
+
+	switch (cmd) {
+	case DTRACEIOC_PROVIDER: {
+		dtrace_providerdesc_t	pvd;
+		dtrace_provider_t	*pvp;
+
+		if (copy_from_user(&pvd, argp, sizeof (pvd)) != 0)
+			return -EFAULT;
+
+		pvd.dtvd_name[DTRACE_PROVNAMELEN - 1] = '\0';
+		mutex_lock(&dtrace_provider_lock);
+
+		for (pvp = dtrace_provider; pvp != NULL; pvp = pvp->dtpv_next) {
+			if (strcmp(pvp->dtpv_name, pvd.dtvd_name) == 0)
+				break;
+		}
+
+		mutex_unlock(&dtrace_provider_lock);
+
+		if (pvp == NULL)
+			return -ESRCH;
+
+		memcpy(&pvd.dtvd_priv, &pvp->dtpv_priv,
+		       sizeof (dtrace_ppriv_t));
+		memcpy(&pvd.dtvd_attr, &pvp->dtpv_attr,
+		       sizeof (dtrace_pattr_t));
+
+		if (copy_to_user(argp, &pvd, sizeof (pvd)) != 0)
+			return -EFAULT;
+
+		return 0;
+	}
+
+	case DTRACEIOC_EPROBE: {
+		dtrace_eprobedesc_t	epdesc;
+		dtrace_ecb_t		*ecb;
+		dtrace_action_t		*act;
+		void			*buf;
+		size_t			size;
+		uint8_t			*dest;
+		int			nrecs;
+
+		if (copy_from_user(&epdesc, argp, sizeof (epdesc)) != 0)
+			return -EFAULT;
+
+		mutex_lock(&dtrace_lock);
+
+		if ((ecb = dtrace_epid2ecb(state, epdesc.dtepd_epid)) == NULL) {
+			mutex_unlock(&dtrace_lock);
+			return -EINVAL;
+		}
+
+		if (ecb->dte_probe == NULL) {
+			mutex_unlock(&dtrace_lock);
+			return -EINVAL;
+		}
+
+		epdesc.dtepd_probeid = ecb->dte_probe->dtpr_id;
+		epdesc.dtepd_uarg = ecb->dte_uarg;
+		epdesc.dtepd_size = ecb->dte_size;
+
+		nrecs = epdesc.dtepd_nrecs;
+		epdesc.dtepd_nrecs = 0;
+		for (act = ecb->dte_action; act != NULL; act = act->dta_next) {
+			if (DTRACEACT_ISAGG(act->dta_kind) || act->dta_intuple)
+				continue;
+
+			epdesc.dtepd_nrecs++;
+		}
+
+		/*
+		 * Now that we have the size, we need to allocate a temporary
+		 * buffer in which to store the complete description.  We need
+		 * the temporary buffer to be able to drop dtrace_lock()
+		 * across the copy_to_user(), below.
+		 */
+		size = sizeof (dtrace_eprobedesc_t) +
+		       (epdesc.dtepd_nrecs * sizeof (dtrace_recdesc_t));
+
+		buf = kmalloc(size, GFP_KERNEL);
+		dest = buf;
+
+		memcpy(dest, &epdesc, sizeof (epdesc));
+		dest += offsetof(dtrace_eprobedesc_t, dtepd_rec[0]);
+
+		for (act = ecb->dte_action; act != NULL; act = act->dta_next) {
+			if (DTRACEACT_ISAGG(act->dta_kind) || act->dta_intuple)
+				continue;
+
+			if (nrecs-- == 0)
+				break;
+
+			memcpy(dest, &act->dta_rec, sizeof (dtrace_recdesc_t));
+			dest += sizeof (dtrace_recdesc_t);
+		}
+
+		mutex_unlock(&dtrace_lock);
+
+		if (copy_to_user(argp, buf,
+				 (uintptr_t)(dest - (uint8_t *)buf)) != 0) {
+			kfree(buf);
+			return -EFAULT;
+		}
+
+		kfree(buf);
+		return 0;
+	}
+
+	case DTRACEIOC_AGGDESC: {
+		dtrace_aggdesc_t	aggdesc;
+		dtrace_action_t		*act;
+		dtrace_aggregation_t	*agg;
+		int			nrecs;
+		uint32_t		offs;
+		dtrace_recdesc_t	*lrec;
+		void			*buf;
+		size_t			size;
+		uint8_t			*dest;
+
+		if (copy_from_user(&aggdesc, argp, sizeof (aggdesc)) != 0)
+			return -EFAULT;
+
+		mutex_lock(&dtrace_lock);
+
+		if ((agg = dtrace_aggid2agg(state, aggdesc.dtagd_id)) == NULL) {
+			mutex_unlock(&dtrace_lock);
+			return -EINVAL;
+		}
+
+		aggdesc.dtagd_epid = agg->dtag_ecb->dte_epid;
+
+		nrecs = aggdesc.dtagd_nrecs;
+		aggdesc.dtagd_nrecs = 0;
+
+		offs = agg->dtag_base;
+		lrec = &agg->dtag_action.dta_rec;
+		aggdesc.dtagd_size = lrec->dtrd_offset + lrec->dtrd_size -
+				     offs;
+
+		for (act = agg->dtag_first; ; act = act->dta_next) {
+			ASSERT(act->dta_intuple ||
+			       DTRACEACT_ISAGG(act->dta_kind));
+
+			/*
+			 * If this action has a record size of zero, it
+			 * denotes an argument to the aggregating action.
+			 * Because the presence of this record doesn't (or
+			 * shouldn't) affect the way the data is interpreted,
+			 * we don't copy it out to save user-level the
+			 * confusion of dealing with a zero-length record.
+			 */
+			if (act->dta_rec.dtrd_size == 0) {
+				ASSERT(agg->dtag_hasarg);
+				continue;
+			}
+
+			aggdesc.dtagd_nrecs++;
+
+			if (act == &agg->dtag_action)
+				break;
+		}
+
+		/*
+		 * Now that we have the size, we need to allocate a temporary
+		 * buffer in which to store the complete description.  We need
+		 * the temporary buffer to be able to drop dtrace_lock()
+		 * across the copyout(), below.
+		 */
+		size = sizeof (dtrace_aggdesc_t) +
+		       (aggdesc.dtagd_nrecs * sizeof (dtrace_recdesc_t));
+
+		buf = kmalloc(size, GFP_KERNEL);
+		dest = buf;
+
+		memcpy(dest, &aggdesc, sizeof (aggdesc));
+		dest += offsetof(dtrace_aggdesc_t, dtagd_rec[0]);
+
+		for (act = agg->dtag_first; ; act = act->dta_next) {
+			dtrace_recdesc_t	rec = act->dta_rec;
+
+			/*
+			 * See the comment in the above loop for why we pass
+			 * over zero-length records.
+			 */
+			if (rec.dtrd_size == 0) {
+				ASSERT(agg->dtag_hasarg);
+				continue;
+			}
+
+			if (nrecs-- == 0)
+				break;
+
+			rec.dtrd_offset -= offs;
+			memcpy(dest, &rec, sizeof (rec));
+			dest += sizeof (dtrace_recdesc_t);
+
+			if (act == &agg->dtag_action)
+				break;
+		}
+
+		mutex_unlock(&dtrace_lock);
+
+		if (copy_to_user(argp, buf,
+				 (uintptr_t)(dest - (uint8_t *)buf)) != 0) {
+			kfree(buf);
+			return -EFAULT;
+		}
+
+		kfree(buf);
+		return 0;
+	}
+
+	case DTRACEIOC_ENABLE: {
+		dof_hdr_t		*dof;
+		dtrace_enabling_t	*enab = NULL;
+		dtrace_vstate_t		*vstate;
+		int			err = 0;
+		int			rv;
+
+		rv = 0;
+
+		/*
+		 * If a NULL argument has been passed, we take this as our
+		 * cue to reevaluate our enablings.
+		 */
+		if (argp == NULL) {
+			dtrace_enabling_matchall();
+
+			return 0;
+		}
+
+		if ((dof = dtrace_dof_copyin(argp, &rval)) == NULL)
+			return rval;
+
+		/* FIXME: mutex_lock(&cpu_lock); */
+		mutex_lock(&dtrace_lock);
+		vstate = &state->dts_vstate;
+
+		if (state->dts_activity != DTRACE_ACTIVITY_INACTIVE) {
+			mutex_unlock(&dtrace_lock);
+			/* FIXME: mutex_unlock(&cpu_lock); */
+			dtrace_dof_destroy(dof);
+			return -EBUSY;
+		}
+
+		if (dtrace_dof_slurp(dof, vstate, file->f_cred, &enab, 0,
+				     TRUE) != 0) {
+			mutex_unlock(&dtrace_lock);
+			/* FIXME: mutex_unlock(&cpu_lock); */
+			dtrace_dof_destroy(dof);
+			return -EINVAL;
+		}
+
+		if ((rval = dtrace_dof_options(dof, state)) != 0) {
+			dtrace_enabling_destroy(enab);
+			mutex_unlock(&dtrace_lock);
+			/* FIXME: mutex_unlock(&cpu_lock); */
+			dtrace_dof_destroy(dof);
+			return rval;
+		}
+
+		if ((err = dtrace_enabling_match(enab, &rv)) == 0)
+			err = dtrace_enabling_retain(enab);
+		else
+			dtrace_enabling_destroy(enab);
+
+		mutex_unlock(&dtrace_lock);
+		/* FIXME: mutex_unlock(&cpu_lock); */
+		dtrace_dof_destroy(dof);
+
+		return err;
+	}
+
+	case DTRACEIOC_REPLICATE: {
+		dtrace_repldesc_t	desc;
+		dtrace_probedesc_t	*match = &desc.dtrpd_match;
+		dtrace_probedesc_t	*create = &desc.dtrpd_create;
+		int			err;
+
+		if (copy_from_user(&desc, argp, sizeof (desc)) != 0)
+			return -EFAULT;
+
+		match->dtpd_provider[DTRACE_PROVNAMELEN - 1] = '\0';
+		match->dtpd_mod[DTRACE_MODNAMELEN - 1] = '\0';
+		match->dtpd_func[DTRACE_FUNCNAMELEN - 1] = '\0';
+		match->dtpd_name[DTRACE_NAMELEN - 1] = '\0';
+
+		create->dtpd_provider[DTRACE_PROVNAMELEN - 1] = '\0';
+		create->dtpd_mod[DTRACE_MODNAMELEN - 1] = '\0';
+		create->dtpd_func[DTRACE_FUNCNAMELEN - 1] = '\0';
+		create->dtpd_name[DTRACE_NAMELEN - 1] = '\0';
+
+		mutex_lock(&dtrace_lock);
+		err = dtrace_enabling_replicate(state, match, create);
+		mutex_unlock(&dtrace_lock);
+
+		return err;
+	}
+
+	case DTRACEIOC_PROBEMATCH:
+	case DTRACEIOC_PROBES: {
+		dtrace_probe_t		*probe = NULL;
+		dtrace_probedesc_t	desc;
+		dtrace_probekey_t	pkey;
+		uint32_t		priv;
+		uid_t			uid;
+
+		if (copy_from_user(&desc, argp, sizeof (desc)) != 0)
+			return -EFAULT;
+
+		desc.dtpd_provider[DTRACE_PROVNAMELEN - 1] = '\0';
+		desc.dtpd_mod[DTRACE_MODNAMELEN - 1] = '\0';
+		desc.dtpd_func[DTRACE_FUNCNAMELEN - 1] = '\0';
+		desc.dtpd_name[DTRACE_NAMELEN - 1] = '\0';
+
+		/*
+		 * Before we attempt to match this probe, we want to give
+		 * all providers the opportunity to provide it.
+		 */
+		if (desc.dtpd_id == DTRACE_IDNONE) {
+			mutex_lock(&dtrace_provider_lock);
+			dtrace_probe_provide(&desc, NULL);
+			mutex_unlock(&dtrace_provider_lock);
+			desc.dtpd_id++;
+		}
+
+		if (cmd == DTRACEIOC_PROBEMATCH)  {
+			dtrace_probekey(&desc, &pkey);
+			pkey.dtpk_id = DTRACE_IDNONE;
+		}
+
+		dtrace_cred2priv(file->f_cred, &priv, &uid);
+
+		mutex_lock(&dtrace_lock);
+
+		/*
+		 * FIXME: I think that the logic here is meant to allow looking
+		 * for one specific probe using PROBEMATCH and to query all the
+		 * probes that match a given key using PROBES, where the
+		 * dtpd_id indicates the last returned probe.  Given that Linux
+		 * is not placing the probes in a linear list, this may be a
+		 * bit more complex.
+		 */
+		dtrace_match(&pkey, priv, uid, dtrace_ioctl_pmfound, &probe);
+
+		if (probe == NULL) {
+			mutex_unlock(&dtrace_lock);
+			return -ESRCH;
+		}
+
+		dtrace_probe_description(probe, &desc);
+		mutex_unlock(&dtrace_lock);
+
+		if (copy_to_user(argp, &desc, sizeof (desc)) != 0)
+			return -EFAULT;
+
+		return 0;
+	}
+
+	case DTRACEIOC_PROBEARG: {
+		dtrace_argdesc_t	desc;
+		dtrace_probe_t		*probe;
+		dtrace_provider_t	*prov;
+
+		if (copy_from_user(&desc, argp, sizeof (desc)) != 0)
+			return -EFAULT;
+
+		if (desc.dtargd_id == DTRACE_IDNONE)
+			return -EINVAL;
+
+		if (desc.dtargd_ndx == DTRACE_ARGNONE)
+			return -EINVAL;
+
+		mutex_lock(&dtrace_provider_lock);
+		/* FIXME: mutex_lock(&mod_lock); */
+		mutex_lock(&dtrace_lock);
+
+		probe = dtrace_probe_lookup_id(desc.dtargd_id);
+		if (probe == NULL) {
+			mutex_unlock(&dtrace_lock);
+			/* FIXME: mutex_unlock(&mod_lock); */
+			mutex_unlock(&dtrace_provider_lock);
+
+			return -EINVAL;
+		}
+
+		mutex_unlock(&dtrace_lock);
+
+		prov = probe->dtpr_provider;
+
+		if (prov->dtpv_pops.dtps_getargdesc == NULL) {
+			/*
+			 * There isn't any typed information for this probe.
+			 * Set the argument number to DTRACE_ARGNONE.
+			 */
+			desc.dtargd_ndx = DTRACE_ARGNONE;
+		} else {
+			desc.dtargd_native[0] = '\0';
+			desc.dtargd_xlate[0] = '\0';
+			desc.dtargd_mapping = desc.dtargd_ndx;
+
+			prov->dtpv_pops.dtps_getargdesc(
+				prov->dtpv_arg, probe->dtpr_id,
+				probe->dtpr_arg, &desc);
+		}
+
+		/* FIXME: mutex_unlock(&mod_lock); */
+		mutex_unlock(&dtrace_provider_lock);
+
+		if (copy_to_user(argp, &desc, sizeof (desc)) != 0)
+			return -EFAULT;
+
+		return 0;
+	}
+
+	case DTRACEIOC_GO: {
+		processorid_t	cpuid;
+
+		rval = dtrace_state_go(state, &cpuid);
+
+		if (rval != 0)
+			return rval;
+
+		if (copy_to_user(argp, &cpuid, sizeof (cpuid)) != 0)
+			return -EFAULT;
+
+		return 0;
+	}
+
+	case DTRACEIOC_STOP: {
+		processorid_t	cpuid;
+
+		mutex_lock(&dtrace_lock);
+		rval = dtrace_state_stop(state, &cpuid);
+		mutex_unlock(&dtrace_lock);
+
+		if (rval != 0)
+			return rval;
+
+		if (copy_to_user(argp, &cpuid, sizeof (cpuid)) != 0)
+			return -EFAULT;
+
+		return 0;
+	}
+
+	default:
+		break;
+	}
+
+	return -ENOTTY;
+}
+
+static int dtrace_open(struct inode *inode, struct file *file)
+{
+	dtrace_state_t	*state;
+	uint32_t	priv;
+	uid_t		uid;
+
+	dtrace_cred2priv(file->f_cred, &priv, &uid);
+	if (priv == DTRACE_PRIV_NONE)
+		return -EACCES;
+
+	mutex_lock(&dtrace_provider_lock);
+	dtrace_probe_provide(NULL, NULL);
+	mutex_unlock(&dtrace_provider_lock);
+
+	/* FIXME: mutex_lock(&cpu_lock); */
+	mutex_lock(&dtrace_lock);
+	dtrace_opens++;
+	dtrace_membar_producer();
+
+#ifdef FIXME
+	/*
+	 * Is this relevant for Linux?  Is there an equivalent?
+	 */
+	if ((kdi_dtrace_set(KDI_DTSET_DTRACE_ACTIVATE) != 0) {
+		dtrace_opens--;
+		mutex_unlock(&cpu_lock);
+		mutex_unlock(&dtrace_lock);
+		return -EBUSY;
+	}
+#endif
+
+	state = dtrace_state_create(file);
+	/* FIXME: mutex_unlock(&cpu_lock); */
+
+	if (state == NULL) {
+#ifdef FIXME
+		if (--dtrace_opens == 0 && dtrace_anon.dta_enabling == NULL)
+			(void)kdi_dtrace_set(KDI_DTSET_DTRACE_DEACTIVATE);
+#endif
+
+		mutex_unlock(&dtrace_lock);
+
+		return -EAGAIN;
+	}
+
+	file->private_data = state;
+
+	mutex_unlock(&dtrace_lock);
+
+	return 0;
+}
+
+static int dtrace_close(struct inode *inode, struct file *file)
+{
+	dtrace_state_t	*state;
+
+	/* FIXME: mutex_lock(&cpu_lock); */
+	mutex_lock(&dtrace_lock);
+
+	/*
+	 * If there is anonymous state, destroy that first.
+	 */
+	state = file->private_data;
+	if (state->dts_anon) {
+		ASSERT(dtrace_anon.dta_state == NULL);
+
+		dtrace_state_destroy(state->dts_anon);
+	}
+
+	dtrace_state_destroy(state);
+	ASSERT(dtrace_opens > 0);
+
+#ifdef FIXME
+	if (--dtrace_opens == 0 && dtrace_anon.dta_enabling == NULL)
+		(void)kdi_dtrace_set(KDI_DTSET_DTRACE_DEACTIVATE);
+#endif
+
+	mutex_unlock(&dtrace_lock);
+	/* FIXME: mutex_unlock(&cpu_lock); */
+
+	return 0;
+}
+
+static const struct file_operations dtrace_fops = {
+	.owner  = THIS_MODULE,
+        .unlocked_ioctl = dtrace_ioctl,
+        .open   = dtrace_open,
+        .release = dtrace_close,
+};
+
+static struct miscdevice dtrace_dev = {
+	.minor = DT_DEV_DTRACE_MINOR,
+	.name = "dtrace",
+	.nodename = "dtrace/dtrace",
+	.fops = &dtrace_fops,
+};
+
+/*
+ * Register a toxic range.
+ */
+static void dtrace_toxrange_add(uintptr_t base, uintptr_t limit)
+{
+	if (dtrace_toxranges >= dtrace_toxranges_max) {
+		int			osize, nsize;
+		dtrace_toxrange_t	*range;
+
+		osize = dtrace_toxranges_max * sizeof (dtrace_toxrange_t);
+
+		if (osize == 0) {
+			ASSERT(dtrace_toxrange == NULL);
+			ASSERT(dtrace_toxranges_max == 0);
+
+			dtrace_toxranges_max = 1;
+		} else
+			dtrace_toxranges_max <<= 1;
+
+		nsize = dtrace_toxranges_max * sizeof (dtrace_toxrange_t);
+		range = kzalloc(nsize, GFP_KERNEL);
+
+		if (dtrace_toxrange != NULL) {
+			ASSERT(osize != 0);
+
+			memcpy(range, dtrace_toxrange, osize);
+			kfree(dtrace_toxrange);
+		}
+
+		dtrace_toxrange = range;
+	}
+
+	ASSERT(dtrace_toxrange[dtrace_toxranges].dtt_base == (uintptr_t)NULL);
+	ASSERT(dtrace_toxrange[dtrace_toxranges].dtt_limit == (uintptr_t)NULL);
+
+	dtrace_toxrange[dtrace_toxranges].dtt_base = base;
+	dtrace_toxrange[dtrace_toxranges].dtt_limit = limit;
+	dtrace_toxranges++;
+}
+
+/*
+ * Check if an address falls within a toxic region.
+ */
+int dtrace_istoxic(uintptr_t kaddr, size_t size)
+{
+	uintptr_t	taddr, tsize;
+	int		i;
+
+	for (i = 0; i < dtrace_toxranges; i++) {
+		taddr = dtrace_toxrange[i].dtt_base;
+		tsize = dtrace_toxrange[i].dtt_limit - taddr;
+
+		if (kaddr - taddr < tsize) {
+			DTRACE_CPUFLAG_SET(CPU_DTRACE_BADADDR);
+			cpu_core[smp_processor_id()].cpuc_dtrace_illval = kaddr;
+			return 1;
+		}
+
+		if (taddr - kaddr < size) {
+			DTRACE_CPUFLAG_SET(CPU_DTRACE_BADADDR);
+			cpu_core[smp_processor_id()].cpuc_dtrace_illval = taddr;
+			return 1;
+		}
+	}
+
+	return 0;
+}
+
+/*
+ * Initialize the DTrace core.
+ *
+ * Equivalent to: dtrace_attach()
+ */
+int dtrace_dev_init(void)
+{
+	dtrace_provider_id_t	id;
+	int			rc = 0;
+
+	/* FIXME: mutex_lock(&cpu_lock); */
+	mutex_lock(&dtrace_provider_lock);
+	mutex_lock(&dtrace_lock);
+
+	/*
+	 * Register the device for the DTrace core.
+	 */
+	rc = misc_register(&dtrace_dev);
+	if (rc) {
+		pr_err("%s: Can't register misc device %d\n",
+		       dtrace_dev.name, dtrace_dev.minor);
+
+		/* FIXME: mutex_unlock(&cpu_lock); */
+		mutex_unlock(&dtrace_lock);
+		mutex_unlock(&dtrace_provider_lock);
+
+		return rc;
+	}
+
+#ifdef FIXME
+	dtrace_modload = dtrace_module_loaded;
+	dtrace_modunload = dtrace_module_unloaded;
+	dtrace_cpu_init = dtrace_cpu_setup_initial;
+	dtrace_helpers_cleanup = dtrace_helpers_destroy;
+	dtrace_helpers_fork = dtrace_helpers_duplicate;
+	dtrace_cpustart_init = dtrace_suspend;
+	dtrace_cpustart_fini = dtrace_resume;
+	dtrace_debugger_init = dtrace_suspend;
+	dtrace_debugger_fini = dtrace_resume;
+
+	register_cpu_setup_func((cpu_setup_func_t *)dtrace_cpu_setup, NULL);
+#endif
+
+	dtrace_probe_init();
+
+#ifdef FIXME
+	dtrace_taskq = taskq_create("dtrace_taskq", 1, maxclsyspri, 1, INT_MAX,
+				    0);
+#endif
+
+	dtrace_state_cache = kmem_cache_create("dtrace_state_cache",
+				sizeof (dtrace_dstate_percpu_t) * NR_CPUS,
+				__alignof__(dtrace_dstate_percpu_t),
+				SLAB_PANIC, NULL);
+
+	/*
+	 * Create the probe hashtables.
+	 */
+	dtrace_bymod = dtrace_hash_create(
+				offsetof(dtrace_probe_t, dtpr_mod),
+				offsetof(dtrace_probe_t, dtpr_nextmod),
+				offsetof(dtrace_probe_t, dtpr_prevmod));
+	dtrace_byfunc = dtrace_hash_create(
+				offsetof(dtrace_probe_t, dtpr_func),
+				offsetof(dtrace_probe_t, dtpr_nextfunc),
+				offsetof(dtrace_probe_t, dtpr_prevfunc));
+	dtrace_byname = dtrace_hash_create(
+				offsetof(dtrace_probe_t, dtpr_name),
+				offsetof(dtrace_probe_t, dtpr_nextname),
+				offsetof(dtrace_probe_t, dtpr_prevname));
+
+	/*
+	 * Ensure that the X configuration parameter has a legal value.
+	 */
+	if (dtrace_retain_max < 1) {
+		pr_warning("Illegal value (%lu) for dtrace_retain_max; "
+			   "setting to 1", (unsigned long)dtrace_retain_max);
+
+		dtrace_retain_max = 1;
+	}
+
+	/*
+	 * Discover our toxic ranges.
+	 */
+	dtrace_toxic_ranges(dtrace_toxrange_add);
+
+	/*
+	 * Register ourselves as a provider.
+	 */
+	(void)dtrace_register("dtrace", &dtrace_provider_attr,
+			      DTRACE_PRIV_NONE, 0, &dtrace_provider_ops, NULL,
+			      &id);
+
+	ASSERT(dtrace_provider != NULL);
+	ASSERT((dtrace_provider_id_t)dtrace_provider == id);
+
+	/*
+	 * Create BEGIN, END, and ERROR probes.
+	 */
+	dtrace_probeid_begin = dtrace_probe_create(
+				(dtrace_provider_id_t)dtrace_provider, NULL,
+				NULL, "BEGIN", 0, NULL);
+	dtrace_probeid_end = dtrace_probe_create(
+				(dtrace_provider_id_t)dtrace_provider, NULL,
+				NULL, "END", 0, NULL);
+	dtrace_probeid_error = dtrace_probe_create(
+				(dtrace_provider_id_t)dtrace_provider, NULL,
+				NULL, "ERROR", 1, NULL);
+
+	dtrace_anon_property();
+	/* FIXME: mutex_unlock(&cpu_lock); */
+
+	/*
+	 * If DTrace helper tracing is enabled, we need to allocate a trace
+	 * buffer.
+	 */
+	if (dtrace_helptrace_enabled) {
+		ASSERT(dtrace_helptrace_buffer == NULL);
+
+		dtrace_helptrace_buffer = kzalloc(dtrace_helptrace_bufsize,
+						  GFP_KERNEL);
+		dtrace_helptrace_next = 0;
+	}
+
+#ifdef FIXME
+	/*
+	 * There is usually code here to handle the case where there already
+	 * are providers when we get to this code.  On Linux, that does not
+	 * seem to be possible since the DTrace core module (this code) is
+	 * loaded as a dependency for each provider, and thus this
+	 * initialization code is executed prior to the initialization code of
+	 * the first provider causing the core to be loaded.
+	 */
+#endif
+
+	mutex_unlock(&dtrace_lock);
+	mutex_unlock(&dtrace_provider_lock);
+
+	return 0;
+}
+
+void dtrace_dev_exit(void)
+{
+	misc_deregister(&dtrace_dev);
+
+	dtrace_probe_exit();
+}
diff -urN ../linux-2.6.34/kernel/dtrace/dtrace_dev.h ./kernel/dtrace/dtrace_dev.h
--- ../linux-2.6.34/kernel/dtrace/dtrace_dev.h	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/dtrace_dev.h	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,16 @@
+#ifndef _DTRACE_DEV_H_
+#define _DTRACE_DEV_H_
+
+#define DT_DEV_DTRACE_MINOR	(16)
+#define DT_DEV_HELPER_MINOR	(DT_DEV_DTRACE_MINOR + 1)
+#define DT_DEV_PROFILE_MINOR	(DT_DEV_HELPER_MINOR + 1)
+#define DT_DEV_SYSTRACE_MINOR	(DT_DEV_PROFILE_MINOR + 1)
+#define DT_DEV_FBT_MINOR	(DT_DEV_SYSTRACE_MINOR + 1)
+#define DT_DEV_SDT_MINOR	(DT_DEV_FBT_MINOR + 1)
+#define DT_DEV_FASTTRAP_MINOR	(DT_DEV_SDT_MINOR + 1)
+#define DT_DEV_LOCKSTAT_MINOR	(DT_DEV_FASTTRAP_MINOR + 1)
+
+extern int dtrace_dev_init(void);
+extern void dtrace_dev_exit(void);
+
+#endif /* _DTRACE_DEV_H_ */
diff -urN ../linux-2.6.34/kernel/dtrace/dtrace_dif.c ./kernel/dtrace/dtrace_dif.c
--- ../linux-2.6.34/kernel/dtrace/dtrace_dif.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/dtrace_dif.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,4397 @@
+/*
+ * FILE:	dtrace_dif.c
+ * DESCRIPTION:	Dynamic Tracing: DIF object functions
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/hardirq.h>
+#include <linux/in6.h>
+#include <linux/inet.h>
+#include <linux/kdev_t.h>
+#include <linux/slab.h>
+#include <linux/socket.h>
+#include <net/ipv6.h>
+
+#include "dtrace.h"
+
+size_t				dtrace_global_maxsize = 16 * 1024;
+
+static uint64_t			dtrace_vtime_references;
+
+static int dtrace_difo_err(uint_t pc, const char *format, ...)
+{
+	char	buf[256];
+
+	if (dtrace_err_verbose) {
+		va_list	alist;
+		size_t	len = strlen(format);
+
+		pr_err("dtrace DIF object error: [%u]: ", pc);
+
+		if (len >= 256 - sizeof(KERN_ERR)) {
+			pr_err("<invalid format string>");
+			return 1;
+		}
+
+		memcpy(buf, KERN_ERR, sizeof(KERN_ERR));
+		memcpy(buf + sizeof(KERN_ERR), format, len);
+
+		va_start(alist, format);
+		vprintk(buf, alist);
+		va_end(alist);
+	}
+
+	return 1;
+}
+
+/*
+ * Validate a DTrace DIF object by checking the IR instructions.  The following
+ * rules are currently enforced by dtrace_difo_validate():
+ *
+ * 1. Each instruction must have a valid opcode
+ * 2. Each register, string, variable, or subroutine reference must be valid
+ * 3. No instruction can modify register %r0 (must be zero)
+ * 4. All instruction reserved bits must be set to zero
+ * 5. The last instruction must be a "ret" instruction
+ * 6. All branch targets must reference a valid instruction _after_ the branch
+ */
+int dtrace_difo_validate(dtrace_difo_t *dp, dtrace_vstate_t *vstate,
+			 uint_t nregs, const cred_t *cr)
+{
+	int	err = 0, i;
+	int	(*efunc)(uint_t pc, const char *, ...) = dtrace_difo_err;
+	int	kcheckload;
+	uint_t	pc;
+
+	kcheckload = cr == NULL ||
+		     (vstate->dtvs_state->dts_cred.dcr_visible &
+		      DTRACE_CRV_KERNEL) == 0;
+
+	dp->dtdo_destructive = 0;
+
+	for (pc = 0; pc < dp->dtdo_len && err == 0; pc++) {
+		dif_instr_t	instr = dp->dtdo_buf[pc];
+		uint_t		r1 = DIF_INSTR_R1(instr);
+		uint_t		r2 = DIF_INSTR_R2(instr);
+		uint_t		rd = DIF_INSTR_RD(instr);
+		uint_t		rs = DIF_INSTR_RS(instr);
+		uint_t		label = DIF_INSTR_LABEL(instr);
+		uint_t		v = DIF_INSTR_VAR(instr);
+		uint_t		subr = DIF_INSTR_SUBR(instr);
+		uint_t		type = DIF_INSTR_TYPE(instr);
+		uint_t		op = DIF_INSTR_OP(instr);
+
+		switch (op) {
+		case DIF_OP_OR:
+		case DIF_OP_XOR:
+		case DIF_OP_AND:
+		case DIF_OP_SLL:
+		case DIF_OP_SRL:
+		case DIF_OP_SRA:
+		case DIF_OP_SUB:
+		case DIF_OP_ADD:
+		case DIF_OP_MUL:
+		case DIF_OP_SDIV:
+		case DIF_OP_UDIV:
+		case DIF_OP_SREM:
+		case DIF_OP_UREM:
+		case DIF_OP_COPYS:
+			if (r1 >= nregs)
+				err += efunc(pc, "invalid register %u\n", r1);
+			if (r2 >= nregs)
+				err += efunc(pc, "invalid register %u\n", r2);
+			if (rd >= nregs)
+				err += efunc(pc, "invalid register %u\n", rd);
+			if (rd == 0)
+				err += efunc(pc, "cannot write to %r0\n");
+			break;
+		case DIF_OP_NOT:
+		case DIF_OP_MOV:
+		case DIF_OP_ALLOCS:
+			if (r1 >= nregs)
+				err += efunc(pc, "invalid register %u\n", r1);
+			if (r2 != 0)
+				err += efunc(pc, "non-zero reserved bits\n");
+			if (rd >= nregs)
+				err += efunc(pc, "invalid register %u\n", rd);
+			if (rd == 0)
+				err += efunc(pc, "cannot write to %r0\n");
+			break;
+		case DIF_OP_LDSB:
+		case DIF_OP_LDSH:
+		case DIF_OP_LDSW:
+		case DIF_OP_LDUB:
+		case DIF_OP_LDUH:
+		case DIF_OP_LDUW:
+		case DIF_OP_LDX:
+			if (r1 >= nregs)
+				err += efunc(pc, "invalid register %u\n", r1);
+			if (r2 != 0)
+				err += efunc(pc, "non-zero reserved bits\n");
+			if (rd >= nregs)
+				err += efunc(pc, "invalid register %u\n", rd);
+			if (rd == 0)
+				err += efunc(pc, "cannot write to %r0\n");
+			if (kcheckload)
+				dp->dtdo_buf[pc] = DIF_INSTR_LOAD(
+							op + DIF_OP_RLDSB -
+							     DIF_OP_LDSB,
+							r1, rd);
+			break;
+		case DIF_OP_RLDSB:
+		case DIF_OP_RLDSH:
+		case DIF_OP_RLDSW:
+		case DIF_OP_RLDUB:
+		case DIF_OP_RLDUH:
+		case DIF_OP_RLDUW:
+		case DIF_OP_RLDX:
+			if (r1 >= nregs)
+				err += efunc(pc, "invalid register %u\n", r1);
+			if (r2 != 0)
+				err += efunc(pc, "non-zero reserved bits\n");
+			if (rd >= nregs)
+				err += efunc(pc, "invalid register %u\n", rd);
+			if (rd == 0)
+				err += efunc(pc, "cannot write to %r0\n");
+			break;
+		case DIF_OP_ULDSB:
+		case DIF_OP_ULDSH:
+		case DIF_OP_ULDSW:
+		case DIF_OP_ULDUB:
+		case DIF_OP_ULDUH:
+		case DIF_OP_ULDUW:
+		case DIF_OP_ULDX:
+			if (r1 >= nregs)
+				err += efunc(pc, "invalid register %u\n", r1);
+			if (r2 != 0)
+				err += efunc(pc, "non-zero reserved bits\n");
+			if (rd >= nregs)
+				err += efunc(pc, "invalid register %u\n", rd);
+			if (rd == 0)
+				err += efunc(pc, "cannot write to %r0\n");
+			break;
+		case DIF_OP_STB:
+		case DIF_OP_STH:
+		case DIF_OP_STW:
+		case DIF_OP_STX:
+			if (r1 >= nregs)
+				err += efunc(pc, "invalid register %u\n", r1);
+			if (r2 != 0)
+				err += efunc(pc, "non-zero reserved bits\n");
+			if (rd >= nregs)
+				err += efunc(pc, "invalid register %u\n", rd);
+			if (rd == 0)
+				err += efunc(pc, "cannot write to 0 address\n");
+			break;
+		case DIF_OP_CMP:
+		case DIF_OP_SCMP:
+			if (r1 >= nregs)
+				err += efunc(pc, "invalid register %u\n", r1);
+			if (r2 >= nregs)
+				err += efunc(pc, "invalid register %u\n", r2);
+			if (rd != 0)
+				err += efunc(pc, "non-zero reserved bits\n");
+			break;
+		case DIF_OP_TST:
+			if (r1 >= nregs)
+				err += efunc(pc, "invalid register %u\n", r1);
+			if (r2 != 0 || rd != 0)
+				err += efunc(pc, "non-zero reserved bits\n");
+			break;
+		case DIF_OP_BA:
+		case DIF_OP_BE:
+		case DIF_OP_BNE:
+		case DIF_OP_BG:
+		case DIF_OP_BGU:
+		case DIF_OP_BGE:
+		case DIF_OP_BGEU:
+		case DIF_OP_BL:
+		case DIF_OP_BLU:
+		case DIF_OP_BLE:
+		case DIF_OP_BLEU:
+			if (label >= dp->dtdo_len)
+				err += efunc(pc, "invalid branch target %u\n",
+					     label);
+			if (label <= pc)
+				err += efunc(pc, "backward branch to %u\n",
+					     label);
+			break;
+		case DIF_OP_RET:
+			if (r1 != 0 || r2 != 0)
+				err += efunc(pc, "non-zero reserved bits\n");
+			if (rd >= nregs)
+				err += efunc(pc, "invalid register %u\n", rd);
+			break;
+		case DIF_OP_NOP:
+		case DIF_OP_POPTS:
+		case DIF_OP_FLUSHTS:
+			if (r1 != 0 || r2 != 0 || rd != 0)
+				err += efunc(pc, "non-zero reserved bits\n");
+			break;
+		case DIF_OP_SETX:
+			if (DIF_INSTR_INTEGER(instr) >= dp->dtdo_intlen)
+				err += efunc(pc, "invalid integer ref %u\n",
+					     DIF_INSTR_INTEGER(instr));
+			if (rd >= nregs)
+				err += efunc(pc, "invalid register %u\n", rd);
+			if (rd == 0)
+				err += efunc(pc, "cannot write to %r0\n");
+			break;
+		case DIF_OP_SETS:
+			if (DIF_INSTR_STRING(instr) >= dp->dtdo_strlen)
+				err += efunc(pc, "invalid string ref %u\n",
+					     DIF_INSTR_STRING(instr));
+			if (rd >= nregs)
+				err += efunc(pc, "invalid register %u\n", rd);
+			if (rd == 0)
+				err += efunc(pc, "cannot write to %r0\n");
+			break;
+		case DIF_OP_LDGA:
+		case DIF_OP_LDTA:
+			if (r1 > DIF_VAR_ARRAY_MAX)
+				err += efunc(pc, "invalid array %u\n", r1);
+			if (r2 >= nregs)
+				err += efunc(pc, "invalid register %u\n", r2);
+			if (rd >= nregs)
+				err += efunc(pc, "invalid register %u\n", rd);
+			if (rd == 0)
+				err += efunc(pc, "cannot write to %r0\n");
+			break;
+		case DIF_OP_LDGS:
+		case DIF_OP_LDTS:
+		case DIF_OP_LDLS:
+		case DIF_OP_LDGAA:
+		case DIF_OP_LDTAA:
+			if (v < DIF_VAR_OTHER_MIN || v > DIF_VAR_OTHER_MAX)
+				err += efunc(pc, "invalid variable %u\n", v);
+			if (rd >= nregs)
+				err += efunc(pc, "invalid register %u\n", rd);
+			if (rd == 0)
+				err += efunc(pc, "cannot write to %r0\n");
+			break;
+		case DIF_OP_STGS:
+		case DIF_OP_STTS:
+		case DIF_OP_STLS:
+		case DIF_OP_STGAA:
+		case DIF_OP_STTAA:
+			if (v < DIF_VAR_OTHER_UBASE || v > DIF_VAR_OTHER_MAX)
+				err += efunc(pc, "invalid variable %u\n", v);
+			if (rs >= nregs)
+				err += efunc(pc, "invalid register %u\n", rd);
+			break;
+		case DIF_OP_CALL:
+			if (subr > DIF_SUBR_MAX)
+				err += efunc(pc, "invalid subr %u\n", subr);
+			if (rd >= nregs)
+				err += efunc(pc, "invalid register %u\n", rd);
+			if (rd == 0)
+				err += efunc(pc, "cannot write to %r0\n");
+
+			if (subr == DIF_SUBR_COPYOUT ||
+			    subr == DIF_SUBR_COPYOUTSTR)
+				dp->dtdo_destructive = 1;
+			break;
+		case DIF_OP_PUSHTR:
+			if (type != DIF_TYPE_STRING && type != DIF_TYPE_CTF)
+				err += efunc(pc, "invalid ref type %u\n", type);
+			if (r2 >= nregs)
+				err += efunc(pc, "invalid register %u\n", r2);
+			if (rs >= nregs)
+				err += efunc(pc, "invalid register %u\n", rs);
+			break;
+		case DIF_OP_PUSHTV:
+			if (type != DIF_TYPE_CTF)
+				err += efunc(pc, "invalid val type %u\n", type);
+			if (r2 >= nregs)
+				err += efunc(pc, "invalid register %u\n", r2);
+			if (rs >= nregs)
+				err += efunc(pc, "invalid register %u\n", rs);
+			break;
+		default:
+			err += efunc(pc, "invalid opcode %u\n",
+				     DIF_INSTR_OP(instr));
+		}
+	}
+
+	if (dp->dtdo_len != 0 &&
+	    DIF_INSTR_OP(dp->dtdo_buf[dp->dtdo_len - 1]) != DIF_OP_RET) {
+		err += efunc(dp->dtdo_len - 1,
+			     "expected 'ret' as last DIF instruction\n");
+	}
+
+	if (!(dp->dtdo_rtype.dtdt_flags & DIF_TF_BYREF)) {
+		/*
+		 * If we're not returning by reference, the size must be either
+		 * 0 or the size of one of the base types.
+		 */
+		switch (dp->dtdo_rtype.dtdt_size) {
+		case 0:
+		case sizeof(uint8_t):
+		case sizeof(uint16_t):
+		case sizeof(uint32_t):
+		case sizeof(uint64_t):
+			break;
+
+		default:
+			err += efunc(dp->dtdo_len - 1, "bad return size\n");
+		}
+	}
+
+	for (i = 0; i < dp->dtdo_varlen && err == 0; i++) {
+		dtrace_difv_t		*v = &dp->dtdo_vartab[i],
+					*existing = NULL;
+		dtrace_diftype_t	*vt, *et;
+		uint_t			id, ndx;
+
+		if (v->dtdv_scope != DIFV_SCOPE_GLOBAL &&
+		    v->dtdv_scope != DIFV_SCOPE_THREAD &&
+		    v->dtdv_scope != DIFV_SCOPE_LOCAL) {
+			err += efunc(i, "unrecognized variable scope %d\n",
+				     v->dtdv_scope);
+			break;
+		}
+
+		if (v->dtdv_kind != DIFV_KIND_ARRAY &&
+		    v->dtdv_kind != DIFV_KIND_SCALAR) {
+			err += efunc(i, "unrecognized variable type %d\n",
+				     v->dtdv_kind);
+			break;
+		}
+
+		if ((id = v->dtdv_id) > DIF_VARIABLE_MAX) {
+			err += efunc(i, "%d exceeds variable id limit\n", id);
+			break;
+		}
+
+		if (id < DIF_VAR_OTHER_UBASE)
+			continue;
+
+		/*
+		 * For user-defined variables, we need to check that this
+		 * definition is identical to any previous definition that we
+		 * encountered.
+		 */
+		ndx = id - DIF_VAR_OTHER_UBASE;
+
+		switch (v->dtdv_scope) {
+		case DIFV_SCOPE_GLOBAL:
+			if (ndx < vstate->dtvs_nglobals) {
+				dtrace_statvar_t	*svar;
+
+				if ((svar = vstate->dtvs_globals[ndx]) != NULL)
+					existing = &svar->dtsv_var;
+			}
+
+			break;
+
+		case DIFV_SCOPE_THREAD:
+			if (ndx < vstate->dtvs_ntlocals)
+				existing = &vstate->dtvs_tlocals[ndx];
+			break;
+
+		case DIFV_SCOPE_LOCAL:
+			if (ndx < vstate->dtvs_nlocals) {
+				dtrace_statvar_t	*svar;
+
+				if ((svar = vstate->dtvs_locals[ndx]) != NULL)
+					existing = &svar->dtsv_var;
+			}
+
+			break;
+		}
+
+		vt = &v->dtdv_type;
+
+		if (vt->dtdt_flags & DIF_TF_BYREF) {
+			if (vt->dtdt_size == 0) {
+				err += efunc(i, "zero-sized variable\n");
+				break;
+			}
+
+			if (v->dtdv_scope == DIFV_SCOPE_GLOBAL &&
+			    vt->dtdt_size > dtrace_global_maxsize) {
+				err += efunc(i, "oversized by-ref global\n");
+				break;
+			}
+		}
+
+		if (existing == NULL || existing->dtdv_id == 0)
+			continue;
+
+		ASSERT(existing->dtdv_id == v->dtdv_id);
+		ASSERT(existing->dtdv_scope == v->dtdv_scope);
+
+		if (existing->dtdv_kind != v->dtdv_kind)
+			err += efunc(i, "%d changed variable kind\n", id);
+
+		et = &existing->dtdv_type;
+
+		if (vt->dtdt_flags != et->dtdt_flags) {
+			err += efunc(i, "%d changed variable type flags\n", id);
+			break;
+		}
+
+		if (vt->dtdt_size != 0 && vt->dtdt_size != et->dtdt_size) {
+			err += efunc(i, "%d changed variable type size\n", id);
+			break;
+		}
+	}
+
+	return err;
+}
+
+/*
+ * Returns 1 if the expression in the DIF object can be cached on a per-thread
+ * basis; 0 if not.
+ */
+int dtrace_difo_cacheable(dtrace_difo_t *dp)
+{
+	int	i;
+
+	if (dp == NULL)
+		return 0;
+
+	for (i = 0; i < dp->dtdo_varlen; i++) {
+		dtrace_difv_t	*v = &dp->dtdo_vartab[i];
+
+		if (v->dtdv_scope != DIFV_SCOPE_GLOBAL)
+			continue;
+
+		switch (v->dtdv_id) {
+		case DIF_VAR_CURTHREAD:
+		case DIF_VAR_PID:
+		case DIF_VAR_TID:
+		case DIF_VAR_EXECNAME:
+		case DIF_VAR_ZONENAME:
+			break;
+
+		default:
+			return 0;
+		}
+	}
+
+	/*
+	 * This DIF object may be cacheable.  Now we need to look for any
+	 * array loading instructions, any memory loading instructions, or
+	 * any stores to thread-local variables.
+	 */
+	for (i = 0; i < dp->dtdo_len; i++) {
+		uint_t	op = DIF_INSTR_OP(dp->dtdo_buf[i]);
+
+		if ((op >= DIF_OP_LDSB && op <= DIF_OP_LDX) ||
+		    (op >= DIF_OP_ULDSB && op <= DIF_OP_ULDX) ||
+		    (op >= DIF_OP_RLDSB && op <= DIF_OP_RLDX) ||
+		    op == DIF_OP_LDGA || op == DIF_OP_STTS)
+			return 0;
+	}
+
+	return 1;
+}
+
+/*
+ * This routine calculates the dynamic variable chunksize for a given DIF
+ * object.  The calculation is not fool-proof, and can probably be tricked by
+ * malicious DIF -- but it works for all compiler-generated DIF.  Because this
+ * calculation is likely imperfect, dtrace_dynvar() is able to gracefully fail
+ * if a dynamic variable size exceeds the chunksize.
+ */
+static void dtrace_difo_chunksize(dtrace_difo_t *dp, dtrace_vstate_t *vstate)
+{
+	uint64_t		sval;
+	dtrace_key_t		tupregs[DIF_DTR_NREGS + 2]; /* + thread + id */
+	const dif_instr_t	*text = dp->dtdo_buf;
+	uint_t			pc, srd = 0;
+	uint_t			ttop = 0;
+	size_t			size, ksize;
+	uint_t			id, i;
+
+	for (pc = 0; pc < dp->dtdo_len; pc++) {
+		dif_instr_t	instr = text[pc];
+		uint_t		op = DIF_INSTR_OP(instr);
+		uint_t		rd = DIF_INSTR_RD(instr);
+		uint_t		r1 = DIF_INSTR_R1(instr);
+		uint_t		nkeys = 0;
+		uchar_t		scope;
+		dtrace_key_t	*key = tupregs;
+
+		switch (op) {
+		case DIF_OP_SETX:
+			sval = dp->dtdo_inttab[DIF_INSTR_INTEGER(instr)];
+			srd = rd;
+			continue;
+
+		case DIF_OP_STTS:
+			key = &tupregs[DIF_DTR_NREGS];
+			key[0].dttk_size = 0;
+			key[1].dttk_size = 0;
+			nkeys = 2;
+			scope = DIFV_SCOPE_THREAD;
+			break;
+
+		case DIF_OP_STGAA:
+		case DIF_OP_STTAA:
+			nkeys = ttop;
+
+			if (DIF_INSTR_OP(instr) == DIF_OP_STTAA)
+				key[nkeys++].dttk_size = 0;
+
+			key[nkeys++].dttk_size = 0;
+
+			if (op == DIF_OP_STTAA)
+				scope = DIFV_SCOPE_THREAD;
+			else
+				scope = DIFV_SCOPE_GLOBAL;
+
+			break;
+
+		case DIF_OP_PUSHTR:
+			if (ttop == DIF_DTR_NREGS)
+				return;
+
+			/*
+			 * If the register for the size of the "pushtr" is %r0
+			 * (or the value is 0) and the type is a string, we'll
+			 * use the system-wide default string size.
+			 */
+			if ((srd == 0 || sval == 0) && r1 == DIF_TYPE_STRING)
+				tupregs[ttop++].dttk_size =
+						dtrace_strsize_default;
+			else {
+				if (srd == 0)
+					return;
+
+				tupregs[ttop++].dttk_size = sval;
+			}
+
+			break;
+
+		case DIF_OP_PUSHTV:
+			if (ttop == DIF_DTR_NREGS)
+				return;
+
+			tupregs[ttop++].dttk_size = 0;
+			break;
+
+		case DIF_OP_FLUSHTS:
+			ttop = 0;
+			break;
+
+		case DIF_OP_POPTS:
+			if (ttop != 0)
+				ttop--;
+			break;
+		}
+
+		sval = 0;
+		srd = 0;
+
+		if (nkeys == 0)
+			continue;
+
+		/*
+		 * We have a dynamic variable allocation; calculate its size.
+		 */
+		for (ksize = 0, i = 0; i < nkeys; i++)
+			ksize += P2ROUNDUP(key[i].dttk_size, sizeof(uint64_t));
+
+		size = sizeof(dtrace_dynvar_t);
+		size += sizeof(dtrace_key_t) * (nkeys - 1);
+		size += ksize;
+
+		/*
+		 * Now we need to determine the size of the stored data.
+		*/
+		id = DIF_INSTR_VAR(instr);
+
+		for (i = 0; i < dp->dtdo_varlen; i++) {
+			dtrace_difv_t	*v = &dp->dtdo_vartab[i];
+
+			if (v->dtdv_id == id && v->dtdv_scope == scope) {
+				size += v->dtdv_type.dtdt_size;
+				break;
+			}
+		}
+
+		if (i == dp->dtdo_varlen)
+			return;
+
+		/*
+		 * We have the size.  If this is larger than the chunk size
+		 * for our dynamic variable state, reset the chunk size.
+		 */
+		size = P2ROUNDUP(size, sizeof(uint64_t));
+
+		if (size > vstate->dtvs_dynvars.dtds_chunksize)
+			vstate->dtvs_dynvars.dtds_chunksize = size;
+	}
+}
+
+void dtrace_difo_hold(dtrace_difo_t *dp)
+{
+	int	i;
+
+	dp->dtdo_refcnt++;
+	ASSERT(dp->dtdo_refcnt != 0);
+
+	for (i = 0; i < dp->dtdo_varlen; i++) {
+		dtrace_difv_t	*v = &dp->dtdo_vartab[i];
+
+		if (v->dtdv_id != DIF_VAR_VTIMESTAMP)
+			continue;
+
+		if (dtrace_vtime_references++ == 0)
+			dtrace_vtime_enable();
+	}
+}
+
+void dtrace_difo_init(dtrace_difo_t *dp, dtrace_vstate_t *vstate)
+{
+	int	i, oldsvars, osz, nsz, otlocals, ntlocals;
+	uint_t	id;
+
+	ASSERT(mutex_is_locked(&dtrace_lock));
+	ASSERT(dp->dtdo_buf != NULL && dp->dtdo_len != 0);
+
+	for (i = 0; i < dp->dtdo_varlen; i++) {
+		dtrace_difv_t		*v = &dp->dtdo_vartab[i];
+		dtrace_statvar_t	*svar, ***svarp;
+		size_t			dsize = 0;
+		uint8_t			scope = v->dtdv_scope;
+		int			*np;
+
+		if ((id = v->dtdv_id) < DIF_VAR_OTHER_UBASE)
+			continue;
+
+		id -= DIF_VAR_OTHER_UBASE;
+
+		switch (scope) {
+		case DIFV_SCOPE_THREAD:
+			while (id >= (otlocals = vstate->dtvs_ntlocals)) {
+				dtrace_difv_t	*tlocals;
+
+				if ((ntlocals = (otlocals << 1)) == 0)
+					ntlocals = 1;
+
+				osz = otlocals * sizeof(dtrace_difv_t);
+				nsz = ntlocals * sizeof(dtrace_difv_t);
+
+				tlocals = kzalloc(nsz, GFP_KERNEL);
+
+				if (osz != 0) {
+					memcpy(tlocals, vstate->dtvs_tlocals,
+					       osz);
+					kfree(vstate->dtvs_tlocals);
+				}
+
+				vstate->dtvs_tlocals = tlocals;
+				vstate->dtvs_ntlocals = ntlocals;
+			}
+
+			vstate->dtvs_tlocals[id] = *v;
+			continue;
+
+		case DIFV_SCOPE_LOCAL:
+			np = &vstate->dtvs_nlocals;
+			svarp = &vstate->dtvs_locals;
+
+			if (v->dtdv_type.dtdt_flags & DIF_TF_BYREF)
+				dsize = NR_CPUS *
+					(v->dtdv_type.dtdt_size +
+					 sizeof(uint64_t));
+			else
+				dsize = NR_CPUS * sizeof(uint64_t);
+
+			break;
+
+		case DIFV_SCOPE_GLOBAL:
+			np = &vstate->dtvs_nglobals;
+			svarp = &vstate->dtvs_globals;
+
+			if (v->dtdv_type.dtdt_flags & DIF_TF_BYREF)
+				dsize = v->dtdv_type.dtdt_size +
+					sizeof(uint64_t);
+
+			break;
+
+		default:
+			ASSERT(0);
+			continue; /* not reached */
+		}
+
+		while (id >= (oldsvars = *np)) {
+			dtrace_statvar_t	**statics;
+			int			newsvars, oldsize, newsize;
+
+			if ((newsvars = (oldsvars << 1)) == 0)
+				newsvars = 1;
+
+			oldsize = oldsvars * sizeof(dtrace_statvar_t *);
+			newsize = newsvars * sizeof(dtrace_statvar_t *);
+
+			statics = kzalloc(newsize, GFP_KERNEL);
+
+			if (oldsize != 0) {
+				memcpy(statics, *svarp, oldsize);
+				kfree(*svarp);
+			}
+
+			*svarp = statics;
+			*np = newsvars;
+		}
+
+		if ((svar = (*svarp)[id]) == NULL) {
+			svar = kzalloc(sizeof(dtrace_statvar_t), GFP_KERNEL);
+			svar->dtsv_var = *v;
+
+			if ((svar->dtsv_size = dsize) != 0) {
+				svar->dtsv_data =
+					(uint64_t)(uintptr_t)kzalloc(
+							dsize, GFP_KERNEL);
+			}
+
+			(*svarp)[id] = svar;
+		}
+
+		svar->dtsv_refcnt++;
+	}
+
+	dtrace_difo_chunksize(dp, vstate);
+	dtrace_difo_hold(dp);
+}
+
+void dtrace_difo_destroy(dtrace_difo_t *dp, dtrace_vstate_t *vstate)
+{
+	int	i;
+
+	ASSERT(dp->dtdo_refcnt == 0);
+
+	for (i = 0; i < dp->dtdo_varlen; i++) {
+		dtrace_difv_t		*v = &dp->dtdo_vartab[i];
+		dtrace_statvar_t	*svar, **svarp;
+		uint_t			id;
+		uint8_t			scope = v->dtdv_scope;
+		int			*np;
+
+		switch (scope) {
+		case DIFV_SCOPE_THREAD:
+			continue;
+
+		case DIFV_SCOPE_LOCAL:
+			np = &vstate->dtvs_nlocals;
+			svarp = vstate->dtvs_locals;
+			break;
+
+		case DIFV_SCOPE_GLOBAL:
+			np = &vstate->dtvs_nglobals;
+			svarp = vstate->dtvs_globals;
+			break;
+
+		default:
+			BUG();
+		}
+
+		if ((id = v->dtdv_id) < DIF_VAR_OTHER_UBASE)
+			continue;
+
+		id -= DIF_VAR_OTHER_UBASE;
+		ASSERT(id < *np);
+
+		svar = svarp[id];
+		ASSERT(svar != NULL);
+		ASSERT(svar->dtsv_refcnt > 0);
+
+		if (--svar->dtsv_refcnt > 0)
+			continue;
+
+		if (svar->dtsv_size != 0) {
+			ASSERT((void *)(uintptr_t)svar->dtsv_data != NULL);
+			kfree((void *)(uintptr_t)svar->dtsv_data);
+		}
+
+		kfree(svar);
+		svarp[id] = NULL;
+	}
+
+	kfree(dp->dtdo_buf);
+        kfree(dp->dtdo_inttab);
+        kfree(dp->dtdo_strtab);
+        kfree(dp->dtdo_vartab);
+        kfree(dp);
+}
+
+void dtrace_difo_release(dtrace_difo_t *dp, dtrace_vstate_t *vstate)
+{
+	int	i;
+
+	ASSERT(mutex_is_locked(&dtrace_lock));
+	ASSERT(dp->dtdo_refcnt != 0);
+
+	for (i = 0; i < dp->dtdo_varlen; i++) {
+		dtrace_difv_t *v = &dp->dtdo_vartab[i];
+
+		if (v->dtdv_id != DIF_VAR_VTIMESTAMP)
+			continue;
+
+		ASSERT(dtrace_vtime_references > 0);
+
+		if (--dtrace_vtime_references == 0)
+			dtrace_vtime_disable();
+	}
+
+	if (--dp->dtdo_refcnt == 0)
+		dtrace_difo_destroy(dp, vstate);
+}
+
+/*
+ * The key for a thread-local variable consists of the lower 63 bits of the
+ * task pid, prefixed by a bit indicating whether an interrupt is active (1) or
+ * not (0).
+ * We add DIF_VARIABLE_MAX to the pid to assure that the thread key is never
+ * equal to a variable identifier.  This is necessary (but not sufficient) to
+ * assure that global associative arrays never collide with thread-local
+ * variables.  To guarantee that they cannot collide, we must also define the
+ * order for keying dynamic variables.  That order is:
+ *
+ *   [ key0 ] ... [ keyn ] [ variable-key ] [ tls-key ]
+ *
+ * Because the variable-key and the tls-key are in orthogonal spaces, there is
+ * no way for a global variable key signature to match a thread-local key
+ * signature.
+ */
+#define DTRACE_TLS_THRKEY(where)					\
+	{								\
+		uint_t	intr = in_interrupt() ? 1 : 0;			\
+									\
+		(where) = ((current->pid + DIF_VARIABLE_MAX) &		\
+			   (((uint64_t)1 << 63) - 1)) |			\
+			  ((uint64_t)intr << 63);			\
+	}
+
+#ifndef FIXME
+# define DTRACE_ALIGNCHECK(addr, size, flags)
+#endif
+
+/*
+ * Test whether a range of memory starting at testaddr of size testsz falls
+ * within the range of memory described by addr, sz.  We take care to avoid
+ * problems with overflow and underflow of the unsigned quantities, and
+ * disallow all negative sizes.  Ranges of size 0 are allowed.
+ */
+#define DTRACE_INRANGE(testaddr, testsz, baseaddr, basesz) \
+	((testaddr) - (baseaddr) < (basesz) && \
+	 (testaddr) + (testsz) - (baseaddr) <= (basesz) && \
+	 (testaddr) + (testsz) >= (testaddr))
+
+#define DTRACE_LOADFUNC(bits)						\
+	uint##bits##_t dtrace_load##bits(uintptr_t addr)		\
+	{								\
+		size_t			size = bits / NBBY;		\
+		uint##bits##_t		rval;				\
+		int			i;				\
+		int			cpu = smp_processor_id();	\
+		volatile uint16_t	*flags = (volatile uint16_t *)	\
+			    &cpu_core[cpu].cpuc_dtrace_flags;		\
+									\
+		DTRACE_ALIGNCHECK(addr, size, flags);			\
+									\
+		for (i = 0; i < dtrace_toxranges; i++) {		\
+			if (addr >= dtrace_toxrange[i].dtt_limit)	\
+				continue;				\
+									\
+			if (addr + size <= dtrace_toxrange[i].dtt_base)	\
+				continue;				\
+								\
+			/*						\
+			 * This address falls within a toxic region.	\
+			 */						\
+			*flags |= CPU_DTRACE_BADADDR;			\
+			cpu_core[cpu].cpuc_dtrace_illval = addr;	\
+			return 0;					\
+		}							\
+									\
+		*flags |= CPU_DTRACE_NOFAULT;				\
+		rval = *((volatile uint##bits##_t *)addr);		\
+		*flags &= ~CPU_DTRACE_NOFAULT;				\
+									\
+		return !(*flags & CPU_DTRACE_FAULT) ? rval : 0;		\
+	}
+
+#ifdef CONFIG_64BIT
+# define dtrace_loadptr	dtrace_load64
+#else
+# define dtrace_loadptr	dtrace_load32
+#endif
+
+/*
+ * Use the DTRACE_LOADFUNC macro to define functions for each of loading a
+ * uint8_t, a uint16_t, a uint32_t and a uint64_t.
+ */
+DTRACE_LOADFUNC(8)
+DTRACE_LOADFUNC(16)
+DTRACE_LOADFUNC(32)
+DTRACE_LOADFUNC(64)
+
+#define DT_BSWAP_8(x)	((x) & 0xff)
+#define DT_BSWAP_16(x)	((DT_BSWAP_8(x) << 8) | DT_BSWAP_8((x) >> 8))
+#define DT_BSWAP_32(x)	((DT_BSWAP_16(x) << 16) | DT_BSWAP_16((x) >> 16))
+#define DT_BSWAP_64(x)	((DT_BSWAP_32(x) << 32) | DT_BSWAP_32((x) >> 32))
+
+static int dtrace_inscratch(uintptr_t dest, size_t size,
+			    dtrace_mstate_t *mstate)
+{
+	if (dest < mstate->dtms_scratch_base)
+		return 0;
+
+	if (dest + size < dest)
+		return 0;
+
+	if (dest + size > mstate->dtms_scratch_ptr)
+		return 0;
+
+	return 1;
+}
+
+static int dtrace_canstore_statvar(uint64_t addr, size_t sz,
+				   dtrace_statvar_t **svars, int nsvars)
+{
+	int i;
+
+	for (i = 0; i < nsvars; i++) {
+		dtrace_statvar_t	*svar = svars[i];
+
+		if (svar == NULL || svar->dtsv_size == 0)
+			continue;
+
+		if (DTRACE_INRANGE(addr, sz, svar->dtsv_data, svar->dtsv_size))
+			return 1;
+	}
+
+	return 0;
+}
+
+/*
+ * Check to see if the address is within a memory region to which a store may
+ * be issued.  This includes the DTrace scratch areas, and any DTrace variable
+ * region.  The caller of dtrace_canstore() is responsible for performing any
+ * alignment checks that are needed before stores are actually executed.
+ */
+static int dtrace_canstore(uint64_t addr, size_t sz, dtrace_mstate_t *mstate,
+			   dtrace_vstate_t *vstate)
+{
+	/*
+	 * First, check to see if the address is in scratch space...
+	 */
+	if (DTRACE_INRANGE(addr, sz, mstate->dtms_scratch_base,
+			   mstate->dtms_scratch_size))
+		return 1;
+
+	/*
+	 * Now check to see if it's a dynamic variable.  This check will pick
+	 * up both thread-local variables and any global dynamically-allocated
+	 * variables.
+	 */
+	if (DTRACE_INRANGE(addr, sz, (uintptr_t)vstate->dtvs_dynvars.dtds_base,
+			   vstate->dtvs_dynvars.dtds_size)) {
+		dtrace_dstate_t	*dstate = &vstate->dtvs_dynvars;
+		uintptr_t	base = (uintptr_t)dstate->dtds_base +
+				       (dstate->dtds_hashsize *
+					sizeof(dtrace_dynhash_t));
+		uintptr_t	chunkoffs;
+
+		/*
+		 * Before we assume that we can store here, we need to make
+		 * sure that it isn't in our metadata -- storing to our
+		 * dynamic variable metadata would corrupt our state.  For
+		 * the range to not include any dynamic variable metadata,
+		 * it must:
+		 *
+		 *      (1) Start above the hash table that is at the base of
+		 *      the dynamic variable space
+		 *
+		 *      (2) Have a starting chunk offset that is beyond the
+		 *      dtrace_dynvar_t that is at the base of every chunk
+		 *
+		 *      (3) Not span a chunk boundary
+		 */
+		if (addr < base)
+			return 0;
+
+		chunkoffs = (addr - base) % dstate->dtds_chunksize;
+
+		if (chunkoffs < sizeof(dtrace_dynvar_t))
+			return 0;
+
+		if (chunkoffs + sz > dstate->dtds_chunksize)
+			return 0;
+
+		return 1;
+	}
+
+	/*
+	 * Finally, check the static local and global variables.  These checks
+	 * take the longest, so we perform them last.
+	 */
+	if (dtrace_canstore_statvar(addr, sz, vstate->dtvs_locals,
+				    vstate->dtvs_nlocals))
+		return 1;
+
+	if (dtrace_canstore_statvar(addr, sz, vstate->dtvs_globals,
+				    vstate->dtvs_nglobals))
+		return 1;
+
+	return 0;
+}
+
+/*
+ * Convenience routine to check to see if the address is within a memory
+ * region in which a load may be issued given the user's privilege level;
+ * if not, it sets the appropriate error flags and loads 'addr' into the
+ * illegal value slot.
+ *
+ * DTrace subroutines (DIF_SUBR_*) should use this helper to implement
+ * appropriate memory access protection.
+ */
+static int
+dtrace_canload(uint64_t addr, size_t sz, dtrace_mstate_t *mstate,
+    dtrace_vstate_t *vstate)
+{
+	int			cpu = smp_processor_id();
+	volatile uintptr_t	*illval = &cpu_core[cpu].cpuc_dtrace_illval;
+
+	/*
+	 * If we hold the privilege to read from kernel memory, then
+	 * everything is readable.
+	 */
+	if ((mstate->dtms_access & DTRACE_ACCESS_KERNEL) != 0)
+		return 1;
+
+	/*
+	 * You can obviously read that which you can store.
+	 */
+	if (dtrace_canstore(addr, sz, mstate, vstate))
+		return 1;
+
+	/*
+	 * We're allowed to read from our own string table.
+	 */
+	if (DTRACE_INRANGE(addr, sz, (uintptr_t)mstate->dtms_difo->dtdo_strtab,
+			   mstate->dtms_difo->dtdo_strlen))
+		return 1;
+
+	DTRACE_CPUFLAG_SET(CPU_DTRACE_KPRIV);
+	*illval = addr;
+
+	return 0;
+}
+
+/*
+ * Convenience routine to check to see if a given string is within a memory
+ * region in which a load may be issued given the user's privilege level;
+ * this exists so that we don't need to issue unnecessary dtrace_strlen()
+ * calls in the event that the user has all privileges.
+ */
+static int
+dtrace_strcanload(uint64_t addr, size_t sz, dtrace_mstate_t *mstate,
+    dtrace_vstate_t *vstate)
+{
+	size_t	strsz;
+
+	/*
+	 * If we hold the privilege to read from kernel memory, then
+	 * everything is readable.
+	 */
+	if ((mstate->dtms_access & DTRACE_ACCESS_KERNEL) != 0)
+		return 1;
+
+	strsz = 1 + dtrace_strlen((char *)(uintptr_t)addr, sz);
+	if (dtrace_canload(addr, strsz, mstate, vstate))
+		return 1;
+
+	return 0;
+}
+
+/*
+ * Convenience routine to check to see if a given variable is within a memory
+ * region in which a load may be issued given the user's privilege level.
+ */
+int dtrace_vcanload(void *src, dtrace_diftype_t *type, dtrace_mstate_t *mstate,
+		    dtrace_vstate_t *vstate)
+{
+	size_t	sz;
+
+	ASSERT(type->dtdt_flags & DIF_TF_BYREF);
+
+	/*
+	 * If we hold the privilege to read from kernel memory, then
+	 * everything is readable.
+	 */
+	if ((mstate->dtms_access & DTRACE_ACCESS_KERNEL) != 0)
+		return 1;
+
+	if (type->dtdt_kind == DIF_TYPE_STRING)
+		sz = dtrace_strlen(
+			src,
+			vstate->dtvs_state->dts_options[DTRACEOPT_STRSIZE]
+		     ) + 1;
+	else
+		sz = type->dtdt_size;
+
+	return dtrace_canload((uintptr_t)src, sz, mstate, vstate);
+}
+
+/*
+ * Copy src to dst using safe memory accesses.  The src is assumed to be unsafe
+ * memory specified by the DIF program.  The dst is assumed to be safe memory
+ * that we can store to directly because it is managed by DTrace.  As with
+ * standard bcopy, overlapping copies are handled properly.
+ */
+static void dtrace_bcopy(const void *src, void *dst, size_t len)
+{
+	if (len != 0) {
+		uint8_t		*s1 = dst;
+		const uint8_t	*s2 = src;
+
+		if (s1 <= s2) {
+			do {
+				*s1++ = dtrace_load8((uintptr_t)s2++);
+			} while (--len != 0);
+		} else {
+			s2 += len;
+			s1 += len;
+
+			do {
+				*--s1 = dtrace_load8((uintptr_t)--s2);
+			} while (--len != 0);
+		}
+	}
+}
+
+/*
+ * Copy src to dst using safe memory accesses, up to either the specified
+ * length, or the point that a nul byte is encountered.  The src is assumed to
+ * be unsafe memory specified by the DIF program.  The dst is assumed to be
+ * safe memory that we can store to directly because it is managed by DTrace.
+ * Unlike dtrace_bcopy(), overlapping regions are not handled.
+ */
+static void dtrace_strcpy(const void *src, void *dst, size_t len)
+{
+	if (len != 0) {
+		uint8_t		*s1 = dst, c;
+		const uint8_t	*s2 = src;
+
+		do {
+			*s1++ = c = dtrace_load8((uintptr_t)s2++);
+		} while (--len != 0 && c != '\0');
+	}
+}
+/*
+ * Copy src to dst, deriving the size and type from the specified (BYREF)
+ * variable type.  The src is assumed to be unsafe memory specified by the DIF
+ * program.  The dst is assumed to be DTrace variable memory that is of the
+ * specified type; we assume that we can store to directly.
+ */
+static void dtrace_vcopy(void *src, void *dst, dtrace_diftype_t *type)
+{
+	ASSERT(type->dtdt_flags & DIF_TF_BYREF);
+
+	if (type->dtdt_kind == DIF_TYPE_STRING)
+		dtrace_strcpy(src, dst, type->dtdt_size);
+	else
+		dtrace_bcopy(src, dst, type->dtdt_size);
+}
+
+/*
+ * Compare s1 to s2 using safe memory accesses.  The s1 data is assumed to be
+ * unsafe memory specified by the DIF program.  The s2 data is assumed to be
+ * safe memory that we can access directly because it is managed by DTrace.
+ */
+static int dtrace_bcmp(const void *s1, const void *s2, size_t len)
+{
+	volatile uint16_t	*flags;
+
+	flags = (volatile uint16_t *)&cpu_core[
+					smp_processor_id()].cpuc_dtrace_flags;
+
+	if (s1 == s2)
+		return 0;
+
+	if (s1 == NULL || s2 == NULL)
+		return 1;
+
+	if (s1 != s2 && len != 0) {
+		const uint8_t	*ps1 = s1;
+		const uint8_t	*ps2 = s2;
+
+		do {
+			if (dtrace_load8((uintptr_t)ps1++) != *ps2++)
+				return 1;
+		} while (--len != 0 && !(*flags & CPU_DTRACE_FAULT));
+	}
+
+	return 0;
+}
+
+/*
+ * Zero the specified region using a simple byte-by-byte loop.  Note that this
+ * is for safe DTrace-managed memory only.
+ */
+void dtrace_bzero(void *dst, size_t len)
+{
+	uchar_t	*cp;
+
+	for (cp = dst; len != 0; len--)
+		*cp++ = 0;
+}
+
+#define DTRACE_DYNHASH_FREE	0
+#define DTRACE_DYNHASH_SINK	1
+#define DTRACE_DYNHASH_VALID	2
+
+/*
+ * Depending on the value of the op parameter, this function looks-up,
+ * allocates or deallocates an arbitrarily-keyed dynamic variable.  If an
+ * allocation is requested, this function will return a pointer to a
+ * dtrace_dynvar_t corresponding to the allocated variable -- or NULL if no
+ * variable can be allocated.  If NULL is returned, the appropriate counter
+ * will be incremented.
+ */
+static dtrace_dynvar_t *dtrace_dynvar(dtrace_dstate_t *dstate, uint_t nkeys,
+				      dtrace_key_t *key, size_t dsize,
+				      dtrace_dynvar_op_t op,
+				      dtrace_mstate_t *mstate,
+				      dtrace_vstate_t *vstate)
+{
+	uint64_t		hashval = DTRACE_DYNHASH_VALID;
+	dtrace_dynhash_t	*hash = dstate->dtds_hash;
+	dtrace_dynvar_t		*free, *new_free, *next, *dvar, *start,
+				*prev = NULL;
+	processorid_t		me = smp_processor_id(), cpu = me;
+	dtrace_dstate_percpu_t	*dcpu = &dstate->dtds_percpu[me];
+	size_t			bucket, ksize;
+	size_t			chunksize = dstate->dtds_chunksize;
+	uintptr_t		kdata, lock, nstate;
+	uint_t			i;
+
+        ASSERT(nkeys != 0);
+
+	/*
+	 * Hash the key.  As with aggregations, we use Jenkins' "One-at-a-time"
+	 * algorithm.  For the by-value portions, we perform the algorithm in
+	 * 16-bit chunks (as opposed to 8-bit chunks).  This speeds things up a
+	 * bit, and seems to have only a minute effect on distribution.  For
+	 * the by-reference data, we perform "One-at-a-time" iterating (safely)
+	 * over each referenced byte.  It's painful to do this, but it's much
+	 * better than pathological hash distribution.  The efficacy of the
+	 * hashing algorithm (and a comparison with other algorithms) may be
+	 * found by running the ::dtrace_dynstat MDB dcmd.
+	 */
+	for (i = 0; i < nkeys; i++) {
+		if (key[i].dttk_size == 0) {
+			uint64_t	val = key[i].dttk_value;
+
+			hashval += (val >> 48) & 0xffff;
+			hashval += (hashval << 10);
+			hashval ^= (hashval >> 6);
+
+			hashval += (val >> 32) & 0xffff;
+			hashval += (hashval << 10);
+			hashval ^= (hashval >> 6);
+
+			hashval += (val >> 16) & 0xffff;
+			hashval += (hashval << 10);
+			hashval ^= (hashval >> 6);
+
+			hashval += val & 0xffff;
+			hashval += (hashval << 10);
+			hashval ^= (hashval >> 6);
+		} else {
+			/*
+			 * This is incredibly painful, but it beats the hell
+			 * out of the alternative.
+			 */
+			uint64_t	j, size = key[i].dttk_size;
+			uintptr_t	base = (uintptr_t)key[i].dttk_value;
+
+			if (!dtrace_canload(base, size, mstate, vstate))
+				break;
+
+			for (j = 0; j < size; j++) {
+				hashval += dtrace_load8(base + j);
+				hashval += (hashval << 10);
+				hashval ^= (hashval >> 6);
+			}
+		}
+	}
+
+	if (DTRACE_CPUFLAG_ISSET(CPU_DTRACE_FAULT))
+		return NULL;
+
+	hashval += (hashval << 3);
+	hashval ^= (hashval >> 11);
+	hashval += (hashval << 15);
+
+	/*
+	 * There is a remote chance (ideally, 1 in 2^31) that our hashval
+	 * comes out to be one of our two sentinel hash values.  If this
+	 * actually happens, we set the hashval to be a value known to be a
+	 * non-sentinel value.
+	 */
+	if (hashval == DTRACE_DYNHASH_FREE || hashval == DTRACE_DYNHASH_SINK)
+		hashval = DTRACE_DYNHASH_VALID;
+
+/*
+* Yes, it's painful to do a divide here.  If the cycle count becomes
+* important here, tricks can be pulled to reduce it.  (However, it's
+* critical that hash collisions be kept to an absolute minimum;
+* they're much more painful than a divide.)  It's better to have a
+* solution that generates few collisions and still keeps things
+* relatively simple.
+*/
+bucket = hashval % dstate->dtds_hashsize;
+
+if (op == DTRACE_DYNVAR_DEALLOC) {
+volatile uintptr_t *lockp = &hash[bucket].dtdh_lock;
+
+for (;;) {
+while ((lock = *lockp) & 1)
+continue;
+
+if (cmpxchg(lockp, lock, (lock + 1)) == lock)
+break;
+}
+
+dtrace_membar_producer();
+}
+
+top:
+prev = NULL;
+lock = hash[bucket].dtdh_lock;
+
+dtrace_membar_consumer();
+
+start = hash[bucket].dtdh_chain;
+ASSERT(start != NULL && (start->dtdv_hashval == DTRACE_DYNHASH_SINK ||
+start->dtdv_hashval != DTRACE_DYNHASH_FREE ||
+op != DTRACE_DYNVAR_DEALLOC));
+
+for (dvar = start; dvar != NULL; dvar = dvar->dtdv_next) {
+dtrace_tuple_t *dtuple = &dvar->dtdv_tuple;
+dtrace_key_t *dkey = &dtuple->dtt_key[0];
+
+if (dvar->dtdv_hashval != hashval) {
+if (dvar->dtdv_hashval == DTRACE_DYNHASH_SINK) {
+/*
+* We've reached the sink, and therefore the
+* end of the hash chain; we can kick out of
+* the loop knowing that we have seen a valid
+* snapshot of state.
+*/
+ASSERT(dvar->dtdv_next == NULL);
+ASSERT(dvar == &dtrace_dynhash_sink);
+break;
+}
+
+if (dvar->dtdv_hashval == DTRACE_DYNHASH_FREE) {
+/*
+* We've gone off the rails:  somewhere along
+* the line, one of the members of this hash
+* chain was deleted.  Note that we could also
+* detect this by simply letting this loop run
+* to completion, as we would eventually hit
+* the end of the dirty list.  However, we
+* want to avoid running the length of the
+* dirty list unnecessarily (it might be quite
+* long), so we catch this as early as
+* possible by detecting the hash marker.  In
+* this case, we simply set dvar to NULL and
+* break; the conditional after the loop will
+* send us back to top.
+*/
+dvar = NULL;
+break;
+}
+
+goto next;
+}
+
+if (dtuple->dtt_nkeys != nkeys)
+goto next;
+
+for (i = 0; i < nkeys; i++, dkey++) {
+if (dkey->dttk_size != key[i].dttk_size)
+goto next; /* size or type mismatch */
+
+if (dkey->dttk_size != 0) {
+if (dtrace_bcmp(
+(void *)(uintptr_t)key[i].dttk_value,
+(void *)(uintptr_t)dkey->dttk_value,
+dkey->dttk_size))
+goto next;
+} else {
+if (dkey->dttk_value != key[i].dttk_value)
+goto next;
+}
+}
+
+if (op != DTRACE_DYNVAR_DEALLOC)
+return dvar;
+
+ASSERT(dvar->dtdv_next == NULL ||
+dvar->dtdv_next->dtdv_hashval != DTRACE_DYNHASH_FREE);
+
+if (prev != NULL) {
+ASSERT(hash[bucket].dtdh_chain != dvar);
+ASSERT(start != dvar);
+ASSERT(prev->dtdv_next == dvar);
+prev->dtdv_next = dvar->dtdv_next;
+} else {
+if (cmpxchg(&hash[bucket].dtdh_chain, start, dvar->dtdv_next) != start) {
+/*
+* We have failed to atomically swing the
+* hash table head pointer, presumably because
+* of a conflicting allocation on another CPU.
+* We need to reread the hash chain and try
+* again.
+*/
+goto top;
+}
+}
+
+dtrace_membar_producer();
+
+/*
+* Now set the hash value to indicate that it's free.
+*/
+ASSERT(hash[bucket].dtdh_chain != dvar);
+dvar->dtdv_hashval = DTRACE_DYNHASH_FREE;
+
+dtrace_membar_producer();
+
+/*
+* Set the next pointer to point at the dirty list, and
+* atomically swing the dirty pointer to the newly freed dvar.
+*/
+do {
+next = dcpu->dtdsc_dirty;
+dvar->dtdv_next = next;
+} while (cmpxchg(&dcpu->dtdsc_dirty, next, dvar) != next);
+
+/*
+* Finally, unlock this hash bucket.
+*/
+ASSERT(hash[bucket].dtdh_lock == lock);
+ASSERT(lock & 1);
+hash[bucket].dtdh_lock++;
+
+return NULL;
+next:
+prev = dvar;
+continue;
+}
+
+if (dvar == NULL) {
+/*
+* If dvar is NULL, it is because we went off the rails:
+* one of the elements that we traversed in the hash chain
+* was deleted while we were traversing it.  In this case,
+* we assert that we aren't doing a dealloc (deallocs lock
+* the hash bucket to prevent themselves from racing with
+* one another), and retry the hash chain traversal.
+*/
+ASSERT(op != DTRACE_DYNVAR_DEALLOC);
+goto top;
+}
+
+	if (op != DTRACE_DYNVAR_ALLOC) {
+		/*
+		 * If we are not to allocate a new variable, we want to
+		 * return NULL now.  Before we return, check that the value
+		 * of the lock word hasn't changed.  If it has, we may have
+		 * seen an inconsistent snapshot.
+		 */
+		if (op == DTRACE_DYNVAR_NOALLOC) {
+			if (hash[bucket].dtdh_lock != lock)
+				goto top;
+		} else {
+			ASSERT(op == DTRACE_DYNVAR_DEALLOC);
+			ASSERT(hash[bucket].dtdh_lock == lock);
+			ASSERT(lock & 1);
+			hash[bucket].dtdh_lock++;
+		}
+
+		return NULL;
+	}
+
+	/*
+	 * We need to allocate a new dynamic variable.  The size we need is the
+	 * size of dtrace_dynvar plus the size of nkeys dtrace_key_t's plus the
+	 * size of any auxiliary key data (rounded up to 8-byte alignment) plus
+	 * the size of any referred-to data (dsize).  We then round the final
+	 * size up to the chunksize for allocation.
+	 */
+	for (ksize = 0, i = 0; i < nkeys; i++)
+		ksize += P2ROUNDUP(key[i].dttk_size, sizeof(uint64_t));
+
+	/*
+	 * This should be pretty much impossible, but could happen if, say,
+	 * strange DIF specified the tuple.  Ideally, this should be an
+	 * assertion and not an error condition -- but that requires that the
+	 * chunksize calculation in dtrace_difo_chunksize() be absolutely
+	 * bullet-proof.  (That is, it must not be able to be fooled by
+	 * malicious DIF.)  Given the lack of backwards branches in DIF,
+	 * solving this would presumably not amount to solving the Halting
+	 * Problem -- but it still seems awfully hard.
+	 */
+	if (sizeof(dtrace_dynvar_t) + sizeof(dtrace_key_t) * (nkeys - 1) +
+	    ksize + dsize > chunksize) {
+		dcpu->dtdsc_drops++;
+		return NULL;
+	}
+
+	nstate = DTRACE_DSTATE_EMPTY;
+
+	do {
+retry:
+		free = dcpu->dtdsc_free;
+
+		if (free == NULL) {
+			dtrace_dynvar_t	*clean = dcpu->dtdsc_clean;
+			void		*rval;
+
+			if (clean == NULL) {
+				/*
+				 * We're out of dynamic variable space on
+				 * this CPU.  Unless we have tried all CPUs,
+				 * we'll try to allocate from a different
+				 * CPU.
+				 */
+				switch (dstate->dtds_state) {
+				case DTRACE_DSTATE_CLEAN: {
+					uintptr_t	*sp =
+							(uintptr_t *)
+							&dstate->dtds_state;
+
+					if (++cpu >= NR_CPUS)
+						cpu = 0;
+
+					if (dcpu->dtdsc_dirty != NULL &&
+					    nstate == DTRACE_DSTATE_EMPTY)
+						nstate = DTRACE_DSTATE_DIRTY;
+
+					if (dcpu->dtdsc_rinsing != NULL)
+						nstate = DTRACE_DSTATE_RINSING;
+
+					dcpu = &dstate->dtds_percpu[cpu];
+
+					if (cpu != me)
+						goto retry;
+
+					cmpxchg(sp, DTRACE_DSTATE_CLEAN,
+						nstate);
+
+					/*
+					 * To increment the correct bean
+					 * counter, take another lap.
+					 */
+					goto retry;
+				}
+
+				case DTRACE_DSTATE_DIRTY:
+					dcpu->dtdsc_dirty_drops++;
+					break;
+
+				case DTRACE_DSTATE_RINSING:
+					dcpu->dtdsc_rinsing_drops++;
+					break;
+
+				case DTRACE_DSTATE_EMPTY:
+					dcpu->dtdsc_drops++;
+					break;
+				}
+
+				DTRACE_CPUFLAG_SET(CPU_DTRACE_DROP);
+				return NULL;
+			}
+
+			/*
+			 * The clean list appears to be non-empty.  We want to
+			 * move the clean list to the free list; we start by
+			 * moving the clean pointer aside.
+			 */
+			if (cmpxchg(&dcpu->dtdsc_clean, clean, NULL) != clean)
+				/*
+				 * We are in one of two situations:
+				 *
+				 *  (a) The clean list was switched to the
+				 *      free list by another CPU.
+				 *
+				 *  (b) The clean list was added to by the
+				 *      cleansing cyclic.
+				 *
+				 * In either of these situations, we can
+				 * just reattempt the free list allocation.
+				 */
+				goto retry;
+
+			ASSERT(clean->dtdv_hashval == DTRACE_DYNHASH_FREE);
+
+			/*
+			 * Now we'll move the clean list to the free list.
+			 * It's impossible for this to fail:  the only way
+			 * the free list can be updated is through this
+			 * code path, and only one CPU can own the clean list.
+			 * Thus, it would only be possible for this to fail if
+			 * this code were racing with dtrace_dynvar_clean().
+			 * (That is, if dtrace_dynvar_clean() updated the clean
+			 * list, and we ended up racing to update the free
+			 * list.)  This race is prevented by the dtrace_sync()
+			 * in dtrace_dynvar_clean() -- which flushes the
+			 * owners of the clean lists out before resetting
+			 * the clean lists.
+			 */
+			rval = cmpxchg(&dcpu->dtdsc_free, NULL, clean);
+			ASSERT(rval == NULL);
+
+			goto retry;
+		}
+
+		dvar = free;
+		new_free = dvar->dtdv_next;
+	} while (cmpxchg(&dcpu->dtdsc_free, free, new_free) != free);
+
+	/*
+	 * We have now allocated a new chunk.  We copy the tuple keys into the
+	 * tuple array and copy any referenced key data into the data space
+	 * following the tuple array.  As we do this, we relocate dttk_value
+	 * in the final tuple to point to the key data address in the chunk.
+	 */
+	kdata = (uintptr_t)&dvar->dtdv_tuple.dtt_key[nkeys];
+	dvar->dtdv_data = (void *)(kdata + ksize);
+	dvar->dtdv_tuple.dtt_nkeys = nkeys;
+
+	for (i = 0; i < nkeys; i++) {
+		dtrace_key_t	*dkey = &dvar->dtdv_tuple.dtt_key[i];
+		size_t		kesize = key[i].dttk_size;
+
+		if (kesize != 0) {
+			dtrace_bcopy(
+				(const void *)(uintptr_t)key[i].dttk_value,
+				(void *)kdata, kesize);
+			dkey->dttk_value = kdata;
+			kdata += P2ROUNDUP(kesize, sizeof(uint64_t));
+		} else
+			dkey->dttk_value = key[i].dttk_value;
+
+		dkey->dttk_size = kesize;
+	}
+
+	ASSERT(dvar->dtdv_hashval == DTRACE_DYNHASH_FREE);
+	dvar->dtdv_hashval = hashval;
+	dvar->dtdv_next = start;
+
+	if (cmpxchg(&hash[bucket].dtdh_chain, start, dvar) == start)
+		return dvar;
+
+	/*
+	 * The cas has failed.  Either another CPU is adding an element to
+	 * this hash chain, or another CPU is deleting an element from this
+	 * hash chain.  The simplest way to deal with both of these cases
+	 * (though not necessarily the most efficient) is to free our
+	 * allocated block and tail-call ourselves.  Note that the free is
+	 * to the dirty list and _not_ to the free list.  This is to prevent
+	 * races with allocators, above.
+	 */
+	dvar->dtdv_hashval = DTRACE_DYNHASH_FREE;
+
+	dtrace_membar_producer();
+
+	do {
+		free = dcpu->dtdsc_dirty;
+		dvar->dtdv_next = free;
+	} while (cmpxchg(&dcpu->dtdsc_dirty, free, dvar) != free);
+
+	return dtrace_dynvar(dstate, nkeys, key, dsize, op, mstate, vstate);
+}
+
+/*
+ * Return a string.  In the event that the user lacks the privilege to access
+ * arbitrary kernel memory, we copy the string out to scratch memory so that we
+ * don't fail access checking.
+ *
+ * dtrace_dif_variable() uses this routine as a helper for various
+ * builtin values such as 'execname' and 'probefunc.'
+ */
+static uintptr_t dtrace_dif_varstr(uintptr_t addr, dtrace_state_t *state,
+				   dtrace_mstate_t *mstate)
+{
+	uint64_t	size = state->dts_options[DTRACEOPT_STRSIZE];
+	uintptr_t	ret;
+	size_t		strsz;
+
+	/*
+	 * The easy case: this probe is allowed to read all of memory, so
+	 * we can just return this as a vanilla pointer.
+	 */
+	if ((mstate->dtms_access & DTRACE_ACCESS_KERNEL) != 0)
+		return addr;
+
+	/*
+	 * This is the tougher case: we copy the string in question from
+	 * kernel memory into scratch memory and return it that way: this
+	 * ensures that we won't trip up when access checking tests the
+	 * BYREF return value.
+	 */
+	strsz = dtrace_strlen((char *)addr, size) + 1;
+
+	if (mstate->dtms_scratch_ptr + strsz >
+	    mstate->dtms_scratch_base + mstate->dtms_scratch_size) {
+		DTRACE_CPUFLAG_SET(CPU_DTRACE_NOSCRATCH);
+		return (uintptr_t)NULL;
+	}
+
+	dtrace_strcpy((const void *)addr, (void *)mstate->dtms_scratch_ptr,
+		      strsz);
+	ret = mstate->dtms_scratch_ptr;
+	mstate->dtms_scratch_ptr += strsz;
+
+	return ret;
+}
+
+/*
+ * This function implements the DIF emulator's variable lookups.  The emulator
+ * passes a reserved variable identifier and optional built-in array index.
+ */
+static uint64_t dtrace_dif_variable(dtrace_mstate_t *mstate,
+				    dtrace_state_t *state, uint64_t v,
+				    uint64_t ndx)
+{
+	/*
+	 * If we're accessing one of the uncached arguments, we'll turn this
+	 * into a reference in the args array.
+	 */
+	if (v >= DIF_VAR_ARG0 && v <= DIF_VAR_ARG9) {
+		ndx = v - DIF_VAR_ARG0;
+		v = DIF_VAR_ARGS;
+	}
+
+	switch (v) {
+	case DIF_VAR_ARGS:
+		ASSERT(mstate->dtms_present & DTRACE_MSTATE_ARGS);
+
+		if (ndx >=
+		    sizeof(mstate->dtms_arg) / sizeof(mstate->dtms_arg[0])) {
+			int			aframes =
+					mstate->dtms_probe->dtpr_aframes + 2;
+			dtrace_provider_t	*pv;
+			uint64_t		val;
+
+			pv = mstate->dtms_probe->dtpr_provider;
+			if (pv->dtpv_pops.dtps_getargval != NULL)
+				val = pv->dtpv_pops.dtps_getargval(
+					pv->dtpv_arg,
+					mstate->dtms_probe->dtpr_id,
+					mstate->dtms_probe->dtpr_arg,
+					ndx, aframes);
+			else
+				val = dtrace_getarg(ndx, aframes);
+
+			/*
+			 * This is regrettably required to keep the compiler
+			 * from tail-optimizing the call to dtrace_getarg().
+			 * The condition always evaluates to true, but the
+			 * compiler has no way of figuring that out a priori.
+			 * (None of this would be necessary if the compiler
+			 * could be relied upon to _always_ tail-optimize
+			 * the call to dtrace_getarg() -- but it can't.)
+			 */
+			if (mstate->dtms_probe != NULL)
+				return val;
+
+			ASSERT(0);
+		}
+
+		return mstate->dtms_arg[ndx];
+
+	case DIF_VAR_UREGS: {
+		struct pt_regs	*regs = task_pt_regs(current);
+
+		if (!dtrace_priv_proc(state))
+			return 0;
+
+		return dtrace_getreg(regs, ndx);
+	}
+
+	case DIF_VAR_CURTHREAD:
+		if (!dtrace_priv_kernel(state))
+			return 0;
+
+		return (uint64_t)(uintptr_t)current;
+
+	case DIF_VAR_TIMESTAMP:
+		if (!(mstate->dtms_present & DTRACE_MSTATE_TIMESTAMP)) {
+			mstate->dtms_timestamp = dtrace_gethrtime();
+			mstate->dtms_present |= DTRACE_MSTATE_TIMESTAMP;
+		}
+
+		return mstate->dtms_timestamp;
+
+	case DIF_VAR_VTIMESTAMP:
+		ASSERT(dtrace_vtime_references != 0);
+
+		return current->dtrace_vtime;
+
+	case DIF_VAR_WALLTIMESTAMP:
+		if (!(mstate->dtms_present & DTRACE_MSTATE_WALLTIMESTAMP)) {
+			mstate->dtms_walltimestamp = dtrace_gethrestime();
+			mstate->dtms_present |= DTRACE_MSTATE_WALLTIMESTAMP;
+		}
+
+		return mstate->dtms_walltimestamp;
+
+	case DIF_VAR_IPL:
+		if (!dtrace_priv_kernel(state))
+			return 0;
+
+		if (!(mstate->dtms_present & DTRACE_MSTATE_IPL)) {
+			mstate->dtms_ipl = dtrace_getipl();
+			mstate->dtms_present |= DTRACE_MSTATE_IPL;
+		}
+
+		return mstate->dtms_ipl;
+
+	case DIF_VAR_EPID:
+		ASSERT(mstate->dtms_present & DTRACE_MSTATE_EPID);
+		ASSERT(mstate->dtms_present & DTRACE_MSTATE_EPID);
+
+		return mstate->dtms_epid;
+
+	case DIF_VAR_ID:
+		ASSERT(mstate->dtms_present & DTRACE_MSTATE_PROBE);
+		return mstate->dtms_probe->dtpr_id;
+
+	case DIF_VAR_STACKDEPTH:
+		if (!dtrace_priv_kernel(state))
+			return 0;
+		if (!(mstate->dtms_present & DTRACE_MSTATE_STACKDEPTH)) {
+			int	aframes = mstate->dtms_probe->dtpr_aframes + 2;
+
+			mstate->dtms_stackdepth = dtrace_getstackdepth(aframes);
+			mstate->dtms_present |= DTRACE_MSTATE_STACKDEPTH;
+		}
+
+		return mstate->dtms_stackdepth;
+
+	case DIF_VAR_USTACKDEPTH:
+		if (!dtrace_priv_proc(state))
+			return 0;
+
+		if (!(mstate->dtms_present & DTRACE_MSTATE_USTACKDEPTH)) {
+			/*
+			 * See comment in DIF_VAR_PID.
+			 */
+			if (DTRACE_ANCHORED(mstate->dtms_probe) &&
+			    in_interrupt())
+				mstate->dtms_ustackdepth = 0;
+			else {
+				DTRACE_CPUFLAG_SET(CPU_DTRACE_NOFAULT);
+				mstate->dtms_ustackdepth =
+						dtrace_getustackdepth();
+				DTRACE_CPUFLAG_CLEAR(CPU_DTRACE_NOFAULT);
+			}
+
+			mstate->dtms_present |= DTRACE_MSTATE_USTACKDEPTH;
+		}
+
+		return mstate->dtms_ustackdepth;
+
+	case DIF_VAR_CALLER:
+		if (!dtrace_priv_kernel(state))
+			return 0;
+
+		if (!(mstate->dtms_present & DTRACE_MSTATE_CALLER)) {
+			int	aframes = mstate->dtms_probe->dtpr_aframes + 2;
+
+			if (!DTRACE_ANCHORED(mstate->dtms_probe)) {
+				/*
+				 * If this is an unanchored probe, we are
+				 * required to go through the slow path:
+				 * dtrace_caller() only guarantees correct
+				 * results for anchored probes.
+				 */
+				pc_t	caller[2];
+
+				dtrace_getpcstack(caller, 2, aframes,
+					(uint32_t *)(uintptr_t)
+							mstate->dtms_arg[0]);
+				mstate->dtms_caller = caller[1];
+			} else if ((mstate->dtms_caller =
+					dtrace_caller(aframes)) == -1) {
+				/*
+				 * We have failed to do this the quick way;
+				 * we must resort to the slower approach of
+				 * calling dtrace_getpcstack().
+				 */
+				pc_t	caller;
+
+				dtrace_getpcstack(&caller, 1, aframes, NULL);
+				mstate->dtms_caller = caller;
+			}
+
+			mstate->dtms_present |= DTRACE_MSTATE_CALLER;
+		}
+
+		return mstate->dtms_caller;
+
+	case DIF_VAR_UCALLER:
+		if (!dtrace_priv_proc(state))
+			return 0;
+
+		if (!(mstate->dtms_present & DTRACE_MSTATE_UCALLER)) {
+			uint64_t	ustack[3];
+
+			/*
+			 * dtrace_getupcstack() fills in the first uint64_t
+			 * with the current PID.  The second uint64_t will
+			 * be the program counter at user-level.  The third
+			 * uint64_t will contain the caller, which is what
+			 * we're after.
+			 */
+			ustack[2] = 0;
+			DTRACE_CPUFLAG_SET(CPU_DTRACE_NOFAULT);
+			dtrace_getupcstack(ustack, 3);
+			DTRACE_CPUFLAG_CLEAR(CPU_DTRACE_NOFAULT);
+			mstate->dtms_ucaller = ustack[2];
+			mstate->dtms_present |= DTRACE_MSTATE_UCALLER;
+		}
+
+		return mstate->dtms_ucaller;
+
+	case DIF_VAR_PROBEPROV:
+		ASSERT(mstate->dtms_present & DTRACE_MSTATE_PROBE);
+
+		return dtrace_dif_varstr(
+			(uintptr_t)mstate->dtms_probe->dtpr_provider->dtpv_name,
+			state, mstate);
+
+	case DIF_VAR_PROBEMOD:
+		ASSERT(mstate->dtms_present & DTRACE_MSTATE_PROBE);
+		return dtrace_dif_varstr(
+			(uintptr_t)mstate->dtms_probe->dtpr_mod, state,
+			mstate);
+
+	case DIF_VAR_PROBEFUNC:
+		ASSERT(mstate->dtms_present & DTRACE_MSTATE_PROBE);
+
+		return dtrace_dif_varstr(
+			(uintptr_t)mstate->dtms_probe->dtpr_func, state,
+			mstate);
+
+	case DIF_VAR_PROBENAME:
+		ASSERT(mstate->dtms_present & DTRACE_MSTATE_PROBE);
+
+		return dtrace_dif_varstr(
+			(uintptr_t)mstate->dtms_probe->dtpr_name, state,
+			mstate);
+
+	case DIF_VAR_PID:
+		if (!dtrace_priv_proc(state))
+			return 0;
+
+		/*
+		 * Note that we are assuming that an unanchored probe is
+		 * always due to a high-level interrupt.  (And we're assuming
+		 * that there is only a single high level interrupt.)
+		 */
+		if (DTRACE_ANCHORED(mstate->dtms_probe) && in_interrupt())
+			return init_task.pid;
+
+		/*
+		 * It is always safe to dereference current, it always points
+		 * to a valid task_struct.
+		 */
+		return (uint64_t)current->pid;
+
+	case DIF_VAR_PPID:
+		if (!dtrace_priv_proc(state))
+			return 0;
+
+		/*
+		 * See comment in DIF_VAR_PID.
+		 */
+		if (DTRACE_ANCHORED(mstate->dtms_probe) && in_interrupt())
+			return init_task.real_parent->pid;
+
+		/*
+		 * It is always safe to dereference current, it always points
+		 * to a valid task_struct.
+		 *
+		 * Additionally, it is safe to dereference one's parent, since
+		 * it is never NULL after process birth.
+		 */
+		return (uint64_t)current->real_parent->pid;
+
+	case DIF_VAR_TID:
+		/*
+		 * See comment in DIF_VAR_PID.
+		 */
+		if (DTRACE_ANCHORED(mstate->dtms_probe) && in_interrupt())
+			return init_task.pid;
+
+		return (uint64_t)current->pid;
+
+	case DIF_VAR_EXECNAME:
+		if (!dtrace_priv_proc(state))
+			return 0;
+
+		/*
+		 * See comment in DIF_VAR_PID.
+		 */
+		if (DTRACE_ANCHORED(mstate->dtms_probe) && in_interrupt())
+			return (uint64_t)(uintptr_t)init_task.comm;
+
+		/*
+		 * It is always safe to dereference current, it always points
+		 * to a valid task_struct.
+		 */
+		return dtrace_dif_varstr((uintptr_t)current->comm, state,
+					 mstate);
+
+	case DIF_VAR_ZONENAME:
+		return 0;
+
+	case DIF_VAR_UID:
+		if (!dtrace_priv_proc(state))
+			return 0;
+
+		/*
+		 * See comment in DIF_VAR_PID.
+		 */
+		if (DTRACE_ANCHORED(mstate->dtms_probe) && in_interrupt())
+			return (uint64_t)init_task.real_cred->uid;
+
+		/*
+		 * It is always safe to dereference current, it always points
+		 * to a valid task_struct.
+		 *
+		 * Additionally, it is safe to dereference one's own process
+		 * credential, since this is never NULL after process birth.
+		 */
+		return (uint64_t)current->real_cred->uid;
+
+	case DIF_VAR_GID:
+		if (!dtrace_priv_proc(state))
+			return 0;
+
+		/*
+		 * See comment in DIF_VAR_PID.
+		 */
+		if (DTRACE_ANCHORED(mstate->dtms_probe) && in_interrupt())
+			return (uint64_t)init_task.real_cred->gid;
+
+		/*
+		 * It is always safe to dereference current, it always points
+		 * to a valid task_struct.
+		 *
+		 * Additionally, it is safe to dereference one's own process
+		 * credential, since this is never NULL after process birth.
+		 */
+		return (uint64_t)current->real_cred->gid;
+
+	case DIF_VAR_ERRNO:
+		if (!dtrace_priv_proc(state))
+			return 0;
+
+		/*
+		 * See comment in DIF_VAR_PID.
+		 */
+		if (DTRACE_ANCHORED(mstate->dtms_probe) && in_interrupt())
+			return 0;
+
+		/*
+		 * It is always safe to dereference current, it always points
+		 * to a valid task_struct.
+		 */
+		return (uint64_t)current->thread.error_code;
+
+	default:
+		DTRACE_CPUFLAG_SET(CPU_DTRACE_ILLOP);
+		return 0;
+	}
+}
+
+#define DTRACE_V4MAPPED_OFFSET	(sizeof (uint32_t) * 3)
+
+/*
+ * Emulate the execution of DTrace ID subroutines invoked by the call opcode.
+ * Notice that we don't bother validating the proper number of arguments or
+ * their types in the tuple stack.  This isn't needed because all argument
+ * interpretation is safe because of our load safety -- the worst that can
+ * happen is that a bogus program can obtain bogus results.
+ */
+static void dtrace_dif_subr(uint_t subr, uint_t rd, uint64_t *regs,
+			    dtrace_key_t *tupregs, int nargs,
+			    dtrace_mstate_t *mstate, dtrace_state_t *state)
+{
+	volatile uint16_t	*flags = &cpu_core[
+						smp_processor_id()
+					  ].cpuc_dtrace_flags;
+	volatile uintptr_t	*illval = &cpu_core[
+						smp_processor_id()
+					   ].cpuc_dtrace_illval;
+	dtrace_vstate_t		*vstate = &state->dts_vstate;
+
+	union {
+		struct mutex mi;
+		uint64_t mx;
+	} m;
+
+	union {
+		rwlock_t ri;
+		uintptr_t rw;
+	} r;
+
+	switch (subr) {
+	case DIF_SUBR_RAND:
+		regs[rd] = (dtrace_gethrtime() * 2416 + 374441) % 1771875;
+		break;
+
+	case DIF_SUBR_MUTEX_OWNED:
+		if (!dtrace_canload(tupregs[0].dttk_value,
+				    sizeof(struct mutex), mstate, vstate)) {
+			regs[rd] = 0;
+			break;
+		}
+
+		m.mx = dtrace_load64(tupregs[0].dttk_value);
+#ifdef CONFIG_SMP
+		regs[rd] = m.mi.owner != NULL;
+#else
+		regs[rd] = mutex_is_locked(&m.mi);
+#endif
+		break;
+
+	case DIF_SUBR_MUTEX_OWNER:
+		if (!dtrace_canload(tupregs[0].dttk_value,
+				    sizeof(struct mutex), mstate, vstate)) {
+			regs[rd] = 0;
+			break;
+		}
+
+		m.mx = dtrace_load64(tupregs[0].dttk_value);
+#ifdef CONFIG_SMP
+		regs[rd] = (uintptr_t)m.mi.owner;
+#else
+		regs[rd] = 0;
+#endif
+		break;
+
+	case DIF_SUBR_MUTEX_TYPE_ADAPTIVE:
+		if (!dtrace_canload(tupregs[0].dttk_value,
+				    sizeof(struct mutex), mstate, vstate)) {
+			regs[rd] = 0;
+			break;
+		}
+
+		m.mx = dtrace_load64(tupregs[0].dttk_value);
+		/*
+		 * On Linux, all mutexes are adaptive.
+		 */
+		regs[rd] = 1;
+		break;
+
+	case DIF_SUBR_MUTEX_TYPE_SPIN:
+		if (!dtrace_canload(tupregs[0].dttk_value,
+				    sizeof(struct mutex), mstate, vstate)) {
+			regs[rd] = 0;
+			break;
+		}
+
+		m.mx = dtrace_load64(tupregs[0].dttk_value);
+		/*
+		 * On Linux, all mutexes are adaptive.
+		 */
+		regs[rd] = 0;
+		break;
+
+	case DIF_SUBR_RW_READ_HELD: {
+		if (!dtrace_canload(tupregs[0].dttk_value, sizeof(uintptr_t),
+		    mstate, vstate)) {
+			regs[rd] = 0;
+			break;
+		}
+
+		r.rw = dtrace_loadptr(tupregs[0].dttk_value);
+		regs[rd] = !write_can_lock(&r.ri) && read_can_lock(&r.ri);
+		break;
+	}
+
+	case DIF_SUBR_RW_WRITE_HELD:
+		if (!dtrace_canload(tupregs[0].dttk_value, sizeof(rwlock_t),
+		    mstate, vstate)) {
+			regs[rd] = 0;
+			break;
+		}
+
+		r.rw = dtrace_loadptr(tupregs[0].dttk_value);
+		regs[rd] = !write_can_lock(&r.ri);
+		break;
+
+	case DIF_SUBR_RW_ISWRITER:
+		if (!dtrace_canload(tupregs[0].dttk_value, sizeof(rwlock_t),
+		    mstate, vstate)) {
+			regs[rd] = 0;
+			break;
+		}
+
+		r.rw = dtrace_loadptr(tupregs[0].dttk_value);
+		/*
+		 * On Linux there is no way to determine whether someone is
+		 * trying to acquire a write lock.
+		 */
+		regs[rd] = !write_can_lock(&r.ri);
+		break;
+
+	case DIF_SUBR_BCOPY: {
+		/*
+		 * We need to be sure that the destination is in the scratch
+		 * region -- no other region is allowed.
+		 */
+		uintptr_t	src = tupregs[0].dttk_value;
+		uintptr_t	dest = tupregs[1].dttk_value;
+		size_t		size = tupregs[2].dttk_value;
+
+		if (!dtrace_inscratch(dest, size, mstate)) {
+			*flags |= CPU_DTRACE_BADADDR;
+			*illval = regs[rd];
+			break;
+		}
+
+		if (!dtrace_canload(src, size, mstate, vstate)) {
+			regs[rd] = 0;
+			break;
+		}
+
+		dtrace_bcopy((void *)src, (void *)dest, size);
+		break;
+	}
+
+	case DIF_SUBR_ALLOCA:
+	case DIF_SUBR_COPYIN: {
+		uintptr_t	dest = P2ROUNDUP(mstate->dtms_scratch_ptr, 8);
+		uint64_t	size = tupregs[
+					subr == DIF_SUBR_ALLOCA ? 0 : 1
+				       ].dttk_value;
+		size_t		scratch_size = (dest -
+						mstate->dtms_scratch_ptr) +
+					       size;
+
+		/*
+		 * This action doesn't require any credential checks since
+		 * probes will not activate in user contexts to which the
+		 * enabling user does not have permissions.
+		 */
+
+		/*
+		 * Rounding up the user allocation size could have overflowed
+		 * a large, bogus allocation (like -1ULL) to 0.
+		 */
+		if (scratch_size < size ||
+		    !DTRACE_INSCRATCH(mstate, scratch_size)) {
+			DTRACE_CPUFLAG_SET(CPU_DTRACE_NOSCRATCH);
+			regs[rd] = 0;
+			break;
+		}
+
+		if (subr == DIF_SUBR_COPYIN) {
+			DTRACE_CPUFLAG_SET(CPU_DTRACE_NOFAULT);
+			dtrace_copyin(tupregs[0].dttk_value, dest, size, flags);
+			DTRACE_CPUFLAG_CLEAR(CPU_DTRACE_NOFAULT);
+		}
+
+		mstate->dtms_scratch_ptr += scratch_size;
+		regs[rd] = dest;
+		break;
+	}
+
+	case DIF_SUBR_COPYINTO: {
+		uint64_t	size = tupregs[1].dttk_value;
+		uintptr_t	dest = tupregs[2].dttk_value;
+
+		/*
+		 * This action doesn't require any credential checks since
+		 * probes will not activate in user contexts to which the
+		 * enabling user does not have permissions.
+		 */
+		if (!dtrace_inscratch(dest, size, mstate)) {
+			*flags |= CPU_DTRACE_BADADDR;
+			*illval = regs[rd];
+			break;
+		}
+
+		DTRACE_CPUFLAG_SET(CPU_DTRACE_NOFAULT);
+		dtrace_copyin(tupregs[0].dttk_value, dest, size, flags);
+		DTRACE_CPUFLAG_CLEAR(CPU_DTRACE_NOFAULT);
+		break;
+	}
+
+	case DIF_SUBR_COPYINSTR: {
+		uintptr_t	dest = mstate->dtms_scratch_ptr;
+		uint64_t	size = state->dts_options[DTRACEOPT_STRSIZE];
+
+		if (nargs > 1 && tupregs[1].dttk_value < size)
+			size = tupregs[1].dttk_value + 1;
+
+		/*
+		 * This action doesn't require any credential checks since
+		 * probes will not activate in user contexts to which the
+		 * enabling user does not have permissions.
+		 */
+		if (!DTRACE_INSCRATCH(mstate, size)) {
+			DTRACE_CPUFLAG_SET(CPU_DTRACE_NOSCRATCH);
+			regs[rd] = 0;
+			break;
+		}
+
+		DTRACE_CPUFLAG_SET(CPU_DTRACE_NOFAULT);
+		dtrace_copyinstr(tupregs[0].dttk_value, dest, size, flags);
+		DTRACE_CPUFLAG_CLEAR(CPU_DTRACE_NOFAULT);
+
+		((char *)dest)[size - 1] = '\0';
+		mstate->dtms_scratch_ptr += size;
+		regs[rd] = dest;
+		break;
+	}
+
+#if 0 /* FIXME */
+	case DIF_SUBR_MSGSIZE:
+	case DIF_SUBR_MSGDSIZE: {
+		uintptr_t	baddr = tupregs[0].dttk_value, daddr;
+		uintptr_t	wptr, rptr;
+		size_t		count = 0;
+		int		cont = 0;
+
+		while (baddr != NULL && !(*flags & CPU_DTRACE_FAULT)) {
+
+			if (!dtrace_canload(baddr, sizeof(mblk_t), mstate,
+			    vstate)) {
+				regs[rd] = 0;
+				break;
+			}
+
+			wptr = dtrace_loadptr(baddr +
+			    offsetof(mblk_t, b_wptr));
+
+			rptr = dtrace_loadptr(baddr +
+			    offsetof(mblk_t, b_rptr));
+
+			if (wptr < rptr) {
+				*flags |= CPU_DTRACE_BADADDR;
+				*illval = tupregs[0].dttk_value;
+				break;
+			}
+
+			daddr = dtrace_loadptr(baddr +
+			    offsetof(mblk_t, b_datap));
+
+			baddr = dtrace_loadptr(baddr +
+			    offsetof(mblk_t, b_cont));
+
+			/*
+			 * We want to prevent against denial-of-service here,
+			 * so we're only going to search the list for
+			 * dtrace_msgdsize_max mblks.
+			 */
+			if (cont++ > dtrace_msgdsize_max) {
+				*flags |= CPU_DTRACE_ILLOP;
+				break;
+			}
+
+			if (subr == DIF_SUBR_MSGDSIZE) {
+				if (dtrace_load8(daddr +
+				    offsetof(dblk_t, db_type)) != M_DATA)
+					continue;
+			}
+
+			count += wptr - rptr;
+		}
+
+		if (!(*flags & CPU_DTRACE_FAULT))
+			regs[rd] = count;
+
+		break;
+	}
+#endif
+
+	case DIF_SUBR_PROGENYOF: {
+		pid_t			pid = tupregs[0].dttk_value;
+		struct task_struct	*p;
+		int			rval = 0;
+
+		DTRACE_CPUFLAG_SET(CPU_DTRACE_NOFAULT);
+
+		for (p = current; p != NULL; p = p->real_parent) {
+			if (p->pid == pid) {
+				rval = 1;
+				break;
+			}
+		}
+
+		DTRACE_CPUFLAG_CLEAR(CPU_DTRACE_NOFAULT);
+
+		regs[rd] = rval;
+		break;
+	}
+
+	case DIF_SUBR_SPECULATION:
+		regs[rd] = dtrace_speculation(state);
+		break;
+
+	case DIF_SUBR_COPYOUT: {
+		uintptr_t kaddr = tupregs[0].dttk_value;
+		uintptr_t uaddr = tupregs[1].dttk_value;
+		uint64_t size = tupregs[2].dttk_value;
+
+		if (!dtrace_destructive_disallow &&
+		    dtrace_priv_proc_control(state) &&
+		    !dtrace_istoxic(kaddr, size)) {
+			DTRACE_CPUFLAG_SET(CPU_DTRACE_NOFAULT);
+			dtrace_copyout(kaddr, uaddr, size, flags);
+			DTRACE_CPUFLAG_CLEAR(CPU_DTRACE_NOFAULT);
+		}
+		break;
+	}
+
+	case DIF_SUBR_COPYOUTSTR: {
+		uintptr_t kaddr = tupregs[0].dttk_value;
+		uintptr_t uaddr = tupregs[1].dttk_value;
+		uint64_t size = tupregs[2].dttk_value;
+
+		if (!dtrace_destructive_disallow &&
+		    dtrace_priv_proc_control(state) &&
+		    !dtrace_istoxic(kaddr, size)) {
+			DTRACE_CPUFLAG_SET(CPU_DTRACE_NOFAULT);
+			dtrace_copyoutstr(kaddr, uaddr, size, flags);
+			DTRACE_CPUFLAG_CLEAR(CPU_DTRACE_NOFAULT);
+		}
+		break;
+	}
+
+	case DIF_SUBR_STRLEN: {
+		size_t sz;
+		uintptr_t addr = (uintptr_t)tupregs[0].dttk_value;
+		sz = dtrace_strlen((char *)addr,
+		    state->dts_options[DTRACEOPT_STRSIZE]);
+
+		if (!dtrace_canload(addr, sz + 1, mstate, vstate)) {
+			regs[rd] = 0;
+			break;
+		}
+
+		regs[rd] = sz;
+
+		break;
+	}
+
+	case DIF_SUBR_STRCHR:
+	case DIF_SUBR_STRRCHR: {
+		/*
+		 * We're going to iterate over the string looking for the
+		 * specified character.  We will iterate until we have reached
+		 * the string length or we have found the character.  If this
+		 * is DIF_SUBR_STRRCHR, we will look for the last occurrence
+		 * of the specified character instead of the first.
+		 */
+		uintptr_t saddr = tupregs[0].dttk_value;
+		uintptr_t addr = tupregs[0].dttk_value;
+		uintptr_t limit = addr + state->dts_options[DTRACEOPT_STRSIZE];
+		char c, target = (char)tupregs[1].dttk_value;
+
+		for (regs[rd] = 0; addr < limit; addr++) {
+			if ((c = dtrace_load8(addr)) == target) {
+				regs[rd] = addr;
+
+				if (subr == DIF_SUBR_STRCHR)
+					break;
+			}
+
+			if (c == '\0')
+				break;
+		}
+
+		if (!dtrace_canload(saddr, addr - saddr, mstate, vstate)) {
+			regs[rd] = 0;
+			break;
+		}
+
+		break;
+	}
+
+	case DIF_SUBR_STRSTR:
+	case DIF_SUBR_INDEX:
+	case DIF_SUBR_RINDEX: {
+		/*
+		 * We're going to iterate over the string looking for the
+		 * specified string.  We will iterate until we have reached
+		 * the string length or we have found the string.  (Yes, this
+		 * is done in the most naive way possible -- but considering
+		 * that the string we're searching for is likely to be
+		 * relatively short, the complexity of Rabin-Karp or similar
+		 * hardly seems merited.)
+		 */
+		char *addr = (char *)(uintptr_t)tupregs[0].dttk_value;
+		char *substr = (char *)(uintptr_t)tupregs[1].dttk_value;
+		uint64_t size = state->dts_options[DTRACEOPT_STRSIZE];
+		size_t len = dtrace_strlen(addr, size);
+		size_t sublen = dtrace_strlen(substr, size);
+		char *limit = addr + len, *orig = addr;
+		int notfound = subr == DIF_SUBR_STRSTR ? 0 : -1;
+		int inc = 1;
+
+		regs[rd] = notfound;
+
+		if (!dtrace_canload((uintptr_t)addr, len + 1, mstate, vstate)) {
+			regs[rd] = 0;
+			break;
+		}
+
+		if (!dtrace_canload((uintptr_t)substr, sublen + 1, mstate,
+		    vstate)) {
+			regs[rd] = 0;
+			break;
+		}
+
+		/*
+		 * strstr() and index()/rindex() have similar semantics if
+		 * both strings are the empty string: strstr() returns a
+		 * pointer to the (empty) string, and index() and rindex()
+		 * both return index 0 (regardless of any position argument).
+		 */
+		if (sublen == 0 && len == 0) {
+			if (subr == DIF_SUBR_STRSTR)
+				regs[rd] = (uintptr_t)addr;
+			else
+				regs[rd] = 0;
+			break;
+		}
+
+		if (subr != DIF_SUBR_STRSTR) {
+			if (subr == DIF_SUBR_RINDEX) {
+				limit = orig - 1;
+				addr += len;
+				inc = -1;
+			}
+
+			/*
+			 * Both index() and rindex() take an optional position
+			 * argument that denotes the starting position.
+			 */
+			if (nargs == 3) {
+				int64_t pos = (int64_t)tupregs[2].dttk_value;
+
+				/*
+				 * If the position argument to index() is
+				 * negative, Perl implicitly clamps it at
+				 * zero.  This semantic is a little surprising
+				 * given the special meaning of negative
+				 * positions to similar Perl functions like
+				 * substr(), but it appears to reflect a
+				 * notion that index() can start from a
+				 * negative index and increment its way up to
+				 * the string.  Given this notion, Perl's
+				 * rindex() is at least self-consistent in
+				 * that it implicitly clamps positions greater
+				 * than the string length to be the string
+				 * length.  Where Perl completely loses
+				 * coherence, however, is when the specified
+				 * substring is the empty string ("").  In
+				 * this case, even if the position is
+				 * negative, rindex() returns 0 -- and even if
+				 * the position is greater than the length,
+				 * index() returns the string length.  These
+				 * semantics violate the notion that index()
+				 * should never return a value less than the
+				 * specified position and that rindex() should
+				 * never return a value greater than the
+				 * specified position.  (One assumes that
+				 * these semantics are artifacts of Perl's
+				 * implementation and not the results of
+				 * deliberate design -- it beggars belief that
+				 * even Larry Wall could desire such oddness.)
+				 * While in the abstract one would wish for
+				 * consistent position semantics across
+				 * substr(), index() and rindex() -- or at the
+				 * very least self-consistent position
+				 * semantics for index() and rindex() -- we
+				 * instead opt to keep with the extant Perl
+				 * semantics, in all their broken glory.  (Do
+				 * we have more desire to maintain Perl's
+				 * semantics than Perl does?  Probably.)
+				 */
+				if (subr == DIF_SUBR_RINDEX) {
+					if (pos < 0) {
+						if (sublen == 0)
+							regs[rd] = 0;
+						break;
+					}
+
+					if (pos > len)
+						pos = len;
+				} else {
+					if (pos < 0)
+						pos = 0;
+
+					if (pos >= len) {
+						if (sublen == 0)
+							regs[rd] = len;
+						break;
+					}
+				}
+
+				addr = orig + pos;
+			}
+		}
+
+		for (regs[rd] = notfound; addr != limit; addr += inc) {
+			if (dtrace_strncmp(addr, substr, sublen) == 0) {
+				if (subr != DIF_SUBR_STRSTR) {
+					/*
+					 * As D index() and rindex() are
+					 * modeled on Perl (and not on awk),
+					 * we return a zero-based (and not a
+					 * one-based) index.  (For you Perl
+					 * weenies: no, we're not going to add
+					 * $[ -- and shouldn't you be at a con
+					 * or something?)
+					 */
+					regs[rd] = (uintptr_t)(addr - orig);
+					break;
+				}
+
+				ASSERT(subr == DIF_SUBR_STRSTR);
+				regs[rd] = (uintptr_t)addr;
+				break;
+			}
+		}
+
+		break;
+	}
+
+	case DIF_SUBR_STRTOK: {
+		uintptr_t addr = tupregs[0].dttk_value;
+		uintptr_t tokaddr = tupregs[1].dttk_value;
+		uint64_t size = state->dts_options[DTRACEOPT_STRSIZE];
+		uintptr_t limit, toklimit = tokaddr + size;
+		uint8_t c, tokmap[32];	 /* 256 / 8 */
+		char *dest = (char *)mstate->dtms_scratch_ptr;
+		int i;
+
+		/*
+		 * Check both the token buffer and (later) the input buffer,
+		 * since both could be non-scratch addresses.
+		 */
+		if (!dtrace_strcanload(tokaddr, size, mstate, vstate)) {
+			regs[rd] = 0;
+			break;
+		}
+
+		if (!DTRACE_INSCRATCH(mstate, size)) {
+			DTRACE_CPUFLAG_SET(CPU_DTRACE_NOSCRATCH);
+			regs[rd] = 0;
+			break;
+		}
+
+		if (addr == (uintptr_t)NULL) {
+			/*
+			 * If the address specified is NULL, we use our saved
+			 * strtok pointer from the mstate.  Note that this
+			 * means that the saved strtok pointer is _only_
+			 * valid within multiple enablings of the same probe --
+			 * it behaves like an implicit clause-local variable.
+			 */
+			addr = mstate->dtms_strtok;
+		} else {
+			/*
+			 * If the user-specified address is non-NULL we must
+			 * access check it.  This is the only time we have
+			 * a chance to do so, since this address may reside
+			 * in the string table of this clause-- future calls
+			 * (when we fetch addr from mstate->dtms_strtok)
+			 * would fail this access check.
+			 */
+			if (!dtrace_strcanload(addr, size, mstate, vstate)) {
+				regs[rd] = 0;
+				break;
+			}
+		}
+
+		/*
+		 * First, zero the token map, and then process the token
+		 * string -- setting a bit in the map for every character
+		 * found in the token string.
+		 */
+		for (i = 0; i < sizeof(tokmap); i++)
+			tokmap[i] = 0;
+
+		for (; tokaddr < toklimit; tokaddr++) {
+			if ((c = dtrace_load8(tokaddr)) == '\0')
+				break;
+
+			ASSERT((c >> 3) < sizeof(tokmap));
+			tokmap[c >> 3] |= (1 << (c & 0x7));
+		}
+
+		for (limit = addr + size; addr < limit; addr++) {
+			/*
+			 * We're looking for a character that is _not_ contained
+			 * in the token string.
+			 */
+			if ((c = dtrace_load8(addr)) == '\0')
+				break;
+
+			if (!(tokmap[c >> 3] & (1 << (c & 0x7))))
+				break;
+		}
+
+		if (c == '\0') {
+			/*
+			 * We reached the end of the string without finding
+			 * any character that was not in the token string.
+			 * We return NULL in this case, and we set the saved
+			 * address to NULL as well.
+			 */
+			regs[rd] = 0;
+			mstate->dtms_strtok = (uintptr_t)NULL;
+			break;
+		}
+
+		/*
+		 * From here on, we're copying into the destination string.
+		 */
+		for (i = 0; addr < limit && i < size - 1; addr++) {
+			if ((c = dtrace_load8(addr)) == '\0')
+				break;
+
+			if (tokmap[c >> 3] & (1 << (c & 0x7)))
+				break;
+
+			ASSERT(i < size);
+			dest[i++] = c;
+		}
+
+		ASSERT(i < size);
+		dest[i] = '\0';
+		regs[rd] = (uintptr_t)dest;
+		mstate->dtms_scratch_ptr += size;
+		mstate->dtms_strtok = addr;
+		break;
+	}
+
+	case DIF_SUBR_SUBSTR: {
+		uintptr_t s = tupregs[0].dttk_value;
+		uint64_t size = state->dts_options[DTRACEOPT_STRSIZE];
+		char *d = (char *)mstate->dtms_scratch_ptr;
+		int64_t index = (int64_t)tupregs[1].dttk_value;
+		int64_t remaining = (int64_t)tupregs[2].dttk_value;
+		size_t len = dtrace_strlen((char *)s, size);
+		int64_t i = 0;
+
+		if (!dtrace_canload(s, len + 1, mstate, vstate)) {
+			regs[rd] = 0;
+			break;
+		}
+
+		if (!DTRACE_INSCRATCH(mstate, size)) {
+			DTRACE_CPUFLAG_SET(CPU_DTRACE_NOSCRATCH);
+			regs[rd] = 0;
+			break;
+		}
+
+		if (nargs <= 2)
+			remaining = (int64_t)size;
+
+		if (index < 0) {
+			index += len;
+
+			if (index < 0 && index + remaining > 0) {
+				remaining += index;
+				index = 0;
+			}
+		}
+
+		if (index >= len || index < 0) {
+			remaining = 0;
+		} else if (remaining < 0) {
+			remaining += len - index;
+		} else if (index + remaining > size) {
+			remaining = size - index;
+		}
+
+		for (i = 0; i < remaining; i++) {
+			if ((d[i] = dtrace_load8(s + index + i)) == '\0')
+				break;
+		}
+
+		d[i] = '\0';
+
+		mstate->dtms_scratch_ptr += size;
+		regs[rd] = (uintptr_t)d;
+		break;
+	}
+
+	case DIF_SUBR_GETMAJOR:
+		regs[rd] = MAJOR(tupregs[0].dttk_value);
+		break;
+
+	case DIF_SUBR_GETMINOR:
+		regs[rd] = MINOR(tupregs[0].dttk_value);
+		break;
+
+#if 0 /* FIXME */
+	case DIF_SUBR_DDI_PATHNAME: {
+		/*
+		 * This one is a galactic mess.  We are going to roughly
+		 * emulate ddi_pathname(), but it's made more complicated
+		 * by the fact that we (a) want to include the minor name and
+		 * (b) must proceed iteratively instead of recursively.
+		 */
+		uintptr_t dest = mstate->dtms_scratch_ptr;
+		uint64_t size = state->dts_options[DTRACEOPT_STRSIZE];
+		char *start = (char *)dest, *end = start + size - 1;
+		uintptr_t daddr = tupregs[0].dttk_value;
+		int64_t minor = (int64_t)tupregs[1].dttk_value;
+		char *s;
+		int i, len, depth = 0;
+
+		/*
+		 * Due to all the pointer jumping we do and context we must
+		 * rely upon, we just mandate that the user must have kernel
+		 * read privileges to use this routine.
+		 */
+		if ((mstate->dtms_access & DTRACE_ACCESS_KERNEL) == 0) {
+			*flags |= CPU_DTRACE_KPRIV;
+			*illval = daddr;
+			regs[rd] = 0;
+		}
+
+		if (!DTRACE_INSCRATCH(mstate, size)) {
+			DTRACE_CPUFLAG_SET(CPU_DTRACE_NOSCRATCH);
+			regs[rd] = 0;
+			break;
+		}
+
+		*end = '\0';
+
+		/*
+		 * We want to have a name for the minor.  In order to do this,
+		 * we need to walk the minor list from the devinfo.  We want
+		 * to be sure that we don't infinitely walk a circular list,
+		 * so we check for circularity by sending a scout pointer
+		 * ahead two elements for every element that we iterate over;
+		 * if the list is circular, these will ultimately point to the
+		 * same element.  You may recognize this little trick as the
+		 * answer to a stupid interview question -- one that always
+		 * seems to be asked by those who had to have it laboriously
+		 * explained to them, and who can't even concisely describe
+		 * the conditions under which one would be forced to resort to
+		 * this technique.  Needless to say, those conditions are
+		 * found here -- and probably only here.  Is this the only use
+		 * of this infamous trick in shipping, production code?  If it
+		 * isn't, it probably should be...
+		 */
+		if (minor != -1) {
+			uintptr_t maddr = dtrace_loadptr(daddr +
+			    offsetof(struct dev_info, devi_minor));
+
+			uintptr_t next = offsetof(struct ddi_minor_data, next);
+			uintptr_t name = offsetof(struct ddi_minor_data,
+			    d_minor) + offsetof(struct ddi_minor, name);
+			uintptr_t dev = offsetof(struct ddi_minor_data,
+			    d_minor) + offsetof(struct ddi_minor, dev);
+			uintptr_t scout;
+
+			if (maddr != NULL)
+				scout = dtrace_loadptr(maddr + next);
+
+			while (maddr != NULL && !(*flags & CPU_DTRACE_FAULT)) {
+				uint64_t m;
+#ifdef _LP64
+				m = dtrace_load64(maddr + dev) & MAXMIN64;
+#else
+				m = dtrace_load32(maddr + dev) & MAXMIN;
+#endif
+				if (m != minor) {
+					maddr = dtrace_loadptr(maddr + next);
+
+					if (scout == NULL)
+						continue;
+
+					scout = dtrace_loadptr(scout + next);
+
+					if (scout == NULL)
+						continue;
+
+					scout = dtrace_loadptr(scout + next);
+
+					if (scout == NULL)
+						continue;
+
+					if (scout == maddr) {
+						*flags |= CPU_DTRACE_ILLOP;
+						break;
+					}
+
+					continue;
+				}
+
+				/*
+				 * We have the minor data.  Now we need to
+				 * copy the minor's name into the end of the
+				 * pathname.
+				 */
+				s = (char *)dtrace_loadptr(maddr + name);
+				len = dtrace_strlen(s, size);
+
+				if (*flags & CPU_DTRACE_FAULT)
+					break;
+
+				if (len != 0) {
+					if ((end -= (len + 1)) < start)
+						break;
+
+					*end = ':';
+				}
+
+				for (i = 1; i <= len; i++)
+					end[i] = dtrace_load8((uintptr_t)s++);
+				break;
+			}
+		}
+
+		while (daddr != NULL && !(*flags & CPU_DTRACE_FAULT)) {
+			ddi_node_state_t devi_state;
+
+			devi_state = dtrace_load32(daddr +
+			    offsetof(struct dev_info, devi_node_state));
+
+			if (*flags & CPU_DTRACE_FAULT)
+				break;
+
+			if (devi_state >= DS_INITIALIZED) {
+				s = (char *)dtrace_loadptr(daddr +
+				    offsetof(struct dev_info, devi_addr));
+				len = dtrace_strlen(s, size);
+
+				if (*flags & CPU_DTRACE_FAULT)
+					break;
+
+				if (len != 0) {
+					if ((end -= (len + 1)) < start)
+						break;
+
+					*end = '@';
+				}
+
+				for (i = 1; i <= len; i++)
+					end[i] = dtrace_load8((uintptr_t)s++);
+			}
+
+			/*
+			 * Now for the node name...
+			 */
+			s = (char *)dtrace_loadptr(daddr +
+			    offsetof(struct dev_info, devi_node_name));
+
+			daddr = dtrace_loadptr(daddr +
+			    offsetof(struct dev_info, devi_parent));
+
+			/*
+			 * If our parent is NULL (that is, if we're the root
+			 * node), we're going to use the special path
+			 * "devices".
+			 */
+			if (daddr == NULL)
+				s = "devices";
+
+			len = dtrace_strlen(s, size);
+			if (*flags & CPU_DTRACE_FAULT)
+				break;
+
+			if ((end -= (len + 1)) < start)
+				break;
+
+			for (i = 1; i <= len; i++)
+				end[i] = dtrace_load8((uintptr_t)s++);
+			*end = '/';
+
+			if (depth++ > dtrace_devdepth_max) {
+				*flags |= CPU_DTRACE_ILLOP;
+				break;
+			}
+		}
+
+		if (end < start)
+			DTRACE_CPUFLAG_SET(CPU_DTRACE_NOSCRATCH);
+
+		if (daddr == NULL) {
+			regs[rd] = (uintptr_t)end;
+			mstate->dtms_scratch_ptr += size;
+		}
+
+		break;
+	}
+#endif
+
+	case DIF_SUBR_STRJOIN: {
+		char *d = (char *)mstate->dtms_scratch_ptr;
+		uint64_t size = state->dts_options[DTRACEOPT_STRSIZE];
+		uintptr_t s1 = tupregs[0].dttk_value;
+		uintptr_t s2 = tupregs[1].dttk_value;
+		int i = 0;
+
+		if (!dtrace_strcanload(s1, size, mstate, vstate) ||
+		    !dtrace_strcanload(s2, size, mstate, vstate)) {
+			regs[rd] = 0;
+			break;
+		}
+
+		if (!DTRACE_INSCRATCH(mstate, size)) {
+			DTRACE_CPUFLAG_SET(CPU_DTRACE_NOSCRATCH);
+			regs[rd] = 0;
+			break;
+		}
+
+		for (;;) {
+			if (i >= size) {
+				DTRACE_CPUFLAG_SET(CPU_DTRACE_NOSCRATCH);
+				regs[rd] = 0;
+				break;
+			}
+
+			if ((d[i++] = dtrace_load8(s1++)) == '\0') {
+				i--;
+				break;
+			}
+		}
+
+		for (;;) {
+			if (i >= size) {
+				DTRACE_CPUFLAG_SET(CPU_DTRACE_NOSCRATCH);
+				regs[rd] = 0;
+				break;
+			}
+
+			if ((d[i++] = dtrace_load8(s2++)) == '\0')
+				break;
+		}
+
+		if (i < size) {
+			mstate->dtms_scratch_ptr += i;
+			regs[rd] = (uintptr_t)d;
+		}
+
+		break;
+	}
+
+	case DIF_SUBR_LLTOSTR: {
+		int64_t i = (int64_t)tupregs[0].dttk_value;
+		int64_t val = i < 0 ? i * -1 : i;
+		uint64_t size = 22;	/* enough room for 2^64 in decimal */
+		char *end = (char *)mstate->dtms_scratch_ptr + size - 1;
+
+		if (!DTRACE_INSCRATCH(mstate, size)) {
+			DTRACE_CPUFLAG_SET(CPU_DTRACE_NOSCRATCH);
+			regs[rd] = 0;
+			break;
+		}
+
+		for (*end-- = '\0'; val; val /= 10)
+			*end-- = '0' + (val % 10);
+
+		if (i == 0)
+			*end-- = '0';
+
+		if (i < 0)
+			*end-- = '-';
+
+		regs[rd] = (uintptr_t)end + 1;
+		mstate->dtms_scratch_ptr += size;
+		break;
+	}
+
+	case DIF_SUBR_HTONS:
+	case DIF_SUBR_NTOHS:
+#ifdef _BIG_ENDIAN
+		regs[rd] = (uint16_t)tupregs[0].dttk_value;
+#else
+		regs[rd] = DT_BSWAP_16((uint16_t)tupregs[0].dttk_value);
+#endif
+		break;
+
+
+	case DIF_SUBR_HTONL:
+	case DIF_SUBR_NTOHL:
+#ifdef _BIG_ENDIAN
+		regs[rd] = (uint32_t)tupregs[0].dttk_value;
+#else
+		regs[rd] = DT_BSWAP_32((uint32_t)tupregs[0].dttk_value);
+#endif
+		break;
+
+
+	case DIF_SUBR_HTONLL:
+	case DIF_SUBR_NTOHLL:
+#ifdef _BIG_ENDIAN
+		regs[rd] = (uint64_t)tupregs[0].dttk_value;
+#else
+		regs[rd] = DT_BSWAP_64((uint64_t)tupregs[0].dttk_value);
+#endif
+		break;
+
+
+	case DIF_SUBR_DIRNAME:
+	case DIF_SUBR_BASENAME: {
+		char *dest = (char *)mstate->dtms_scratch_ptr;
+		uint64_t size = state->dts_options[DTRACEOPT_STRSIZE];
+		uintptr_t src = tupregs[0].dttk_value;
+		int i, j, len = dtrace_strlen((char *)src, size);
+		int lastbase = -1, firstbase = -1, lastdir = -1;
+		int start, end;
+
+		if (!dtrace_canload(src, len + 1, mstate, vstate)) {
+			regs[rd] = 0;
+			break;
+		}
+
+		if (!DTRACE_INSCRATCH(mstate, size)) {
+			DTRACE_CPUFLAG_SET(CPU_DTRACE_NOSCRATCH);
+			regs[rd] = 0;
+			break;
+		}
+
+		/*
+		 * The basename and dirname for a zero-length string is
+		 * defined to be "."
+		 */
+		if (len == 0) {
+			len = 1;
+			src = (uintptr_t)".";
+		}
+
+		/*
+		 * Start from the back of the string, moving back toward the
+		 * front until we see a character that isn't a slash.  That
+		 * character is the last character in the basename.
+		 */
+		for (i = len - 1; i >= 0; i--) {
+			if (dtrace_load8(src + i) != '/')
+				break;
+		}
+
+		if (i >= 0)
+			lastbase = i;
+
+		/*
+		 * Starting from the last character in the basename, move
+		 * towards the front until we find a slash.  The character
+		 * that we processed immediately before that is the first
+		 * character in the basename.
+		 */
+		for (; i >= 0; i--) {
+			if (dtrace_load8(src + i) == '/')
+				break;
+		}
+
+		if (i >= 0)
+			firstbase = i + 1;
+
+		/*
+		 * Now keep going until we find a non-slash character.  That
+		 * character is the last character in the dirname.
+		 */
+		for (; i >= 0; i--) {
+			if (dtrace_load8(src + i) != '/')
+				break;
+		}
+
+		if (i >= 0)
+			lastdir = i;
+
+		ASSERT(!(lastbase == -1 && firstbase != -1));
+		ASSERT(!(firstbase == -1 && lastdir != -1));
+
+		if (lastbase == -1) {
+			/*
+			 * We didn't find a non-slash character.  We know that
+			 * the length is non-zero, so the whole string must be
+			 * slashes.  In either the dirname or the basename
+			 * case, we return '/'.
+			 */
+			ASSERT(firstbase == -1);
+			firstbase = lastbase = lastdir = 0;
+		}
+
+		if (firstbase == -1) {
+			/*
+			 * The entire string consists only of a basename
+			 * component.  If we're looking for dirname, we need
+			 * to change our string to be just "."; if we're
+			 * looking for a basename, we'll just set the first
+			 * character of the basename to be 0.
+			 */
+			if (subr == DIF_SUBR_DIRNAME) {
+				ASSERT(lastdir == -1);
+				src = (uintptr_t)".";
+				lastdir = 0;
+			} else {
+				firstbase = 0;
+			}
+		}
+
+		if (subr == DIF_SUBR_DIRNAME) {
+			if (lastdir == -1) {
+				/*
+				 * We know that we have a slash in the name --
+				 * or lastdir would be set to 0, above.  And
+				 * because lastdir is -1, we know that this
+				 * slash must be the first character.  (That
+				 * is, the full string must be of the form
+				 * "/basename".)  In this case, the last
+				 * character of the directory name is 0.
+				 */
+				lastdir = 0;
+			}
+
+			start = 0;
+			end = lastdir;
+		} else {
+			ASSERT(subr == DIF_SUBR_BASENAME);
+			ASSERT(firstbase != -1 && lastbase != -1);
+			start = firstbase;
+			end = lastbase;
+		}
+
+		for (i = start, j = 0; i <= end && j < size - 1; i++, j++)
+			dest[j] = dtrace_load8(src + i);
+
+		dest[j] = '\0';
+		regs[rd] = (uintptr_t)dest;
+		mstate->dtms_scratch_ptr += size;
+		break;
+	}
+
+	case DIF_SUBR_CLEANPATH: {
+		char *dest = (char *)mstate->dtms_scratch_ptr, c;
+		uint64_t size = state->dts_options[DTRACEOPT_STRSIZE];
+		uintptr_t src = tupregs[0].dttk_value;
+		int i = 0, j = 0;
+
+		if (!dtrace_strcanload(src, size, mstate, vstate)) {
+			regs[rd] = 0;
+			break;
+		}
+
+		if (!DTRACE_INSCRATCH(mstate, size)) {
+			DTRACE_CPUFLAG_SET(CPU_DTRACE_NOSCRATCH);
+			regs[rd] = 0;
+			break;
+		}
+
+		/*
+		 * Move forward, loading each character.
+		 */
+		do {
+			c = dtrace_load8(src + i++);
+next:
+			if (j + 5 >= size)	/* 5 = strlen("/..c\0") */
+				break;
+
+			if (c != '/') {
+				dest[j++] = c;
+				continue;
+			}
+
+			c = dtrace_load8(src + i++);
+
+			if (c == '/') {
+				/*
+				 * We have two slashes -- we can just advance
+				 * to the next character.
+				 */
+				goto next;
+			}
+
+			if (c != '.') {
+				/*
+				 * This is not "." and it's not ".." -- we can
+				 * just store the "/" and this character and
+				 * drive on.
+				 */
+				dest[j++] = '/';
+				dest[j++] = c;
+				continue;
+			}
+
+			c = dtrace_load8(src + i++);
+
+			if (c == '/') {
+				/*
+				 * This is a "/./" component.  We're not going
+				 * to store anything in the destination buffer;
+				 * we're just going to go to the next component.
+				 */
+				goto next;
+			}
+
+			if (c != '.') {
+				/*
+				 * This is not ".." -- we can just store the
+				 * "/." and this character and continue
+				 * processing.
+				 */
+				dest[j++] = '/';
+				dest[j++] = '.';
+				dest[j++] = c;
+				continue;
+			}
+
+			c = dtrace_load8(src + i++);
+
+			if (c != '/' && c != '\0') {
+				/*
+				 * This is not ".." -- it's "..[mumble]".
+				 * We'll store the "/.." and this character
+				 * and continue processing.
+				 */
+				dest[j++] = '/';
+				dest[j++] = '.';
+				dest[j++] = '.';
+				dest[j++] = c;
+				continue;
+			}
+
+			/*
+			 * This is "/../" or "/..\0".  We need to back up
+			 * our destination pointer until we find a "/".
+			 */
+			i--;
+			while (j != 0 && dest[--j] != '/')
+				continue;
+
+			if (c == '\0')
+				dest[++j] = '/';
+		} while (c != '\0');
+
+		dest[j] = '\0';
+		regs[rd] = (uintptr_t)dest;
+		mstate->dtms_scratch_ptr += size;
+		break;
+	}
+
+	case DIF_SUBR_INET_NTOA:
+	case DIF_SUBR_INET_NTOA6:
+	case DIF_SUBR_INET_NTOP: {
+		size_t size;
+		int af, argi, i;
+		char *base, *end;
+
+		if (subr == DIF_SUBR_INET_NTOP) {
+			af = (int)tupregs[0].dttk_value;
+			argi = 1;
+		} else {
+			af = subr == DIF_SUBR_INET_NTOA ? AF_INET: AF_INET6;
+			argi = 0;
+		}
+
+		if (af == AF_INET) {
+			ipaddr_t ip4;
+			uint8_t *ptr8, val;
+
+			/*
+			 * Safely load the IPv4 address.
+			 */
+			ip4 = dtrace_load32(tupregs[argi].dttk_value);
+
+			/*
+			 * Check an IPv4 string will fit in scratch.
+			 */
+			size = INET_ADDRSTRLEN;
+			if (!DTRACE_INSCRATCH(mstate, size)) {
+				DTRACE_CPUFLAG_SET(CPU_DTRACE_NOSCRATCH);
+				regs[rd] = 0;
+				break;
+			}
+			base = (char *)mstate->dtms_scratch_ptr;
+			end = (char *)mstate->dtms_scratch_ptr + size - 1;
+
+			/*
+			 * Stringify as a dotted decimal quad.
+			 */
+			*end-- = '\0';
+			ptr8 = (uint8_t *)&ip4;
+			for (i = 3; i >= 0; i--) {
+				val = ptr8[i];
+
+				if (val == 0) {
+					*end-- = '0';
+				} else {
+					for (; val; val /= 10) {
+						*end-- = '0' + (val % 10);
+					}
+				}
+
+				if (i > 0)
+					*end-- = '.';
+			}
+			ASSERT(end + 1 >= base);
+
+		} else if (af == AF_INET6) {
+			struct in6_addr ip6;
+			int firstzero, tryzero, numzero, v6end;
+			uint16_t val;
+			const char digits[] = "0123456789abcdef";
+
+			/*
+			 * Stringify using RFC 1884 convention 2 - 16 bit
+			 * hexadecimal values with a zero-run compression.
+			 * Lower case hexadecimal digits are used.
+			 * 	eg, fe80::214:4fff:fe0b:76c8.
+			 * The IPv4 embedded form is returned for inet_ntop,
+			 * just the IPv4 string is returned for inet_ntoa6.
+			 */
+
+			/*
+			 * Safely load the IPv6 address.
+			 */
+			dtrace_bcopy(
+			    (void *)(uintptr_t)tupregs[argi].dttk_value,
+			    (void *)(uintptr_t)&ip6, sizeof(struct in6_addr));
+
+			/*
+			 * Check an IPv6 string will fit in scratch.
+			 */
+			size = INET6_ADDRSTRLEN;
+			if (!DTRACE_INSCRATCH(mstate, size)) {
+				DTRACE_CPUFLAG_SET(CPU_DTRACE_NOSCRATCH);
+				regs[rd] = 0;
+				break;
+			}
+			base = (char *)mstate->dtms_scratch_ptr;
+			end = (char *)mstate->dtms_scratch_ptr + size - 1;
+			*end-- = '\0';
+
+			/*
+			 * Find the longest run of 16 bit zero values
+			 * for the single allowed zero compression - "::".
+			 */
+			firstzero = -1;
+			tryzero = -1;
+			numzero = 1;
+			for (i = 0; i < sizeof(struct in6_addr); i++) {
+				if (ip6.s6_addr[i] == 0 &&
+				    tryzero == -1 && i % 2 == 0) {
+					tryzero = i;
+					continue;
+				}
+
+				if (tryzero != -1 &&
+				    (ip6.s6_addr[i] != 0 ||
+				    i == sizeof(struct in6_addr) - 1)) {
+
+					if (i - tryzero <= numzero) {
+						tryzero = -1;
+						continue;
+					}
+
+					firstzero = tryzero;
+					numzero = i - i % 2 - tryzero;
+					tryzero = -1;
+
+					if (ip6.s6_addr[i] == 0 &&
+					    i == sizeof(struct in6_addr) - 1)
+						numzero += 2;
+				}
+			}
+			ASSERT(firstzero + numzero <= sizeof(struct in6_addr));
+
+			/*
+			 * Check for an IPv4 embedded address.
+			 */
+			v6end = sizeof(struct in6_addr) - 2;
+			if (ipv6_addr_type(&ip6) |
+			    (IPV6_ADDR_COMPATv4 | IPV6_ADDR_MAPPED)) {
+				for (i = sizeof(struct in6_addr) - 1;
+				    i >= DTRACE_V4MAPPED_OFFSET; i--) {
+					ASSERT(end >= base);
+
+					val = ip6.s6_addr[i];
+
+					if (val == 0) {
+						*end-- = '0';
+					} else {
+						for (; val; val /= 10) {
+							*end-- = '0' + val % 10;
+						}
+					}
+
+					if (i > DTRACE_V4MAPPED_OFFSET)
+						*end-- = '.';
+				}
+
+				if (subr == DIF_SUBR_INET_NTOA6)
+					goto inetout;
+
+				/*
+				 * Set v6end to skip the IPv4 address that
+				 * we have already stringified.
+				 */
+				v6end = 10;
+			}
+
+			/*
+			 * Build the IPv6 string by working through the
+			 * address in reverse.
+			 */
+			for (i = v6end; i >= 0; i -= 2) {
+				ASSERT(end >= base);
+
+				if (i == firstzero + numzero - 2) {
+					*end-- = ':';
+					*end-- = ':';
+					i -= numzero - 2;
+					continue;
+				}
+
+				if (i < 14 && i != firstzero - 2)
+					*end-- = ':';
+
+				val = (ip6.s6_addr[i] << 8) +
+				    ip6.s6_addr[i + 1];
+
+				if (val == 0) {
+					*end-- = '0';
+				} else {
+					for (; val; val /= 16) {
+						*end-- = digits[val % 16];
+					}
+				}
+			}
+			ASSERT(end + 1 >= base);
+
+		} else {
+			/*
+			 * The user didn't use AH_INET or AH_INET6.
+			 */
+			DTRACE_CPUFLAG_SET(CPU_DTRACE_ILLOP);
+			regs[rd] = 0;
+			break;
+		}
+
+inetout:	regs[rd] = (uintptr_t)end + 1;
+		mstate->dtms_scratch_ptr += size;
+		break;
+	}
+
+	}
+}
+
+/*
+ * Emulate the execution of DTrace IR instructions specified by the given DIF
+ * object.  This function is deliberately void fo assertions as all of the
+ * necessary checks are handled by a call to dtrace_difo_validate().
+ */
+uint64_t dtrace_dif_emulate(dtrace_difo_t *difo, dtrace_mstate_t *mstate,
+			    dtrace_vstate_t *vstate, dtrace_state_t *state)
+{
+	const dif_instr_t	*text = difo->dtdo_buf;
+	const uint_t		textlen = difo->dtdo_len;
+	const char		*strtab = difo->dtdo_strtab;
+	const uint64_t		*inttab = difo->dtdo_inttab;
+
+	int			cpu = smp_processor_id();
+	uint64_t		rval = 0;
+	dtrace_statvar_t	*svar;
+	dtrace_dstate_t		*dstate = &vstate->dtvs_dynvars;
+	dtrace_difv_t		*v;
+	volatile uint16_t	*flags = &cpu_core[cpu].cpuc_dtrace_flags;
+	volatile uintptr_t	*illval = &cpu_core[cpu].cpuc_dtrace_illval;
+
+	dtrace_key_t		tupregs[DIF_DTR_NREGS + 2];
+						/* +2 for thread and id */
+	uint64_t		regs[DIF_DIR_NREGS];
+	uint64_t		*tmp;
+
+	uint8_t			cc_n = 0, cc_z = 0, cc_v = 0, cc_c = 0;
+	int64_t			cc_r;
+	uint_t			pc = 0, id, opc = 0;
+	uint8_t			ttop = 0;
+	dif_instr_t		instr;
+	uint_t			r1, r2, rd;
+
+	/*
+	 * We stash the current DIF object into the machine state: we need it
+	 * for subsequent access checking.
+	 */
+	mstate->dtms_difo = difo;
+
+	regs[DIF_REG_R0] = 0;			/* %r0 is fixed at zero */
+
+	while (pc < textlen && !(*flags & CPU_DTRACE_FAULT)) {
+		opc = pc;
+
+		instr = text[pc++];
+		r1 = DIF_INSTR_R1(instr);
+		r2 = DIF_INSTR_R2(instr);
+		rd = DIF_INSTR_RD(instr);
+
+		switch (DIF_INSTR_OP(instr)) {
+		case DIF_OP_OR:
+			regs[rd] = regs[r1] | regs[r2];
+			break;
+		case DIF_OP_XOR:
+			regs[rd] = regs[r1] ^ regs[r2];
+			break;
+		case DIF_OP_AND:
+			regs[rd] = regs[r1] & regs[r2];
+			break;
+		case DIF_OP_SLL:
+			regs[rd] = regs[r1] << regs[r2];
+			break;
+		case DIF_OP_SRL:
+			regs[rd] = regs[r1] >> regs[r2];
+			break;
+		case DIF_OP_SUB:
+			regs[rd] = regs[r1] - regs[r2];
+			break;
+		case DIF_OP_ADD:
+			regs[rd] = regs[r1] + regs[r2];
+			break;
+		case DIF_OP_MUL:
+			regs[rd] = regs[r1] * regs[r2];
+			break;
+		case DIF_OP_SDIV:
+			if (regs[r2] == 0) {
+				regs[rd] = 0;
+				*flags |= CPU_DTRACE_DIVZERO;
+			} else {
+				regs[rd] = (int64_t)regs[r1] /
+					   (int64_t)regs[r2];
+			}
+			break;
+
+		case DIF_OP_UDIV:
+			if (regs[r2] == 0) {
+				regs[rd] = 0;
+				*flags |= CPU_DTRACE_DIVZERO;
+			} else {
+				regs[rd] = regs[r1] / regs[r2];
+			}
+			break;
+
+		case DIF_OP_SREM:
+			if (regs[r2] == 0) {
+				regs[rd] = 0;
+				*flags |= CPU_DTRACE_DIVZERO;
+			} else {
+				regs[rd] = (int64_t)regs[r1] %
+					   (int64_t)regs[r2];
+			}
+			break;
+
+		case DIF_OP_UREM:
+			if (regs[r2] == 0) {
+				regs[rd] = 0;
+				*flags |= CPU_DTRACE_DIVZERO;
+			} else
+				regs[rd] = regs[r1] % regs[r2];
+			break;
+
+		case DIF_OP_NOT:
+			regs[rd] = ~regs[r1];
+			break;
+		case DIF_OP_MOV:
+			regs[rd] = regs[r1];
+			break;
+		case DIF_OP_CMP:
+			cc_r = regs[r1] - regs[r2];
+			cc_n = cc_r < 0;
+			cc_z = cc_r == 0;
+			cc_v = 0;
+			cc_c = regs[r1] < regs[r2];
+			break;
+		case DIF_OP_TST:
+			cc_n = cc_v = cc_c = 0;
+			cc_z = regs[r1] == 0;
+			break;
+		case DIF_OP_BA:
+			pc = DIF_INSTR_LABEL(instr);
+			break;
+		case DIF_OP_BE:
+			if (cc_z)
+				pc = DIF_INSTR_LABEL(instr);
+			break;
+		case DIF_OP_BNE:
+			if (cc_z == 0)
+				pc = DIF_INSTR_LABEL(instr);
+			break;
+		case DIF_OP_BG:
+			if ((cc_z | (cc_n ^ cc_v)) == 0)
+				pc = DIF_INSTR_LABEL(instr);
+			break;
+		case DIF_OP_BGU:
+			if ((cc_c | cc_z) == 0)
+				pc = DIF_INSTR_LABEL(instr);
+			break;
+		case DIF_OP_BGE:
+			if ((cc_n ^ cc_v) == 0)
+				pc = DIF_INSTR_LABEL(instr);
+			break;
+		case DIF_OP_BGEU:
+			if (cc_c == 0)
+				pc = DIF_INSTR_LABEL(instr);
+			break;
+		case DIF_OP_BL:
+			if (cc_n ^ cc_v)
+				pc = DIF_INSTR_LABEL(instr);
+			break;
+		case DIF_OP_BLU:
+			if (cc_c)
+				pc = DIF_INSTR_LABEL(instr);
+			break;
+		case DIF_OP_BLE:
+			if (cc_z | (cc_n ^ cc_v))
+				pc = DIF_INSTR_LABEL(instr);
+			break;
+		case DIF_OP_BLEU:
+			if (cc_c | cc_z)
+				pc = DIF_INSTR_LABEL(instr);
+			break;
+		case DIF_OP_RLDSB:
+			if (!dtrace_canstore(regs[r1], 1, mstate, vstate)) {
+				*flags |= CPU_DTRACE_KPRIV;
+				*illval = regs[r1];
+				break;
+			}
+			/*FALLTHROUGH*/
+		case DIF_OP_LDSB:
+			regs[rd] = (int8_t)dtrace_load8(regs[r1]);
+			break;
+		case DIF_OP_RLDSH:
+			if (!dtrace_canstore(regs[r1], 2, mstate, vstate)) {
+				*flags |= CPU_DTRACE_KPRIV;
+				*illval = regs[r1];
+				break;
+			}
+			/*FALLTHROUGH*/
+		case DIF_OP_LDSH:
+			regs[rd] = (int16_t)dtrace_load16(regs[r1]);
+			break;
+		case DIF_OP_RLDSW:
+			if (!dtrace_canstore(regs[r1], 4, mstate, vstate)) {
+				*flags |= CPU_DTRACE_KPRIV;
+				*illval = regs[r1];
+				break;
+			}
+			/*FALLTHROUGH*/
+		case DIF_OP_LDSW:
+			regs[rd] = (int32_t)dtrace_load32(regs[r1]);
+			break;
+		case DIF_OP_RLDUB:
+			if (!dtrace_canstore(regs[r1], 1, mstate, vstate)) {
+				*flags |= CPU_DTRACE_KPRIV;
+				*illval = regs[r1];
+				break;
+			}
+			/*FALLTHROUGH*/
+		case DIF_OP_LDUB:
+			regs[rd] = dtrace_load8(regs[r1]);
+			break;
+		case DIF_OP_RLDUH:
+			if (!dtrace_canstore(regs[r1], 2, mstate, vstate)) {
+				*flags |= CPU_DTRACE_KPRIV;
+				*illval = regs[r1];
+				break;
+			}
+			/*FALLTHROUGH*/
+		case DIF_OP_LDUH:
+			regs[rd] = dtrace_load16(regs[r1]);
+			break;
+		case DIF_OP_RLDUW:
+			if (!dtrace_canstore(regs[r1], 4, mstate, vstate)) {
+				*flags |= CPU_DTRACE_KPRIV;
+				*illval = regs[r1];
+				break;
+			}
+			/*FALLTHROUGH*/
+		case DIF_OP_LDUW:
+			regs[rd] = dtrace_load32(regs[r1]);
+			break;
+		case DIF_OP_RLDX:
+			if (!dtrace_canstore(regs[r1], 8, mstate, vstate)) {
+				*flags |= CPU_DTRACE_KPRIV;
+				*illval = regs[r1];
+				break;
+			}
+			/*FALLTHROUGH*/
+		case DIF_OP_LDX:
+			regs[rd] = dtrace_load64(regs[r1]);
+			break;
+		case DIF_OP_ULDSB:
+			regs[rd] = (int8_t)dtrace_fuword8(
+						(void *)(uintptr_t)regs[r1]);
+			break;
+		case DIF_OP_ULDSH:
+			regs[rd] = (int16_t)dtrace_fuword16(
+						(void *)(uintptr_t)regs[r1]);
+			break;
+		case DIF_OP_ULDSW:
+			regs[rd] = (int32_t)dtrace_fuword32(
+						(void *)(uintptr_t)regs[r1]);
+			break;
+		case DIF_OP_ULDUB:
+			regs[rd] = dtrace_fuword8((void *)(uintptr_t)regs[r1]);
+			break;
+		case DIF_OP_ULDUH:
+			regs[rd] = dtrace_fuword16(
+						(void *)(uintptr_t)regs[r1]);
+			break;
+		case DIF_OP_ULDUW:
+			regs[rd] = dtrace_fuword32(
+						(void *)(uintptr_t)regs[r1]);
+			break;
+		case DIF_OP_ULDX:
+			regs[rd] = dtrace_fuword64(
+						(void *)(uintptr_t)regs[r1]);
+			break;
+		case DIF_OP_RET:
+			rval = regs[rd];
+			pc = textlen;
+			break;
+		case DIF_OP_NOP:
+			break;
+		case DIF_OP_SETX:
+			regs[rd] = inttab[DIF_INSTR_INTEGER(instr)];
+			break;
+		case DIF_OP_SETS:
+			regs[rd] = (uint64_t)(uintptr_t)
+					(strtab + DIF_INSTR_STRING(instr));
+			break;
+		case DIF_OP_SCMP: {
+			size_t		sz = state->dts_options[
+							DTRACEOPT_STRSIZE];
+			uintptr_t	s1 = regs[r1];
+			uintptr_t	s2 = regs[r2];
+
+			if (s1 != (uintptr_t)NULL &&
+			    !dtrace_strcanload(s1, sz, mstate, vstate))
+				break;
+			if (s2 != (uintptr_t)NULL &&
+			    !dtrace_strcanload(s2, sz, mstate, vstate))
+				break;
+
+			cc_r = dtrace_strncmp((char *)s1, (char *)s2, sz);
+
+			cc_n = cc_r < 0;
+			cc_z = cc_r == 0;
+			cc_v = cc_c = 0;
+			break;
+		}
+		case DIF_OP_LDGA:
+		    regs[rd] = dtrace_dif_variable(mstate, state, r1,
+						   regs[r2]);
+			break;
+		case DIF_OP_LDGS:
+			id = DIF_INSTR_VAR(instr);
+
+			if (id >= DIF_VAR_OTHER_UBASE) {
+				uintptr_t	a;
+
+				id -= DIF_VAR_OTHER_UBASE;
+				svar = vstate->dtvs_globals[id];
+				ASSERT(svar != NULL);
+				v = &svar->dtsv_var;
+
+				if (!(v->dtdv_type.dtdt_flags & DIF_TF_BYREF)) {
+					regs[rd] = svar->dtsv_data;
+					break;
+				}
+
+				a = (uintptr_t)svar->dtsv_data;
+
+				/*
+				 * If the 0th byte is set to UINT8_MAX then
+				 * this is to be treated as a reference to a
+				 * NULL variable.
+				 */
+				if (*(uint8_t *)a == UINT8_MAX)
+					regs[rd] = 0;
+				else
+					regs[rd] = a + sizeof(uint64_t);
+
+				break;
+			}
+
+			regs[rd] = dtrace_dif_variable(mstate, state, id, 0);
+			break;
+
+		case DIF_OP_STGS:
+			id = DIF_INSTR_VAR(instr);
+
+			ASSERT(id >= DIF_VAR_OTHER_UBASE);
+			id -= DIF_VAR_OTHER_UBASE;
+
+			svar = vstate->dtvs_globals[id];
+			ASSERT(svar != NULL);
+			v = &svar->dtsv_var;
+
+			if (v->dtdv_type.dtdt_flags & DIF_TF_BYREF) {
+				uintptr_t	a = (uintptr_t)svar->dtsv_data;
+
+				ASSERT(a != NULL);
+				ASSERT(svar->dtsv_size != 0);
+
+				if (regs[rd] == 0) {
+					*(uint8_t *)a = UINT8_MAX;
+					break;
+				} else {
+					*(uint8_t *)a = 0;
+					a += sizeof(uint64_t);
+				}
+
+				if (!dtrace_vcanload(
+					(void *)(uintptr_t)regs[rd],
+					&v->dtdv_type, mstate, vstate))
+					break;
+
+				dtrace_vcopy((void *)(uintptr_t)regs[rd],
+					     (void *)a, &v->dtdv_type);
+				break;
+			}
+
+			svar->dtsv_data = regs[rd];
+			break;
+
+		case DIF_OP_LDTA:
+			/*
+			 * There are no DTrace built-in thread-local arrays at
+			 * present.  This opcode is saved for future work.
+			 */
+			*flags |= CPU_DTRACE_ILLOP;
+			regs[rd] = 0;
+			break;
+
+		case DIF_OP_LDLS:
+			id = DIF_INSTR_VAR(instr);
+
+			if (id < DIF_VAR_OTHER_UBASE) {
+				/*
+				 * For now, this has no meaning.
+				 */
+				regs[rd] = 0;
+				break;
+			}
+
+			id -= DIF_VAR_OTHER_UBASE;
+
+			ASSERT(id < vstate->dtvs_nlocals);
+			ASSERT(vstate->dtvs_locals != NULL);
+
+			svar = vstate->dtvs_locals[id];
+			ASSERT(svar != NULL);
+			v = &svar->dtsv_var;
+
+			if (v->dtdv_type.dtdt_flags & DIF_TF_BYREF) {
+				uintptr_t	a = (uintptr_t)svar->dtsv_data;
+				size_t		sz = v->dtdv_type.dtdt_size;
+
+				sz += sizeof(uint64_t);
+				ASSERT(svar->dtsv_size == NR_CPUS * sz);
+				a += smp_processor_id() * sz;
+
+				if (*(uint8_t *)a == UINT8_MAX) {
+					/*
+					 * If the 0th byte is set to UINT8_MAX
+					 * then this is to be treated as a
+					 * reference to a NULL variable.
+					 */
+					regs[rd] = 0;
+				} else
+					regs[rd] = a + sizeof(uint64_t);
+
+				break;
+			}
+
+			ASSERT(svar->dtsv_size == NR_CPUS * sizeof(uint64_t));
+			tmp = (uint64_t *)(uintptr_t)svar->dtsv_data;
+			regs[rd] = tmp[smp_processor_id()];
+			break;
+
+		case DIF_OP_STLS:
+			id = DIF_INSTR_VAR(instr);
+
+			ASSERT(id >= DIF_VAR_OTHER_UBASE);
+			id -= DIF_VAR_OTHER_UBASE;
+			ASSERT(id < vstate->dtvs_nlocals);
+
+			ASSERT(vstate->dtvs_locals != NULL);
+			svar = vstate->dtvs_locals[id];
+			ASSERT(svar != NULL);
+			v = &svar->dtsv_var;
+
+			if (v->dtdv_type.dtdt_flags & DIF_TF_BYREF) {
+				uintptr_t	a = (uintptr_t)svar->dtsv_data;
+				size_t		sz = v->dtdv_type.dtdt_size;
+
+				sz += sizeof(uint64_t);
+				ASSERT(svar->dtsv_size == NR_CPUS * sz);
+				a += smp_processor_id() * sz;
+
+				if (regs[rd] == 0) {
+					*(uint8_t *)a = UINT8_MAX;
+					break;
+				} else {
+					*(uint8_t *)a = 0;
+					a += sizeof(uint64_t);
+				}
+
+				if (!dtrace_vcanload(
+						(void *)(uintptr_t)regs[rd],
+						&v->dtdv_type, mstate, vstate))
+					break;
+
+				dtrace_vcopy((void *)(uintptr_t)regs[rd],
+					     (void *)a, &v->dtdv_type);
+				break;
+			}
+
+			ASSERT(svar->dtsv_size == NR_CPUS * sizeof(uint64_t));
+			tmp = (uint64_t *)(uintptr_t)svar->dtsv_data;
+			tmp[smp_processor_id()] = regs[rd];
+			break;
+
+		case DIF_OP_LDTS: {
+			dtrace_dynvar_t	*dvar;
+			dtrace_key_t	*key;
+
+			id = DIF_INSTR_VAR(instr);
+			ASSERT(id >= DIF_VAR_OTHER_UBASE);
+			id -= DIF_VAR_OTHER_UBASE;
+			v = &vstate->dtvs_tlocals[id];
+
+			key = &tupregs[DIF_DTR_NREGS];
+			key[0].dttk_value = (uint64_t)id;
+			key[0].dttk_size = 0;
+			DTRACE_TLS_THRKEY(key[1].dttk_value);
+			key[1].dttk_size = 0;
+
+			dvar = dtrace_dynvar(dstate, 2, key, sizeof(uint64_t),
+					     DTRACE_DYNVAR_NOALLOC, mstate,
+					     vstate);
+
+			if (dvar == NULL) {
+				regs[rd] = 0;
+				break;
+			}
+
+			if (v->dtdv_type.dtdt_flags & DIF_TF_BYREF)
+				regs[rd] = (uint64_t)(uintptr_t)dvar->dtdv_data;
+			else
+				regs[rd] = *((uint64_t *)dvar->dtdv_data);
+
+			break;
+		}
+
+		case DIF_OP_STTS: {
+			dtrace_dynvar_t	*dvar;
+			dtrace_key_t	*key;
+
+			id = DIF_INSTR_VAR(instr);
+			ASSERT(id >= DIF_VAR_OTHER_UBASE);
+			id -= DIF_VAR_OTHER_UBASE;
+
+			key = &tupregs[DIF_DTR_NREGS];
+			key[0].dttk_value = (uint64_t)id;
+			key[0].dttk_size = 0;
+			DTRACE_TLS_THRKEY(key[1].dttk_value);
+			key[1].dttk_size = 0;
+			v = &vstate->dtvs_tlocals[id];
+
+			dvar = dtrace_dynvar(dstate, 2, key,
+				v->dtdv_type.dtdt_size > sizeof(uint64_t)
+					?  v->dtdv_type.dtdt_size
+					: sizeof(uint64_t),
+				regs[rd]
+					? DTRACE_DYNVAR_ALLOC
+					: DTRACE_DYNVAR_DEALLOC,
+				mstate, vstate);
+
+			/*
+			 * Given that we're storing to thread-local data,
+			 * we need to flush our predicate cache.
+			 */
+			current->predcache = 0;
+
+			if (dvar == NULL)
+				break;
+
+			if (v->dtdv_type.dtdt_flags & DIF_TF_BYREF) {
+				if (!dtrace_vcanload(
+						(void *)(uintptr_t)regs[rd],
+						&v->dtdv_type, mstate, vstate))
+					break;
+
+				dtrace_vcopy((void *)(uintptr_t)regs[rd],
+					     dvar->dtdv_data, &v->dtdv_type);
+			} else
+				*((uint64_t *)dvar->dtdv_data) = regs[rd];
+
+			break;
+		}
+
+		case DIF_OP_SRA:
+			regs[rd] = (int64_t)regs[r1] >> regs[r2];
+			break;
+
+		case DIF_OP_CALL:
+			dtrace_dif_subr(DIF_INSTR_SUBR(instr), rd, regs,
+					tupregs, ttop, mstate, state);
+			break;
+
+		case DIF_OP_PUSHTR:
+			if (ttop == DIF_DTR_NREGS) {
+				*flags |= CPU_DTRACE_TUPOFLOW;
+				break;
+			}
+
+			if (r1 == DIF_TYPE_STRING)
+				/*
+				 * If this is a string type and the size is 0,
+				 * we'll use the system-wide default string
+				 * size.  Note that we are _not_ looking at
+				 * the value of the DTRACEOPT_STRSIZE option;
+				 * had this been set, we would expect to have
+				 * a non-zero size value in the "pushtr".
+				 */
+				tupregs[ttop].dttk_size =
+					dtrace_strlen(
+						(char *)(uintptr_t)regs[rd],
+						regs[r2]
+						    ? regs[r2]
+						    : dtrace_strsize_default
+					) + 1;
+			else
+				tupregs[ttop].dttk_size = regs[r2];
+
+			tupregs[ttop++].dttk_value = regs[rd];
+			break;
+
+		case DIF_OP_PUSHTV:
+			if (ttop == DIF_DTR_NREGS) {
+				*flags |= CPU_DTRACE_TUPOFLOW;
+				break;
+			}
+
+			tupregs[ttop].dttk_value = regs[rd];
+			tupregs[ttop++].dttk_size = 0;
+			break;
+
+		case DIF_OP_POPTS:
+			if (ttop != 0)
+				ttop--;
+			break;
+
+		case DIF_OP_FLUSHTS:
+			ttop = 0;
+			break;
+
+		case DIF_OP_LDGAA:
+		case DIF_OP_LDTAA: {
+			dtrace_dynvar_t	*dvar;
+			dtrace_key_t	*key = tupregs;
+			uint_t		nkeys = ttop;
+
+			id = DIF_INSTR_VAR(instr);
+			ASSERT(id >= DIF_VAR_OTHER_UBASE);
+			id -= DIF_VAR_OTHER_UBASE;
+
+			key[nkeys].dttk_value = (uint64_t)id;
+			key[nkeys++].dttk_size = 0;
+
+			if (DIF_INSTR_OP(instr) == DIF_OP_LDTAA) {
+				DTRACE_TLS_THRKEY(key[nkeys].dttk_value);
+				key[nkeys++].dttk_size = 0;
+				v = &vstate->dtvs_tlocals[id];
+			} else
+				v = &vstate->dtvs_globals[id]->dtsv_var;
+
+			dvar = dtrace_dynvar(dstate, nkeys, key,
+			v->dtdv_type.dtdt_size > sizeof(uint64_t) ?
+			v->dtdv_type.dtdt_size : sizeof(uint64_t),
+			DTRACE_DYNVAR_NOALLOC, mstate, vstate);
+
+			if (dvar == NULL) {
+				regs[rd] = 0;
+				break;
+			}
+
+			if (v->dtdv_type.dtdt_flags & DIF_TF_BYREF)
+				regs[rd] = (uint64_t)(uintptr_t)dvar->dtdv_data;
+			else
+				regs[rd] = *((uint64_t *)dvar->dtdv_data);
+
+			break;
+		}
+
+		case DIF_OP_STGAA:
+		case DIF_OP_STTAA: {
+			dtrace_dynvar_t	*dvar;
+			dtrace_key_t	*key = tupregs;
+			uint_t		nkeys = ttop;
+
+			id = DIF_INSTR_VAR(instr);
+			ASSERT(id >= DIF_VAR_OTHER_UBASE);
+			id -= DIF_VAR_OTHER_UBASE;
+
+			key[nkeys].dttk_value = (uint64_t)id;
+			key[nkeys++].dttk_size = 0;
+
+			if (DIF_INSTR_OP(instr) == DIF_OP_STTAA) {
+				DTRACE_TLS_THRKEY(key[nkeys].dttk_value);
+				key[nkeys++].dttk_size = 0;
+				v = &vstate->dtvs_tlocals[id];
+			} else
+				v = &vstate->dtvs_globals[id]->dtsv_var;
+
+			dvar = dtrace_dynvar(dstate, nkeys, key,
+				v->dtdv_type.dtdt_size > sizeof(uint64_t)
+					?  v->dtdv_type.dtdt_size
+					: sizeof(uint64_t),
+				regs[rd] ? DTRACE_DYNVAR_ALLOC
+					 : DTRACE_DYNVAR_DEALLOC,
+				mstate, vstate);
+
+			if (dvar == NULL)
+				break;
+
+			if (v->dtdv_type.dtdt_flags & DIF_TF_BYREF) {
+				if (!dtrace_vcanload(
+						(void *)(uintptr_t)regs[rd],
+						&v->dtdv_type, mstate, vstate))
+					break;
+
+				dtrace_vcopy((void *)(uintptr_t)regs[rd],
+					     dvar->dtdv_data, &v->dtdv_type);
+			} else
+				*((uint64_t *)dvar->dtdv_data) = regs[rd];
+
+			break;
+		}
+
+		case DIF_OP_ALLOCS: {
+			uintptr_t	ptr =
+					P2ROUNDUP(mstate->dtms_scratch_ptr, 8);
+			size_t		size = ptr - mstate->dtms_scratch_ptr +
+					       regs[r1];
+
+			/*
+			 * Rounding up the user allocation size could have
+			 * overflowed large, bogus allocations (like -1ULL) to
+			 * 0.
+			 */
+			if (size < regs[r1] ||
+			    !DTRACE_INSCRATCH(mstate, size)) {
+				DTRACE_CPUFLAG_SET(CPU_DTRACE_NOSCRATCH);
+				regs[rd] = 0;
+				break;
+			}
+
+			dtrace_bzero((void *) mstate->dtms_scratch_ptr, size);
+			mstate->dtms_scratch_ptr += size;
+			regs[rd] = ptr;
+			break;
+		}
+
+		case DIF_OP_COPYS:
+			if (!dtrace_canstore(regs[rd], regs[r2], mstate,
+					     vstate)) {
+				*flags |= CPU_DTRACE_BADADDR;
+				*illval = regs[rd];
+				break;
+			}
+
+			if (!dtrace_canload(regs[r1], regs[r2], mstate, vstate))
+				break;
+
+			dtrace_bcopy((void *)(uintptr_t)regs[r1],
+				     (void *)(uintptr_t)regs[rd],
+				     (size_t)regs[r2]);
+			break;
+
+		case DIF_OP_STB:
+			if (!dtrace_canstore(regs[rd], 1, mstate, vstate)) {
+				*flags |= CPU_DTRACE_BADADDR;
+				*illval = regs[rd];
+				break;
+			}
+
+			*((uint8_t *)(uintptr_t)regs[rd]) = (uint8_t)regs[r1];
+			break;
+
+		case DIF_OP_STH:
+			if (!dtrace_canstore(regs[rd], 2, mstate, vstate)) {
+				*flags |= CPU_DTRACE_BADADDR;
+				*illval = regs[rd];
+				break;
+			}
+
+			if (regs[rd] & 1) {
+				*flags |= CPU_DTRACE_BADALIGN;
+				*illval = regs[rd];
+				break;
+			}
+
+			*((uint16_t *)(uintptr_t)regs[rd]) = (uint16_t)regs[r1];
+			break;
+
+		case DIF_OP_STW:
+			if (!dtrace_canstore(regs[rd], 4, mstate, vstate)) {
+				*flags |= CPU_DTRACE_BADADDR;
+				*illval = regs[rd];
+				break;
+			}
+
+			if (regs[rd] & 3) {
+				*flags |= CPU_DTRACE_BADALIGN;
+				*illval = regs[rd];
+				break;
+			}
+
+			*((uint32_t *)(uintptr_t)regs[rd]) = (uint32_t)regs[r1];
+			break;
+
+		case DIF_OP_STX:
+			if (!dtrace_canstore(regs[rd], 8, mstate, vstate)) {
+				*flags |= CPU_DTRACE_BADADDR;
+				*illval = regs[rd];
+				break;
+			}
+
+			if (regs[rd] & 7) {
+				*flags |= CPU_DTRACE_BADALIGN;
+				*illval = regs[rd];
+				break;
+			}
+
+			*((uint64_t *)(uintptr_t)regs[rd]) = regs[r1];
+			break;
+		}
+	}
+
+	if (!(*flags & CPU_DTRACE_FAULT))
+		return rval;
+
+	mstate->dtms_fltoffs = opc * sizeof(dif_instr_t);
+	mstate->dtms_present |= DTRACE_MSTATE_FLTOFFS;
+
+	return 0;
+}
diff -urN ../linux-2.6.34/kernel/dtrace/dtrace_dof.c ./kernel/dtrace/dtrace_dof.c
--- ../linux-2.6.34/kernel/dtrace/dtrace_dof.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/dtrace_dof.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,989 @@
+/*
+ * FILE:	dtrace_dof.c
+ * DESCRIPTION:	Dynamic Tracing: DOF object functions
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/slab.h>
+#include <linux/types.h>
+#include <asm/uaccess.h>
+
+#include "dtrace.h"
+
+size_t		dtrace_difo_maxsize = 256 * 1024;
+dtrace_optval_t	dtrace_dof_maxsize = 256 * 1024;
+size_t		dtrace_actions_max = 16 * 1024;
+
+static void dtrace_dof_error(dof_hdr_t *dof, const char *str)
+{
+	if (dtrace_err_verbose)
+		pr_warning("failed to process DOF: %s", str);
+
+#ifdef DTRACE_ERRDEBUG
+	dtrace_errdebug(str);
+#endif
+}
+
+dof_hdr_t *dtrace_dof_copyin(void __user *argp, int *errp)
+{
+	dof_hdr_t	hdr, *dof;
+
+	ASSERT(!mutex_is_locked(&dtrace_lock));
+
+	/*
+	 * First, we're going to copyin() the sizeof (dof_hdr_t).
+	 */
+	if (copy_from_user(&hdr, argp, sizeof (hdr)) != 0) {
+		dtrace_dof_error(NULL, "failed to copyin DOF header");
+		*errp = -EFAULT;
+		return NULL;
+	}
+
+	/*
+	 * Now we'll allocate the entire DOF and copy it in -- provided
+	 * that the length isn't outrageous.
+	 */
+	if (hdr.dofh_loadsz >= dtrace_dof_maxsize) {
+		dtrace_dof_error(&hdr, "load size exceeds maximum");
+		*errp = -E2BIG;
+		return NULL;
+	}
+
+	if (hdr.dofh_loadsz < sizeof (hdr)) {
+		dtrace_dof_error(&hdr, "invalid load size");
+		*errp = -EINVAL;
+		return NULL;
+	}
+
+	dof = kmalloc(hdr.dofh_loadsz, GFP_KERNEL);
+
+	if (copy_from_user(dof, argp, hdr.dofh_loadsz) != 0 ||
+		dof->dofh_loadsz != hdr.dofh_loadsz) {
+		kfree(dof);
+		*errp = -EFAULT;
+		return NULL;
+	}
+
+	return dof;
+}
+
+dof_hdr_t *dtrace_dof_property(const char *name)
+{
+	uchar_t		*buf;
+	uint64_t	loadsz;
+	unsigned int	len, i;
+	dof_hdr_t	*dof;
+
+	/*
+	 * Unfortunately, array of values in .conf files are always (and
+	 * only) interpreted to be integer arrays.  We must read our DOF
+	 * as an integer array, and then squeeze it into a byte array.
+	 */
+#ifdef FIXME
+	if (ddi_prop_lookup_int_array(DDI_DEV_T_ANY, dtrace_devi, 0,
+				      (char *)name, (int **)&buf, &len) !=
+	    DDI_PROP_SUCCESS)
+		return NULL;
+#else
+buf = NULL;
+len = 0;
+#endif
+
+	for (i = 0; i < len; i++)
+		buf[i] = (uchar_t)(((int *)buf)[i]);
+
+	if (len < sizeof (dof_hdr_t)) {
+#ifdef FIXME
+		ddi_prop_free(buf);
+#endif
+		dtrace_dof_error(NULL, "truncated header");
+		return NULL;
+	}
+
+	if (len < (loadsz = ((dof_hdr_t *)buf)->dofh_loadsz)) {
+#ifdef FIXME
+		ddi_prop_free(buf);
+#endif
+		dtrace_dof_error(NULL, "truncated DOF");
+		return NULL;
+	}
+
+	if (loadsz >= dtrace_dof_maxsize) {
+#ifdef FIXME
+		ddi_prop_free(buf);
+#endif
+		dtrace_dof_error(NULL, "oversized DOF");
+		return NULL;
+	}
+
+	dof = kmalloc(loadsz, GFP_KERNEL);
+	memcpy(dof, buf, loadsz);
+#ifdef FIXME
+	ddi_prop_free(buf);
+#endif
+
+	return dof;
+}
+
+void dtrace_dof_destroy(dof_hdr_t *dof)
+{
+	kfree(dof);
+}
+
+/*
+ * Return the dof_sec_t pointer corresponding to a given section index.  If the
+ * index is not valid, dtrace_dof_error() is called and NULL is returned.  If
+ * a type other than DOF_SECT_NONE is specified, the header is checked against
+ * this type and NULL is returned if the types do not match.
+ */
+static dof_sec_t *dtrace_dof_sect(dof_hdr_t *dof, uint32_t type,
+				  dof_secidx_t i)
+{
+	dof_sec_t	*sec = (dof_sec_t *)(uintptr_t)((uintptr_t)dof +
+							dof->dofh_secoff +
+							i * dof->dofh_secsize);
+
+	if (i >= dof->dofh_secnum) {
+		dtrace_dof_error(dof, "referenced section index is invalid");
+		return NULL;
+	}
+
+	if (!(sec->dofs_flags & DOF_SECF_LOAD)) {
+		dtrace_dof_error(dof, "referenced section is not loadable");
+		return NULL;
+	}
+
+	if (type != DOF_SECT_NONE && type != sec->dofs_type) {
+		dtrace_dof_error(dof, "referenced section is the wrong type");
+		return NULL;
+	}
+
+	return sec;
+}
+
+static dtrace_probedesc_t *dtrace_dof_probedesc(dof_hdr_t *dof, dof_sec_t *sec,
+						dtrace_probedesc_t *desc)
+{
+	dof_probedesc_t	*probe;
+	dof_sec_t	*strtab;
+	uintptr_t	daddr = (uintptr_t)dof;
+	uintptr_t	str;
+	size_t		size;
+
+	if (sec->dofs_type != DOF_SECT_PROBEDESC) {
+		dtrace_dof_error(dof, "invalid probe section");
+		return NULL;
+	}
+
+	if (sec->dofs_align != sizeof (dof_secidx_t)) {
+		dtrace_dof_error(dof, "bad alignment in probe description");
+		return NULL;
+	}
+
+	if (sec->dofs_offset + sizeof (dof_probedesc_t) > dof->dofh_loadsz) {
+		dtrace_dof_error(dof, "truncated probe description");
+		return NULL;
+	}
+
+	probe = (dof_probedesc_t *)(uintptr_t)(daddr + sec->dofs_offset);
+	strtab = dtrace_dof_sect(dof, DOF_SECT_STRTAB, probe->dofp_strtab);
+
+	if (strtab == NULL)
+		return NULL;
+
+	str = daddr + strtab->dofs_offset;
+	size = strtab->dofs_size;
+
+	if (probe->dofp_provider >= strtab->dofs_size) {
+		dtrace_dof_error(dof, "corrupt probe provider");
+		return NULL;
+	}
+
+	strncpy(desc->dtpd_provider, (char *)(str + probe->dofp_provider),
+		min((size_t)DTRACE_PROVNAMELEN - 1,
+		    size - probe->dofp_provider));
+
+	if (probe->dofp_mod >= strtab->dofs_size) {
+		dtrace_dof_error(dof, "corrupt probe module");
+		return NULL;
+	}
+
+	strncpy(desc->dtpd_mod, (char *)(str + probe->dofp_mod),
+		min((size_t)DTRACE_MODNAMELEN - 1, size - probe->dofp_mod));
+
+	if (probe->dofp_func >= strtab->dofs_size) {
+		dtrace_dof_error(dof, "corrupt probe function");
+		return NULL;
+	}
+
+	strncpy(desc->dtpd_func, (char *)(str + probe->dofp_func),
+		min((size_t)DTRACE_FUNCNAMELEN - 1, size - probe->dofp_func));
+
+	if (probe->dofp_name >= strtab->dofs_size) {
+		dtrace_dof_error(dof, "corrupt probe name");
+		return NULL;
+	}
+
+	strncpy(desc->dtpd_name, (char *)(str + probe->dofp_name),
+		min((size_t)DTRACE_NAMELEN - 1, size - probe->dofp_name));
+
+	return desc;
+}
+
+static dtrace_difo_t *dtrace_dof_difo(dof_hdr_t *dof, dof_sec_t *sec,
+				      dtrace_vstate_t *vstate,
+				      const cred_t *cr)
+{
+	dtrace_difo_t	*dp;
+	size_t		ttl = 0;
+	dof_difohdr_t	*dofd;
+	uintptr_t	daddr = (uintptr_t)dof;
+	size_t		max = dtrace_difo_maxsize;
+	int		i, l, n;
+
+	static const struct {
+		int section;
+		int bufoffs;
+		int lenoffs;
+		int entsize;
+		int align;
+		const char *msg;
+	} difo[] = {
+		{
+			DOF_SECT_DIF,
+			offsetof(dtrace_difo_t, dtdo_buf),
+			offsetof(dtrace_difo_t, dtdo_len),
+			sizeof (dif_instr_t),
+			sizeof (dif_instr_t),
+			"multiple DIF sections"
+		},
+		{
+			DOF_SECT_INTTAB,
+			offsetof(dtrace_difo_t, dtdo_inttab),
+			offsetof(dtrace_difo_t, dtdo_intlen),
+			sizeof (uint64_t),
+			sizeof (uint64_t),
+			"multiple integer tables"
+		},
+		{
+			DOF_SECT_STRTAB,
+			offsetof(dtrace_difo_t, dtdo_strtab),
+			offsetof(dtrace_difo_t, dtdo_strlen),
+			0,
+			sizeof (char),
+			"multiple string tables"
+		},
+		{
+			DOF_SECT_VARTAB,
+			offsetof(dtrace_difo_t, dtdo_vartab),
+			offsetof(dtrace_difo_t, dtdo_varlen),
+			sizeof (dtrace_difv_t),
+			sizeof (uint_t),
+			"multiple variable tables"
+		},
+		{
+			DOF_SECT_NONE,
+			0,
+			0,
+			0,
+			0,
+			NULL
+		}
+	};
+
+	if (sec->dofs_type != DOF_SECT_DIFOHDR) {
+		dtrace_dof_error(dof, "invalid DIFO header section");
+		return NULL;
+	}
+
+	if (sec->dofs_align != sizeof (dof_secidx_t)) {
+		dtrace_dof_error(dof, "bad alignment in DIFO header");
+		return NULL;
+	}
+
+	if (sec->dofs_size < sizeof (dof_difohdr_t) ||
+	    sec->dofs_size % sizeof (dof_secidx_t)) {
+		dtrace_dof_error(dof, "bad size in DIFO header");
+		return NULL;
+	}
+
+	dofd = (dof_difohdr_t *)(uintptr_t)(daddr + sec->dofs_offset);
+	n = (sec->dofs_size - sizeof (*dofd)) / sizeof (dof_secidx_t) + 1;
+
+	dp = kzalloc(sizeof (dtrace_difo_t), GFP_KERNEL);
+	dp->dtdo_rtype = dofd->dofd_rtype;
+
+	for (l = 0; l < n; l++) {
+		dof_sec_t	*subsec;
+		void		**bufp;
+		uint32_t	*lenp;
+
+		if ((subsec =
+		     dtrace_dof_sect(dof, DOF_SECT_NONE, dofd->dofd_links[l]))
+		    == NULL)
+			goto err; /* invalid section link */
+
+		if (ttl + subsec->dofs_size > max) {
+			dtrace_dof_error(dof, "exceeds maximum size");
+			goto err;
+		}
+
+		ttl += subsec->dofs_size;
+
+		for (i = 0; difo[i].section != DOF_SECT_NONE; i++) {
+			if (subsec->dofs_type != difo[i].section)
+				continue;
+
+			if (!(subsec->dofs_flags & DOF_SECF_LOAD)) {
+				dtrace_dof_error(dof, "section not loaded");
+				goto err;
+			}
+
+			if (subsec->dofs_align != difo[i].align) {
+				dtrace_dof_error(dof, "bad alignment");
+				goto err;
+			}
+
+			bufp = (void **)((uintptr_t)dp + difo[i].bufoffs);
+			lenp = (uint32_t *)((uintptr_t)dp + difo[i].lenoffs);
+
+			if (*bufp != NULL) {
+				dtrace_dof_error(dof, difo[i].msg);
+				goto err;
+			}
+
+			if (difo[i].entsize != subsec->dofs_entsize) {
+				dtrace_dof_error(dof, "entry size mismatch");
+				goto err;
+			}
+
+			if (subsec->dofs_entsize != 0) {
+				uint64_t	n = subsec->dofs_size;
+
+				if (do_div(n, subsec->dofs_entsize) != 0) {
+					dtrace_dof_error(dof,
+							 "corrupt entry size");
+					goto err;
+				}
+			}
+
+			*lenp = subsec->dofs_size;
+			*bufp = kmalloc(subsec->dofs_size, GFP_KERNEL);
+			memcpy(*bufp,
+			       (char *)(uintptr_t)(daddr + subsec->dofs_offset),
+			       subsec->dofs_size);
+
+			if (subsec->dofs_entsize != 0)
+				*lenp /= subsec->dofs_entsize;
+
+			break;
+		}
+
+		/*
+		 * If we encounter a loadable DIFO sub-section that is not
+		 * known to us, assume this is a broken program and fail.
+		 */
+		if (difo[i].section == DOF_SECT_NONE &&
+		    (subsec->dofs_flags & DOF_SECF_LOAD)) {
+			dtrace_dof_error(dof, "unrecognized DIFO subsection");
+			goto err;
+		}
+	}
+
+	if (dp->dtdo_buf == NULL) {
+		/*
+		 * We can't have a DIF object without DIF text.
+		 */
+		dtrace_dof_error(dof, "missing DIF text");
+		goto err;
+	}
+
+	/*
+	 * Before we validate the DIF object, run through the variable table
+	 * looking for the strings -- if any of their size are under, we'll set
+	 * their size to be the system-wide default string size.  Note that
+	 * this should _not_ happen if the "strsize" option has been set --
+	 * in this case, the compiler should have set the size to reflect the
+	 * setting of the option.
+	 */
+	for (i = 0; i < dp->dtdo_varlen; i++) {
+		dtrace_difv_t		*v = &dp->dtdo_vartab[i];
+		dtrace_diftype_t	*t = &v->dtdv_type;
+
+		if (v->dtdv_id < DIF_VAR_OTHER_UBASE)
+			continue;
+
+		if (t->dtdt_kind == DIF_TYPE_STRING && t->dtdt_size == 0)
+			t->dtdt_size = dtrace_strsize_default;
+	}
+
+	if (dtrace_difo_validate(dp, vstate, DIF_DIR_NREGS, cr) != 0)
+		goto err;
+
+	dtrace_difo_init(dp, vstate);
+	return dp;
+
+err:
+	kfree(dp->dtdo_buf);
+	kfree(dp->dtdo_inttab);
+	kfree(dp->dtdo_strtab);
+	kfree(dp->dtdo_vartab);
+
+	kfree(dp);
+	return NULL;
+}
+
+static dtrace_predicate_t *dtrace_dof_predicate(dof_hdr_t *dof, dof_sec_t *sec,
+						dtrace_vstate_t *vstate,
+						const cred_t *cr)
+{
+        dtrace_difo_t *dp;
+
+        if ((dp = dtrace_dof_difo(dof, sec, vstate, cr)) == NULL)
+                return NULL;
+
+        return dtrace_predicate_create(dp);
+}
+
+static dtrace_actdesc_t *dtrace_dof_actdesc(dof_hdr_t *dof, dof_sec_t *sec,
+					    dtrace_vstate_t *vstate,
+					    const cred_t *cr)
+{
+	dtrace_actdesc_t	*act, *first = NULL, *last = NULL, *next;
+	dof_actdesc_t		*desc;
+	dof_sec_t		*difosec;
+	size_t			offs;
+	uintptr_t		daddr = (uintptr_t)dof;
+	uint64_t		arg;
+	dtrace_actkind_t	kind;
+
+	if (sec->dofs_type != DOF_SECT_ACTDESC) {
+		dtrace_dof_error(dof, "invalid action section");
+		return NULL;
+	}
+
+	if (sec->dofs_offset + sizeof (dof_actdesc_t) > dof->dofh_loadsz) {
+		dtrace_dof_error(dof, "truncated action description");
+		return NULL;
+	}
+
+	if (sec->dofs_align != sizeof (uint64_t)) {
+		dtrace_dof_error(dof, "bad alignment in action description");
+		return NULL;
+	}
+
+	if (sec->dofs_size < sec->dofs_entsize) {
+		dtrace_dof_error(dof, "section entry size exceeds total size");
+		return NULL;
+	}
+
+	if (sec->dofs_entsize != sizeof (dof_actdesc_t)) {
+		dtrace_dof_error(dof, "bad entry size in action description");
+		return NULL;
+	}
+
+	/*
+	 * Was: sec->dofs_size / sec->dofs_entsize > dtrace_actions_max
+	 * but it is safer to simply avoid the division (it requires use of
+	 * a macro in Linux to cover 64-bit division in a 32-bit kernel.
+	 */
+	if (sec->dofs_size > sec->dofs_entsize * dtrace_actions_max) {
+		dtrace_dof_error(dof, "actions exceed dtrace_actions_max");
+		return NULL;
+	}
+
+	for (offs = 0; offs < sec->dofs_size; offs += sec->dofs_entsize) {
+		desc = (dof_actdesc_t *)(daddr +
+					 (uintptr_t)sec->dofs_offset + offs);
+		kind = (dtrace_actkind_t)desc->dofa_kind;
+
+		if (DTRACEACT_ISPRINTFLIKE(kind) &&
+		    (kind != DTRACEACT_PRINTA ||
+		     desc->dofa_strtab != DOF_SECIDX_NONE)) {
+			dof_sec_t	*strtab;
+			char		*str, *fmt;
+			uint64_t	i;
+
+			/*
+			 * The printf()-like actions must have a format string.
+			 */
+			if ((strtab =
+			     dtrace_dof_sect(dof, DOF_SECT_STRTAB,
+					     desc->dofa_strtab)) == NULL)
+				goto err;
+
+			str = (char *)((uintptr_t)dof +
+				       (uintptr_t)strtab->dofs_offset);
+	
+			for (i = desc->dofa_arg; i < strtab->dofs_size; i++) {
+				if (str[i] == '\0')
+					break;
+			}
+
+			if (i >= strtab->dofs_size) {
+				dtrace_dof_error(dof, "bogus format string");
+				goto err;
+			}
+
+			if (i == desc->dofa_arg) {
+				dtrace_dof_error(dof, "empty format string");
+				goto err;
+			}
+
+			i -= desc->dofa_arg;
+			fmt = kmalloc(i + 1, GFP_KERNEL);
+			memcpy(fmt, &str[desc->dofa_arg], i + 1);
+			arg = (uint64_t)(uintptr_t)fmt;
+		} else {
+			if (kind == DTRACEACT_PRINTA) {
+				ASSERT(desc->dofa_strtab == DOF_SECIDX_NONE);
+				arg = 0;
+			} else
+				arg = desc->dofa_arg;
+		}
+
+		act = dtrace_actdesc_create(kind, desc->dofa_ntuple,
+					    desc->dofa_uarg, arg);
+
+		if (last != NULL)
+			last->dtad_next = act;
+		else
+			first = act;
+
+		last = act;
+
+		if (desc->dofa_difo == DOF_SECIDX_NONE)
+			continue;
+
+		if ((difosec = dtrace_dof_sect(dof, DOF_SECT_DIFOHDR,
+					       desc->dofa_difo)) == NULL)
+			goto err;
+
+		act->dtad_difo = dtrace_dof_difo(dof, difosec, vstate, cr);
+
+		if (act->dtad_difo == NULL)
+			goto err;
+	}
+
+	ASSERT(first != NULL);
+	return first;
+
+err:
+	for (act = first; act != NULL; act = next) {
+		next = act->dtad_next;
+		dtrace_actdesc_release(act, vstate);
+	}
+
+	return NULL;
+}
+
+static dtrace_ecbdesc_t *dtrace_dof_ecbdesc(dof_hdr_t *dof, dof_sec_t *sec,
+					    dtrace_vstate_t *vstate,
+					    const cred_t *cr)
+{
+	dtrace_ecbdesc_t	*ep;
+	dof_ecbdesc_t		*ecb;
+	dtrace_probedesc_t	*desc;
+	dtrace_predicate_t	*pred = NULL;
+
+	if (sec->dofs_size < sizeof (dof_ecbdesc_t)) {
+		dtrace_dof_error(dof, "truncated ECB description");
+		return NULL;
+	}
+
+	if (sec->dofs_align != sizeof (uint64_t)) {
+		dtrace_dof_error(dof, "bad alignment in ECB description");
+		return NULL;
+	}
+
+	ecb = (dof_ecbdesc_t *)((uintptr_t)dof + (uintptr_t)sec->dofs_offset);
+	sec = dtrace_dof_sect(dof, DOF_SECT_PROBEDESC, ecb->dofe_probes);
+
+	if (sec == NULL)
+		return NULL;
+
+	ep = kzalloc(sizeof (dtrace_ecbdesc_t), GFP_KERNEL);
+	ep->dted_uarg = ecb->dofe_uarg;
+	desc = &ep->dted_probe;
+
+	if (dtrace_dof_probedesc(dof, sec, desc) == NULL)
+		goto err;
+
+	if (ecb->dofe_pred != DOF_SECIDX_NONE) {
+		if ((sec = dtrace_dof_sect(dof, DOF_SECT_DIFOHDR,
+					   ecb->dofe_pred)) == NULL)
+			goto err;
+
+		if ((pred = dtrace_dof_predicate(dof, sec, vstate, cr)) == NULL)
+			goto err;
+
+		ep->dted_pred.dtpdd_predicate = pred;
+	}
+
+	if (ecb->dofe_actions != DOF_SECIDX_NONE) {
+		if ((sec = dtrace_dof_sect(dof, DOF_SECT_ACTDESC,
+					   ecb->dofe_actions)) == NULL)
+			goto err;
+
+		ep->dted_action = dtrace_dof_actdesc(dof, sec, vstate, cr);
+
+		if (ep->dted_action == NULL)
+			goto err;
+	}
+
+	return ep;
+
+err:
+	if (pred != NULL)
+		dtrace_predicate_release(pred, vstate);
+	kfree(ep);
+	return NULL;
+}
+
+/*
+ * Apply the relocations from the specified 'sec' (a DOF_SECT_URELHDR) to the
+ * specified DOF.  At present, this amounts to simply adding 'ubase' to the
+ * site of any user SETX relocations to account for load object base address.
+ * In the future, if we need other relocations, this function can be extended.
+ */
+static int dtrace_dof_relocate(dof_hdr_t *dof, dof_sec_t *sec, uint64_t ubase)
+{
+	uintptr_t	daddr = (uintptr_t)dof;
+	dof_relohdr_t	*dofr = (dof_relohdr_t *)(uintptr_t)(daddr +
+							     sec->dofs_offset);
+	dof_sec_t	*ss, *rs, *ts;
+	dof_relodesc_t	*r;
+	uint_t		i, n;
+
+	if (sec->dofs_size < sizeof (dof_relohdr_t) ||
+	    sec->dofs_align != sizeof (dof_secidx_t)) {
+		dtrace_dof_error(dof, "invalid relocation header");
+		return -1;
+	}
+
+	ss = dtrace_dof_sect(dof, DOF_SECT_STRTAB, dofr->dofr_strtab);
+	rs = dtrace_dof_sect(dof, DOF_SECT_RELTAB, dofr->dofr_relsec);
+	ts = dtrace_dof_sect(dof, DOF_SECT_NONE, dofr->dofr_tgtsec);
+
+	if (ss == NULL || rs == NULL || ts == NULL)
+		return -1; /* dtrace_dof_error() has been called already */
+
+	if (rs->dofs_entsize < sizeof (dof_relodesc_t) ||
+	    rs->dofs_align != sizeof (uint64_t)) {
+		dtrace_dof_error(dof, "invalid relocation section");
+		return -1;
+	}
+
+	r = (dof_relodesc_t *)(uintptr_t)(daddr + rs->dofs_offset);
+	/*
+	 * Was: n = rs->dofs_size / rs->dofs_entsize;
+	 * but on Linux we need to use a macro for the division to handle the
+	 * possible case of 64-bit division on a 32-bit kernel.
+	 */
+	n = rs->dofs_size;
+	do_div(n, rs->dofs_entsize);
+
+	for (i = 0; i < n; i++) {
+		uintptr_t	taddr = daddr + ts->dofs_offset +
+						r->dofr_offset;
+
+		switch (r->dofr_type) {
+		case DOF_RELO_NONE:
+			break;
+		case DOF_RELO_SETX:
+			if (r->dofr_offset >= ts->dofs_size ||
+			    r->dofr_offset + sizeof (uint64_t) >
+				ts->dofs_size) {
+				dtrace_dof_error(dof, "bad relocation offset");
+				return -1;
+			}
+
+			if (!IS_ALIGNED(taddr, sizeof (uint64_t))) {
+				dtrace_dof_error(dof, "misaligned setx relo");
+				return -1;
+			}
+
+			*(uint64_t *)taddr += ubase;
+			break;
+		default:
+			dtrace_dof_error(dof, "invalid relocation type");
+			return -1;
+		}
+
+		r = (dof_relodesc_t *)((uintptr_t)r + rs->dofs_entsize);
+	}
+
+	return 0;
+}
+
+/*
+ * The dof_hdr_t passed to dtrace_dof_slurp() should be a partially validated
+ * header:  it should be at the front of a memory region that is at least
+ * sizeof (dof_hdr_t) in size -- and then at least dof_hdr.dofh_loadsz in
+ * size.  It need not be validated in any other way.
+ */
+int dtrace_dof_slurp(dof_hdr_t *dof, dtrace_vstate_t *vstate, const cred_t *cr,
+		     dtrace_enabling_t **enabp, uint64_t ubase, int noprobes)
+{
+	uint64_t		len = dof->dofh_loadsz, seclen;
+	uintptr_t		daddr = (uintptr_t)dof;
+	dtrace_ecbdesc_t	*ep;
+	dtrace_enabling_t	*enab;
+	uint_t			i;
+
+	ASSERT(mutex_is_locked(&dtrace_lock));
+	ASSERT(dof->dofh_loadsz >= sizeof (dof_hdr_t));
+
+	/*
+	 * Check the DOF header identification bytes.  In addition to checking
+	 * valid settings, we also verify that unused bits/bytes are zeroed so
+	 * we can use them later without fear of regressing existing binaries.
+	 */
+	if (memcmp(&dof->dofh_ident[DOF_ID_MAG0], DOF_MAG_STRING,
+		   DOF_MAG_STRLEN) != 0) {
+		dtrace_dof_error(dof, "DOF magic string mismatch");
+		return -1;
+	}
+
+	if (dof->dofh_ident[DOF_ID_MODEL] != DOF_MODEL_ILP32 &&
+	    dof->dofh_ident[DOF_ID_MODEL] != DOF_MODEL_LP64) {
+		dtrace_dof_error(dof, "DOF has invalid data model");
+		return -1;
+	}
+
+	if (dof->dofh_ident[DOF_ID_ENCODING] != DOF_ENCODE_NATIVE) {
+		dtrace_dof_error(dof, "DOF encoding mismatch");
+		return -1;
+	}
+
+	if (dof->dofh_ident[DOF_ID_VERSION] != DOF_VERSION_1 &&
+	    dof->dofh_ident[DOF_ID_VERSION] != DOF_VERSION_2) {
+		dtrace_dof_error(dof, "DOF version mismatch");
+		return -1;
+	}
+
+	if (dof->dofh_ident[DOF_ID_DIFVERS] != DIF_VERSION_2) {
+		dtrace_dof_error(dof, "DOF uses unsupported instruction set");
+		return -1;
+	}
+
+	if (dof->dofh_ident[DOF_ID_DIFIREG] > DIF_DIR_NREGS) {
+		dtrace_dof_error(dof, "DOF uses too many integer registers");
+		return -1;
+	}
+
+	if (dof->dofh_ident[DOF_ID_DIFTREG] > DIF_DTR_NREGS) {
+		dtrace_dof_error(dof, "DOF uses too many tuple registers");
+		return -1;
+	}
+
+	for (i = DOF_ID_PAD; i < DOF_ID_SIZE; i++) {
+		if (dof->dofh_ident[i] != 0) {
+			dtrace_dof_error(dof, "DOF has invalid ident byte set");                        return -1;
+		}
+	}
+
+	if (dof->dofh_flags & ~DOF_FL_VALID) {
+		dtrace_dof_error(dof, "DOF has invalid flag bits set");
+		return -1;
+	}
+
+	if (dof->dofh_secsize == 0) {
+		dtrace_dof_error(dof, "zero section header size");
+		return -1;
+	}
+
+	/*
+	 * Check that the section headers don't exceed the amount of DOF
+	 * data.  Note that we cast the section size and number of sections
+	 * to uint64_t's to prevent possible overflow in the multiplication.
+	 */
+	seclen = (uint64_t)dof->dofh_secnum * (uint64_t)dof->dofh_secsize;
+
+	if (dof->dofh_secoff > len || seclen > len ||
+	    dof->dofh_secoff + seclen > len) {
+		dtrace_dof_error(dof, "truncated section headers");
+		return -1;
+	}
+
+	if (!IS_ALIGNED(dof->dofh_secoff, sizeof (uint64_t))) {
+		dtrace_dof_error(dof, "misaligned section headers");
+		return -1;
+	}
+
+	if (!IS_ALIGNED(dof->dofh_secsize, sizeof (uint64_t))) {
+		dtrace_dof_error(dof, "misaligned section size");
+		return -1;
+	}
+
+	/*
+	 * Take an initial pass through the section headers to be sure that
+	 * the headers don't have stray offsets.  If the 'noprobes' flag is
+	 * set, do not permit sections relating to providers, probes, or args.
+	 */
+	for (i = 0; i < dof->dofh_secnum; i++) {
+		dof_sec_t	*sec =
+				(dof_sec_t *)(daddr +
+					      (uintptr_t)dof->dofh_secoff +
+					      i * dof->dofh_secsize);
+
+		if (noprobes) {
+			switch (sec->dofs_type) {
+			case DOF_SECT_PROVIDER:
+			case DOF_SECT_PROBES:
+			case DOF_SECT_PRARGS:
+			case DOF_SECT_PROFFS:
+				dtrace_dof_error(
+					dof, "illegal sections for enabling");
+				return -1;
+			}
+		}
+
+		if (DOF_SEC_ISLOADABLE(sec->dofs_type) &&
+		    !(sec->dofs_flags & DOF_SECF_LOAD)) {
+			dtrace_dof_error(
+				dof, "loadable section with load flag unset");
+			return -1;
+		}
+
+		/*
+		 * Just ignore non-loadable sections.
+		 */
+		if (!(sec->dofs_flags & DOF_SECF_LOAD))
+			continue;
+
+		if (sec->dofs_align & (sec->dofs_align - 1)) {
+			dtrace_dof_error(dof, "bad section alignment");
+			return -1;
+		}
+
+		if (sec->dofs_offset & (sec->dofs_align - 1)) {
+			dtrace_dof_error(dof, "misaligned section");
+			return -1;
+		}
+
+		if (sec->dofs_offset > len || sec->dofs_size > len ||
+		    sec->dofs_offset + sec->dofs_size > len) {
+			dtrace_dof_error(dof, "corrupt section header");
+			return -1;
+		}
+
+		if (sec->dofs_type == DOF_SECT_STRTAB && *((char *)daddr +
+		    sec->dofs_offset + sec->dofs_size - 1) != '\0') {
+			dtrace_dof_error(dof, "non-terminating string table");
+			return -1;
+		}
+	}
+
+	/*
+	 * Take a second pass through the sections and locate and perform any
+	 * relocations that are present.  We do this after the first pass to
+	 * be sure that all sections have had their headers validated.
+	 */
+	for (i = 0; i < dof->dofh_secnum; i++) {
+		dof_sec_t	*sec =
+				(dof_sec_t *)(daddr +
+					      (uintptr_t)dof->dofh_secoff +
+					      i * dof->dofh_secsize);
+
+		/*
+		 * Skip sections that are not loadable.
+		 */
+		if (!(sec->dofs_flags & DOF_SECF_LOAD))
+			continue;
+
+		switch (sec->dofs_type) {
+		case DOF_SECT_URELHDR:
+			if (dtrace_dof_relocate(dof, sec, ubase) != 0)
+				return -1;
+			break;
+		}
+	}
+
+	if ((enab = *enabp) == NULL)
+		enab = *enabp = dtrace_enabling_create(vstate);
+
+	for (i = 0; i < dof->dofh_secnum; i++) {
+		dof_sec_t	*sec =
+				(dof_sec_t *)(daddr +
+					      (uintptr_t)dof->dofh_secoff +
+					      i * dof->dofh_secsize);
+
+		if (sec->dofs_type != DOF_SECT_ECBDESC)
+			continue;
+
+		if ((ep = dtrace_dof_ecbdesc(dof, sec, vstate, cr)) == NULL) {
+			dtrace_enabling_destroy(enab);
+			*enabp = NULL;
+			return -1;
+		}
+
+		dtrace_enabling_add(enab, ep);
+	}
+
+	return 0;
+}
+
+/*
+ * Process DOF for any options.  This should be called after the DOF has been
+ * processed by dtrace_dof_slurp().
+ */
+int dtrace_dof_options(dof_hdr_t *dof, dtrace_state_t *state)
+{
+	int		i, rval;
+	uint32_t	entsize;
+	size_t		offs;
+	dof_optdesc_t	*desc;
+
+	for (i = 0; i < dof->dofh_secnum; i++) {
+		dof_sec_t	*sec = (dof_sec_t *)((uintptr_t)dof +
+				       (uintptr_t)dof->dofh_secoff +
+				       i * dof->dofh_secsize);
+
+		if (sec->dofs_type != DOF_SECT_OPTDESC)
+			continue;
+
+		if (sec->dofs_align != sizeof (uint64_t)) {
+			dtrace_dof_error(
+				dof, "bad alignment in option description");
+			return -EINVAL;
+		}
+
+		if ((entsize = sec->dofs_entsize) == 0) {
+			dtrace_dof_error(dof, "zeroed option entry size");
+			return -EINVAL;
+		}
+
+		if (entsize < sizeof (dof_optdesc_t)) {
+			dtrace_dof_error(dof, "bad option entry size");
+			return -EINVAL;
+		}
+
+		for (offs = 0; offs < sec->dofs_size; offs += entsize) {
+			desc = (dof_optdesc_t *)((uintptr_t)dof +
+						 (uintptr_t)sec->dofs_offset +
+						 offs);
+
+			if (desc->dofo_strtab != DOF_SECIDX_NONE) {
+				dtrace_dof_error(
+					dof, "non-zero option string");
+				return -EINVAL;
+			}
+
+			if (desc->dofo_value == DTRACEOPT_UNSET) {
+				dtrace_dof_error(dof, "unset option");
+				return -EINVAL;
+			}
+
+			if ((rval = dtrace_state_option(
+					state, desc->dofo_option,
+					desc->dofo_value)) != 0) {
+				dtrace_dof_error(dof, "rejected option");
+				return rval;
+			}
+		}
+	}
+
+	return 0;
+}
diff -urN ../linux-2.6.34/kernel/dtrace/dtrace_ecb.c ./kernel/dtrace/dtrace_ecb.c
--- ../linux-2.6.34/kernel/dtrace/dtrace_ecb.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/dtrace_ecb.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,762 @@
+/*
+ * FILE:	dtrace_ecb.c
+ * DESCRIPTION:	Dynamic Tracing: ECB functions
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/slab.h>
+
+#include "dtrace.h"
+
+dtrace_ecb_t	*dtrace_ecb_create_cache;
+
+static dtrace_action_t *dtrace_ecb_aggregation_create(dtrace_ecb_t *ecb,
+						      dtrace_actdesc_t *desc)
+{
+	dtrace_aggregation_t	*agg;
+	size_t			size = sizeof (uint64_t);
+	int			ntuple = desc->dtad_ntuple;
+	dtrace_action_t		*act;
+	dtrace_recdesc_t	*frec;
+	dtrace_aggid_t		aggid;
+	dtrace_state_t		*state = ecb->dte_state;
+
+	agg = kzalloc(sizeof (dtrace_aggregation_t), GFP_KERNEL);
+	agg->dtag_ecb = ecb;
+
+	ASSERT(DTRACEACT_ISAGG(desc->dtad_kind));
+
+	switch (desc->dtad_kind) {
+	case DTRACEAGG_MIN:
+		agg->dtag_initial = UINT64_MAX;
+		agg->dtag_aggregate = dtrace_aggregate_min;
+		break;
+
+	case DTRACEAGG_MAX:
+		agg->dtag_initial = UINT64_MIN;
+		agg->dtag_aggregate = dtrace_aggregate_max;
+		break;
+
+	case DTRACEAGG_COUNT:
+		agg->dtag_aggregate = dtrace_aggregate_count;
+		break;
+
+	case DTRACEAGG_QUANTIZE:
+		agg->dtag_aggregate = dtrace_aggregate_quantize;
+		size = (((sizeof (uint64_t) * NBBY) - 1) * 2 + 1) *
+		       sizeof (uint64_t);
+		break;
+
+	case DTRACEAGG_LQUANTIZE: {
+		uint16_t	step = DTRACE_LQUANTIZE_STEP(desc->dtad_arg);
+		uint16_t	levels =
+				DTRACE_LQUANTIZE_LEVELS(desc->dtad_arg);
+
+		agg->dtag_initial = desc->dtad_arg;
+		agg->dtag_aggregate = dtrace_aggregate_lquantize;
+
+		if (step == 0 || levels == 0)
+			goto err;
+
+		size = levels * sizeof (uint64_t) + 3 * sizeof (uint64_t);
+		break;
+	}
+
+	case DTRACEAGG_AVG:
+		agg->dtag_aggregate = dtrace_aggregate_avg;
+		size = sizeof (uint64_t) * 2;
+		break;
+
+	case DTRACEAGG_STDDEV:
+		agg->dtag_aggregate = dtrace_aggregate_stddev;
+		size = sizeof (uint64_t) * 4;
+		break;
+
+	case DTRACEAGG_SUM:
+		agg->dtag_aggregate = dtrace_aggregate_sum;
+		break;
+
+	default:
+		goto err;
+	}
+
+	agg->dtag_action.dta_rec.dtrd_size = size;
+
+	if (ntuple == 0)
+		goto err;
+
+	for (act = ecb->dte_action_last; act != NULL; act = act->dta_prev) {
+		if (DTRACEACT_ISAGG(act->dta_kind))
+			break;
+
+		if (--ntuple == 0) {
+			agg->dtag_first = act;
+			goto success;
+		}
+	}
+
+	ASSERT(ntuple != 0);
+err:
+	kfree(agg);
+	return NULL;
+
+success:
+	ASSERT(ecb->dte_action_last != NULL);
+	act = ecb->dte_action_last;
+
+	if (act->dta_kind == DTRACEACT_DIFEXPR) {
+		ASSERT(act->dta_difo != NULL);
+
+		if (act->dta_difo->dtdo_rtype.dtdt_size == 0)
+			agg->dtag_hasarg = 1;
+	}
+
+	/*
+	 * KVH FIXME: I am not too sure this is the best way to handle
+	 * aggregate ids.  Essentially, a 1 byte allocation is performed,
+	 * resulting in a unique virtual address that is converted into an
+	 * integer value and used as id.  On Linux, I believe that this
+	 * technique results in overhead due to the allocation.  I changed this
+	 * to use kmalloc to aovid the vmalloc overhead (since vmalloc aligns
+	 * all allocations on a page boundary).
+	 */
+	aggid = (dtrace_aggid_t)(uintptr_t)kmalloc(1, GFP_KERNEL);
+
+	if (aggid - 1 >= state->dts_naggregations) {
+		dtrace_aggregation_t	**oaggs = state->dts_aggregations;
+		dtrace_aggregation_t	**aggs;
+		int			naggs = state->dts_naggregations << 1;
+		int			onaggs = state->dts_naggregations;
+
+		ASSERT(aggid == state->dts_naggregations + 1);
+
+		if (naggs == 0) {
+			ASSERT(oaggs == NULL);
+
+			naggs = 1;
+		}
+
+		aggs = kzalloc(naggs * sizeof (*aggs), GFP_KERNEL);
+		if (oaggs != NULL) {
+			memcpy(oaggs, aggs, onaggs * sizeof (*aggs));
+			kfree(oaggs);
+		}
+
+		state->dts_aggregations = aggs;
+		state->dts_naggregations = naggs;
+	}
+
+	ASSERT(state->dts_aggregations[aggid - 1] == NULL);
+	state->dts_aggregations[(agg->dtag_id = aggid) - 1] = agg;
+
+	frec = &agg->dtag_first->dta_rec;
+	if (frec->dtrd_alignment < sizeof (dtrace_aggid_t))
+		frec->dtrd_alignment = sizeof (dtrace_aggid_t);
+
+	for (act = agg->dtag_first; act != NULL; act = act->dta_next) {
+		ASSERT(!act->dta_intuple);
+
+		act->dta_intuple = 1;
+	}
+
+	return &agg->dtag_action;
+}
+
+void dtrace_ecb_aggregation_destroy(dtrace_ecb_t *ecb, dtrace_action_t *act)
+{
+	dtrace_aggregation_t	*agg = (dtrace_aggregation_t *)act;
+	dtrace_state_t		*state = ecb->dte_state;
+	dtrace_aggid_t		aggid = agg->dtag_id;
+
+	ASSERT(DTRACEACT_ISAGG(act->dta_kind));
+	kfree(state->dts_aggid_arena);
+
+	ASSERT(state->dts_aggregations[aggid - 1] == agg);
+	state->dts_aggregations[aggid - 1] = NULL;
+
+	kfree(agg);
+}
+
+static int dtrace_ecb_action_add(dtrace_ecb_t *ecb, dtrace_actdesc_t *desc)
+{
+	dtrace_action_t		*action, *last;
+	dtrace_difo_t		*dp = desc->dtad_difo;
+	uint32_t		size = 0, align = sizeof (uint8_t), mask;
+	uint16_t		format = 0;
+	dtrace_recdesc_t	*rec;
+	dtrace_state_t		*state = ecb->dte_state;
+	dtrace_optval_t		*opt = state->dts_options, nframes, strsize;
+	uint64_t		arg = desc->dtad_arg;
+
+	ASSERT(mutex_is_locked(&dtrace_lock));
+	ASSERT(ecb->dte_action == NULL || ecb->dte_action->dta_refcnt == 1);
+
+	if (DTRACEACT_ISAGG(desc->dtad_kind)) {
+		dtrace_action_t	*act;
+
+		for (act = ecb->dte_action; act != NULL; act = act->dta_next) {
+			if (act->dta_kind == DTRACEACT_COMMIT)
+				return -EINVAL;
+
+			if (act->dta_kind == DTRACEACT_SPECULATE)
+				return -EINVAL;
+		}
+
+		action = dtrace_ecb_aggregation_create(ecb, desc);
+		if (action == NULL)
+			return -EINVAL;
+	} else {
+		if (DTRACEACT_ISDESTRUCTIVE(desc->dtad_kind) ||
+		    (desc->dtad_kind == DTRACEACT_DIFEXPR &&
+		     dp != NULL && dp->dtdo_destructive))
+			state->dts_destructive = 1;
+
+		switch (desc->dtad_kind) {
+		case DTRACEACT_PRINTF:
+		case DTRACEACT_PRINTA:
+		case DTRACEACT_SYSTEM:
+		case DTRACEACT_FREOPEN:
+			if ((void *)(uintptr_t)arg == NULL) {
+				ASSERT(desc->dtad_kind == DTRACEACT_PRINTA);
+	
+				format = 0;
+			} else {
+				ASSERT((void *)(uintptr_t)arg != NULL);
+#ifdef FIXME
+				ASSERT(arg > KERNELBASE);
+#endif
+
+				format = dtrace_format_add(
+						state, (char *)(uintptr_t)arg);
+			}
+
+		case DTRACEACT_LIBACT:
+		case DTRACEACT_DIFEXPR:
+			if (dp == NULL)
+				return -EINVAL;
+
+			if ((size = dp->dtdo_rtype.dtdt_size) != 0)
+				break;
+
+			if (dp->dtdo_rtype.dtdt_kind == DIF_TYPE_STRING) {
+				if (!(dp->dtdo_rtype.dtdt_flags & DIF_TF_BYREF))
+					return -EINVAL;
+
+				size = opt[DTRACEOPT_STRSIZE];
+			}
+
+			break;
+
+		case DTRACEACT_STACK:
+			if ((nframes = arg) == 0) {
+				nframes = opt[DTRACEOPT_STACKFRAMES];
+
+				ASSERT(nframes > 0);
+
+				arg = nframes;
+			}
+
+			size = nframes * sizeof (pc_t);
+			break;
+
+		case DTRACEACT_JSTACK:
+			if ((strsize = DTRACE_USTACK_STRSIZE(arg)) == 0)
+				strsize = opt[DTRACEOPT_JSTACKSTRSIZE];
+
+			if ((nframes = DTRACE_USTACK_NFRAMES(arg)) == 0)
+				nframes = opt[DTRACEOPT_JSTACKFRAMES];
+
+			arg = DTRACE_USTACK_ARG(nframes, strsize);
+
+		case DTRACEACT_USTACK:
+			if (desc->dtad_kind != DTRACEACT_JSTACK &&
+			    (nframes = DTRACE_USTACK_NFRAMES(arg)) == 0) {
+				strsize = DTRACE_USTACK_STRSIZE(arg);
+				nframes = opt[DTRACEOPT_USTACKFRAMES];
+
+				ASSERT(nframes > 0);
+
+				arg = DTRACE_USTACK_ARG(nframes, strsize);
+			}
+
+			size = (nframes + 1) * sizeof (uint64_t);
+			size += DTRACE_USTACK_STRSIZE(arg);
+			size = P2ROUNDUP(size, (uint32_t)(sizeof (uintptr_t)));
+
+			break;
+
+		case DTRACEACT_SYM:
+		case DTRACEACT_MOD:
+			if (dp == NULL || ((size = dp->dtdo_rtype.dtdt_size) !=
+					   sizeof (uint64_t)) ||
+			    (dp->dtdo_rtype.dtdt_flags & DIF_TF_BYREF))
+				return -EINVAL;
+
+			break;
+
+		case DTRACEACT_USYM:
+		case DTRACEACT_UMOD:
+		case DTRACEACT_UADDR:
+			if (dp == NULL ||
+			    (dp->dtdo_rtype.dtdt_size != sizeof (uint64_t)) ||
+			    (dp->dtdo_rtype.dtdt_flags & DIF_TF_BYREF))
+				return -EINVAL;
+
+			size = 2 * sizeof (uint64_t);
+
+			break;
+
+		case DTRACEACT_STOP:
+		case DTRACEACT_BREAKPOINT:
+		case DTRACEACT_PANIC:
+			break;
+
+		case DTRACEACT_CHILL:
+		case DTRACEACT_DISCARD:
+		case DTRACEACT_RAISE:
+			if (dp == NULL)
+				return -EINVAL;
+
+			break;
+
+		case DTRACEACT_EXIT:
+			if (dp == NULL || (size = dp->dtdo_rtype.dtdt_size) !=
+					   sizeof (int) ||
+			    (dp->dtdo_rtype.dtdt_flags & DIF_TF_BYREF))
+				return -EINVAL;
+
+			break;
+
+		case DTRACEACT_SPECULATE:
+			if (ecb->dte_size > sizeof (dtrace_epid_t))
+				return -EINVAL;
+
+			if (dp == NULL)
+				return -EINVAL;
+
+			state->dts_speculates = 1;
+
+			break;
+
+		case DTRACEACT_COMMIT: {
+			dtrace_action_t	*act = ecb->dte_action;
+
+			for (; act != NULL; act = act->dta_next) {
+				if (act->dta_kind == DTRACEACT_COMMIT)
+					return -EINVAL;
+			}
+
+			if (dp == NULL)
+				return -EINVAL;
+
+			break;
+		}
+
+		default:
+			return -EINVAL;
+		}
+
+		if (size != 0 || desc->dtad_kind == DTRACEACT_SPECULATE) {
+			dtrace_action_t	*act = ecb->dte_action;
+
+			for (; act != NULL; act = act->dta_next) {
+				if (act->dta_kind == DTRACEACT_COMMIT)
+					return -EINVAL;
+			}
+		}
+
+		action = kzalloc(sizeof (dtrace_action_t), GFP_KERNEL);
+		action->dta_rec.dtrd_size = size;
+	}
+
+	action->dta_refcnt = 1;
+	rec = &action->dta_rec;
+	size = rec->dtrd_size;
+
+	for (mask = sizeof (uint64_t) - 1; size != 0 && mask > 0; mask >>= 1) {
+		if (!(size & mask)) {
+			align = mask + 1;
+
+			break;
+		}
+	}
+
+	action->dta_kind = desc->dtad_kind;
+
+	if ((action->dta_difo = dp) != NULL)
+		dtrace_difo_hold(dp);
+
+	rec->dtrd_action = action->dta_kind;
+	rec->dtrd_arg = arg;
+	rec->dtrd_uarg = desc->dtad_uarg;
+	rec->dtrd_alignment = (uint16_t)align;
+	rec->dtrd_format = format;
+
+	if ((last = ecb->dte_action_last) != NULL) {
+		ASSERT(ecb->dte_action != NULL);
+
+		action->dta_prev = last;
+		last->dta_next = action;
+	} else {
+		ASSERT(ecb->dte_action == NULL);
+
+		ecb->dte_action = action;
+	}
+
+	ecb->dte_action_last = action;
+
+	return 0;
+}
+
+static void dtrace_ecb_action_remove(dtrace_ecb_t *ecb)
+{
+	dtrace_action_t	*act = ecb->dte_action, *next;
+	dtrace_vstate_t	*vstate = &ecb->dte_state->dts_vstate;
+	dtrace_difo_t	*dp;
+	uint16_t	format;
+
+	if (act != NULL && act->dta_refcnt > 1) {
+		ASSERT(act->dta_next == NULL || act->dta_next->dta_refcnt == 1);
+
+		act->dta_refcnt--;
+	} else {
+		for (; act != NULL; act = next) {
+			next = act->dta_next;
+			ASSERT(next != NULL || act == ecb->dte_action_last);
+			ASSERT(act->dta_refcnt == 1);
+
+			if ((format = act->dta_rec.dtrd_format) != 0)
+				dtrace_format_remove(ecb->dte_state, format);
+
+			if ((dp = act->dta_difo) != NULL)
+				dtrace_difo_release(dp, vstate);
+
+			if (DTRACEACT_ISAGG(act->dta_kind))
+				dtrace_ecb_aggregation_destroy(ecb, act);
+			else
+				kfree(act);
+		}
+	}
+
+	ecb->dte_action = NULL;
+	ecb->dte_action_last = NULL;
+	ecb->dte_size = sizeof (dtrace_epid_t);
+}
+
+/*
+ * Disable the ECB by removing it from its probe.
+ */
+void dtrace_ecb_disable(dtrace_ecb_t *ecb)
+{
+	dtrace_ecb_t	*pecb, *prev = NULL;
+	dtrace_probe_t	*probe = ecb->dte_probe;
+
+	ASSERT(mutex_is_locked(&dtrace_lock));
+
+	if (probe == NULL)
+		return;
+
+	for (pecb = probe->dtpr_ecb; pecb != NULL; pecb = pecb->dte_next) {
+		if (pecb == ecb)
+			break;
+
+		prev = pecb;
+	}
+
+	ASSERT(pecb != NULL);
+
+	if (prev == NULL)
+		probe->dtpr_ecb = ecb->dte_next;
+	else
+		prev->dte_next = ecb->dte_next;
+
+	if (ecb == probe->dtpr_ecb_last) {
+		ASSERT(ecb->dte_next == NULL);
+		probe->dtpr_ecb_last = prev;
+	}
+
+	/*
+	 * The ECB has been disconnected from the probe; now sync to assure
+	 * that all CPUs have seen the change before returning.
+	 */
+	dtrace_sync();
+
+	if (probe->dtpr_ecb == NULL) {
+		/*
+		 * That was the last ECB on the probe; clear the predicate
+		 * cache ID for the probe, disable it and sync one more time
+		 * to assure that we'll never hit it again.
+		 */
+		dtrace_provider_t	*prov = probe->dtpr_provider;
+
+		ASSERT(ecb->dte_next == NULL);
+		ASSERT(probe->dtpr_ecb_last == NULL);
+
+		probe->dtpr_predcache = DTRACE_CACHEIDNONE;
+		prov->dtpv_pops.dtps_disable(prov->dtpv_arg,
+		probe->dtpr_id, probe->dtpr_arg);
+
+		dtrace_sync();
+	} else {
+		/*
+		 * There is at least one ECB remaining on the probe.  If there
+		 * is _exactly_ one, set the probe's predicate cache ID to be
+		 * the predicate cache ID of the remaining ECB.
+		 */
+		ASSERT(probe->dtpr_ecb_last != NULL);
+		ASSERT(probe->dtpr_predcache == DTRACE_CACHEIDNONE);
+
+		if (probe->dtpr_ecb == probe->dtpr_ecb_last) {
+			dtrace_predicate_t	*p =
+						probe->dtpr_ecb->dte_predicate;
+
+			ASSERT(probe->dtpr_ecb->dte_next == NULL);
+
+			if (p != NULL)
+				probe->dtpr_predcache = p->dtp_cacheid;
+		}
+
+		ecb->dte_next = NULL;
+	}
+}
+
+static dtrace_ecb_t *dtrace_ecb_add(dtrace_state_t *state,
+				    dtrace_probe_t *probe)
+{
+	dtrace_ecb_t	*ecb;
+	dtrace_epid_t	epid;
+
+	ASSERT(mutex_is_locked(&dtrace_lock));
+
+	ecb = kzalloc(sizeof (dtrace_ecb_t), GFP_KERNEL);
+	ecb->dte_predicate = NULL;
+	ecb->dte_probe = probe;
+	ecb->dte_size = ecb->dte_needed = sizeof (dtrace_epid_t);
+	ecb->dte_alignment = sizeof (dtrace_epid_t);
+
+	epid = state->dts_epid++;
+
+	if (epid - 1 >= state->dts_necbs) {
+		dtrace_ecb_t	**oecbs = state->dts_ecbs, **ecbs;
+		int		necbs = state->dts_necbs << 1;
+
+		ASSERT(epid == state->dts_necbs + 1);
+
+		if (necbs == 0) {
+			ASSERT(oecbs == NULL);
+
+			necbs = 1;
+		}
+
+		ecbs = kcalloc(necbs, sizeof (*ecbs), GFP_KERNEL);
+
+
+		if (oecbs != NULL)
+			memcpy(oecbs, ecbs, state->dts_necbs * sizeof (*ecbs));
+
+		dtrace_membar_producer();
+
+		state->dts_ecbs = ecbs;
+
+		if (oecbs != NULL) {
+			if (state->dts_activity != DTRACE_ACTIVITY_INACTIVE)
+				dtrace_sync();
+
+			kfree(oecbs);
+		}
+
+		dtrace_membar_producer();
+
+		state->dts_necbs = necbs;
+	}
+
+	ecb->dte_state = state;
+
+	ASSERT(state->dts_ecbs[epid - 1] == NULL);
+
+	dtrace_membar_producer();
+
+	state->dts_ecbs[(ecb->dte_epid = epid) - 1] = ecb;
+
+	return ecb;
+}
+
+static dtrace_ecb_t *dtrace_ecb_create(dtrace_state_t *state,
+				       dtrace_probe_t *probe,
+				       dtrace_enabling_t *enab)
+{
+	dtrace_ecb_t		*ecb;
+	dtrace_predicate_t	*pred;
+	dtrace_actdesc_t	*act;
+	dtrace_provider_t	*prov;
+	dtrace_ecbdesc_t	*desc = enab->dten_current;
+
+	ASSERT(mutex_is_locked(&dtrace_lock));
+	ASSERT(state != NULL);
+
+	ecb = dtrace_ecb_add(state, probe);
+	ecb->dte_uarg = desc->dted_uarg;
+
+	if ((pred = desc->dted_pred.dtpdd_predicate) != NULL) {
+		dtrace_predicate_hold(pred);
+		ecb->dte_predicate = pred;
+	}
+
+	if (probe != NULL) {
+		prov = probe->dtpr_provider;
+
+		if (!(state->dts_cred.dcr_visible & DTRACE_CRV_ALLPROC) &&
+		    (prov->dtpv_priv.dtpp_flags & DTRACE_PRIV_USER))
+			ecb->dte_cond |= DTRACE_COND_OWNER;
+
+		if (!(state->dts_cred.dcr_visible & DTRACE_CRV_KERNEL) &&
+		    (prov->dtpv_priv.dtpp_flags & DTRACE_PRIV_KERNEL))
+			ecb->dte_cond |= DTRACE_COND_USERMODE;
+	}
+
+	if (dtrace_ecb_create_cache != NULL) {
+		dtrace_ecb_t	*cached = dtrace_ecb_create_cache;
+		dtrace_action_t	*act = cached->dte_action;
+
+		if (act != NULL) {
+			ASSERT(act->dta_refcnt > 0);
+
+			act->dta_refcnt++;
+			ecb->dte_action = act;
+			ecb->dte_action_last = cached->dte_action_last;
+			ecb->dte_needed = cached->dte_needed;
+			ecb->dte_size = cached->dte_size;
+			ecb->dte_alignment = cached->dte_alignment;
+		}
+
+		return ecb;
+	}
+
+	for (act = desc->dted_action; act != NULL; act = act->dtad_next) {
+		if ((enab->dten_error = dtrace_ecb_action_add(ecb, act)) != 0) {
+			dtrace_ecb_destroy(ecb);
+			return NULL;
+		}
+	}
+
+	dtrace_ecb_resize(ecb);
+
+	return (dtrace_ecb_create_cache = ecb);
+}
+
+int dtrace_ecb_create_enable(dtrace_probe_t *probe, void *arg)
+{
+	dtrace_ecb_t		*ecb;
+	dtrace_enabling_t	*enab = arg;
+	dtrace_state_t		*state = enab->dten_vstate->dtvs_state;
+
+	ASSERT(state != NULL);
+
+	if (probe != NULL && probe->dtpr_gen < enab->dten_probegen)
+		return DTRACE_MATCH_NEXT;
+
+	if ((ecb = dtrace_ecb_create(state, probe, enab)) == NULL)
+		return DTRACE_MATCH_DONE;
+
+	if (dtrace_ecb_enable(ecb) < 0)
+		return DTRACE_MATCH_FAIL;
+
+	return DTRACE_MATCH_NEXT;
+}
+
+void dtrace_ecb_destroy(dtrace_ecb_t *ecb)
+{
+	dtrace_state_t		*state = ecb->dte_state;
+	dtrace_vstate_t		*vstate = &state->dts_vstate;
+	dtrace_predicate_t	*pred;
+	dtrace_epid_t		epid = ecb->dte_epid;
+
+	ASSERT(mutex_is_locked(&dtrace_lock));
+	ASSERT(ecb->dte_next == NULL);
+	ASSERT(ecb->dte_probe == NULL || ecb->dte_probe->dtpr_ecb != ecb);
+
+	if ((pred = ecb->dte_predicate) != NULL)
+		dtrace_predicate_release(pred, vstate);
+
+	dtrace_ecb_action_remove(ecb);
+
+	ASSERT(state->dts_ecbs[epid - 1] == ecb);
+	state->dts_ecbs[epid - 1] = NULL;
+
+	kfree(ecb);
+}
+
+void dtrace_ecb_resize(dtrace_ecb_t *ecb)
+{
+	/* INCOMPLETE */
+}
+
+int dtrace_ecb_enable(dtrace_ecb_t *ecb)
+{
+	dtrace_probe_t	*probe = ecb->dte_probe;
+
+	/* FIXME: ASSERT(mutex_is_locked(&cpu_lock)); */
+	ASSERT(mutex_is_locked(&dtrace_lock));
+	ASSERT(ecb->dte_next == NULL);
+
+	if (probe == NULL)
+		return 0;
+
+	if (probe->dtpr_ecb == NULL) {
+		dtrace_provider_t	*prov = probe->dtpr_provider;
+
+		probe->dtpr_ecb = probe->dtpr_ecb_last = ecb;
+
+
+		if (ecb->dte_predicate != NULL)
+			probe->dtpr_predcache = ecb->dte_predicate->dtp_cacheid;
+
+		return prov->dtpv_pops.dtps_enable(prov->dtpv_arg,
+						   probe->dtpr_id,
+						   probe->dtpr_arg);
+	} else {
+		ASSERT(probe->dtpr_ecb_last != NULL);
+
+		probe->dtpr_ecb_last->dte_next = ecb;
+		probe->dtpr_ecb_last = ecb;
+		probe->dtpr_predcache = 0;
+
+		dtrace_sync();
+
+		return 0;
+	}
+}
+
+dtrace_ecb_t *dtrace_epid2ecb(dtrace_state_t *state, dtrace_epid_t id)
+{
+	dtrace_ecb_t *ecb;
+
+	ASSERT(mutex_is_locked(&dtrace_lock));
+
+	if (id == 0 || id > state->dts_necbs)
+		return NULL;
+
+	ASSERT(state->dts_necbs > 0 && state->dts_ecbs != NULL);
+	ecb = state->dts_ecbs[id - 1];
+	ASSERT(ecb == NULL || ecb->dte_epid == id);
+
+	return ecb;
+}
+
+dtrace_aggregation_t *dtrace_aggid2agg(dtrace_state_t *state,
+				       dtrace_aggid_t id)
+{
+	dtrace_aggregation_t *agg;
+
+	ASSERT(mutex_is_locked(&dtrace_lock));
+
+	if (id == 0 || id > state->dts_naggregations)
+		return (NULL);
+
+	ASSERT(state->dts_naggregations > 0 && state->dts_aggregations != NULL);
+	agg = state->dts_aggregations[id - 1];
+	ASSERT(agg == NULL || agg->dtag_id == id);
+
+	return agg;
+}
diff -urN ../linux-2.6.34/kernel/dtrace/dtrace_enable.c ./kernel/dtrace/dtrace_enable.c
--- ../linux-2.6.34/kernel/dtrace/dtrace_enable.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/dtrace_enable.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,414 @@
+/*
+ * FILE:	dtrace_enable.c
+ * DESCRIPTION:	Dynamic Tracing: enabling functions
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/kernel.h>
+#include <linux/mutex.h>
+#include <linux/slab.h>
+
+#include "dtrace.h"
+
+size_t			dtrace_retain_max = 1024;
+dtrace_enabling_t	*dtrace_retained;
+dtrace_genid_t		dtrace_retained_gen;
+
+dtrace_enabling_t *dtrace_enabling_create(dtrace_vstate_t *vstate)
+{
+	dtrace_enabling_t	*enab;
+
+	enab = kzalloc(sizeof (dtrace_enabling_t), GFP_KERNEL);
+	enab->dten_vstate = vstate;
+
+	return enab;
+}
+
+void dtrace_enabling_add(dtrace_enabling_t *enab, dtrace_ecbdesc_t *ecb)
+{
+	dtrace_ecbdesc_t	**ndesc;
+	size_t			osize, nsize;
+
+	/*
+	 * We can't add to enablings after we've enabled them, or after we've
+	 * retained them.
+	 */
+	ASSERT(enab->dten_probegen == 0);
+	ASSERT(enab->dten_next == NULL && enab->dten_prev == NULL);
+
+	if (enab->dten_ndesc < enab->dten_maxdesc) {
+		enab->dten_desc[enab->dten_ndesc++] = ecb;
+		return;
+	}
+
+	osize = enab->dten_maxdesc * sizeof (dtrace_enabling_t *);
+
+	if (enab->dten_maxdesc == 0)
+		enab->dten_maxdesc = 1;
+	else
+		enab->dten_maxdesc <<= 1;
+
+	ASSERT(enab->dten_ndesc < enab->dten_maxdesc);
+
+	nsize = enab->dten_maxdesc * sizeof (dtrace_enabling_t *);
+	ndesc = kzalloc(nsize, GFP_KERNEL);
+	memcpy(ndesc, enab->dten_desc, osize);
+	kfree(enab->dten_desc);
+
+	enab->dten_desc = ndesc;
+	enab->dten_desc[enab->dten_ndesc++] = ecb;
+}
+
+static void dtrace_enabling_addlike(dtrace_enabling_t *enab,
+				    dtrace_ecbdesc_t *ecb,
+				    dtrace_probedesc_t *pd)
+{
+	dtrace_ecbdesc_t *new;
+	dtrace_predicate_t	*pred;
+	dtrace_actdesc_t	*act;
+
+	/*
+	 * We're going to create a new ECB description that matches the
+	 * specified ECB in every way, but has the specified probe description.
+	 */
+	new = kzalloc(sizeof (dtrace_ecbdesc_t), GFP_KERNEL);
+
+	if ((pred = ecb->dted_pred.dtpdd_predicate) != NULL)
+		dtrace_predicate_hold(pred);
+
+	for (act = ecb->dted_action; act != NULL; act = act->dtad_next)
+		dtrace_actdesc_hold(act);
+
+	new->dted_action = ecb->dted_action;
+	new->dted_pred = ecb->dted_pred;
+	new->dted_probe = *pd;
+	new->dted_uarg = ecb->dted_uarg;
+
+	dtrace_enabling_add(enab, new);
+}
+
+void dtrace_enabling_dump(dtrace_enabling_t *enab)
+{
+	int	i;
+
+	for (i = 0; i < enab->dten_ndesc; i++) {
+		dtrace_probedesc_t	*desc =
+					&enab->dten_desc[i]->dted_probe;
+
+		pr_info("enabling probe %d (%s:%s:%s:%s)",
+			i, desc->dtpd_provider, desc->dtpd_mod,
+			desc->dtpd_func, desc->dtpd_name);
+	}
+}
+
+void dtrace_enabling_destroy(dtrace_enabling_t *enab)
+{
+	int			i;
+	dtrace_ecbdesc_t	*ep;
+	dtrace_vstate_t		*vstate = enab->dten_vstate;
+
+	ASSERT(mutex_is_locked(&dtrace_lock));
+
+	for (i = 0; i < enab->dten_ndesc; i++) {
+		dtrace_actdesc_t	*act, *next;
+		dtrace_predicate_t	*pred;
+
+		ep = enab->dten_desc[i];
+
+		if ((pred = ep->dted_pred.dtpdd_predicate) != NULL)
+			dtrace_predicate_release(pred, vstate);
+
+		for (act = ep->dted_action; act != NULL; act = next) {
+			next = act->dtad_next;
+			dtrace_actdesc_release(act, vstate);
+		}
+
+		kfree(ep);
+	}
+
+	kfree(enab->dten_desc);
+
+	/*
+	 * If this was a retained enabling, decrement the dts_nretained count
+	 * and remove it from the dtrace_retained list.
+	 */
+	if (enab->dten_prev != NULL || enab->dten_next != NULL ||
+	    dtrace_retained == enab) {
+		ASSERT(enab->dten_vstate->dtvs_state != NULL);
+		ASSERT(enab->dten_vstate->dtvs_state->dts_nretained > 0);
+		enab->dten_vstate->dtvs_state->dts_nretained--;
+		dtrace_retained_gen++;
+	}
+
+	if (enab->dten_prev == NULL) {
+		if (dtrace_retained == enab) {
+			dtrace_retained = enab->dten_next;
+
+			if (dtrace_retained != NULL)
+				dtrace_retained->dten_prev = NULL;
+		}
+	} else {
+		ASSERT(enab != dtrace_retained);
+		ASSERT(dtrace_retained != NULL);
+		enab->dten_prev->dten_next = enab->dten_next;
+	}
+
+	if (enab->dten_next != NULL) {
+		ASSERT(dtrace_retained != NULL);
+		enab->dten_next->dten_prev = enab->dten_prev;
+	}
+
+	kfree(enab);
+}
+
+int dtrace_enabling_retain(dtrace_enabling_t *enab)
+{
+	dtrace_state_t	*state;
+
+	ASSERT(mutex_is_locked(&dtrace_lock));
+	ASSERT(enab->dten_next == NULL && enab->dten_prev == NULL);
+	ASSERT(enab->dten_vstate != NULL);
+
+	state = enab->dten_vstate->dtvs_state;
+	ASSERT(state != NULL);
+
+	/*
+	 * We only allow each state to retain dtrace_retain_max enablings.
+	 */
+	if (state->dts_nretained >= dtrace_retain_max)
+		return -ENOSPC;
+
+	state->dts_nretained++;
+	dtrace_retained_gen++;
+
+	if (dtrace_retained == NULL) {
+		dtrace_retained = enab;
+		return 0;
+	}
+
+	enab->dten_next = dtrace_retained;
+	dtrace_retained->dten_prev = enab;
+	dtrace_retained = enab;
+
+	return 0;
+}
+
+int dtrace_enabling_replicate(dtrace_state_t *state, dtrace_probedesc_t *match,
+			      dtrace_probedesc_t *create)
+{
+	dtrace_enabling_t	*new, *enab;
+	int			found = 0, err = -ENOENT;
+
+	ASSERT(mutex_is_locked(&dtrace_lock));
+	ASSERT(strlen(match->dtpd_provider) < DTRACE_PROVNAMELEN);
+	ASSERT(strlen(match->dtpd_mod) < DTRACE_MODNAMELEN);
+	ASSERT(strlen(match->dtpd_func) < DTRACE_FUNCNAMELEN);
+	ASSERT(strlen(match->dtpd_name) < DTRACE_NAMELEN);
+
+	new = dtrace_enabling_create(&state->dts_vstate);
+
+	/*
+	 * Iterate over all retained enablings, looking for enablings that
+	 * match the specified state.
+	 */
+	for (enab = dtrace_retained; enab != NULL; enab = enab->dten_next) {
+		int	i;
+
+		/*
+		 * dtvs_state can only be NULL for helper enablings -- and
+		 * helper enablings can't be retained.
+		 */
+		ASSERT(enab->dten_vstate->dtvs_state != NULL);
+
+		if (enab->dten_vstate->dtvs_state != state)
+			continue;
+
+		/*
+		 * Now iterate over each probe description; we're looking for
+		 * an exact match to the specified probe description.
+		 */
+		for (i = 0; i < enab->dten_ndesc; i++) {
+			dtrace_ecbdesc_t	*ep = enab->dten_desc[i];
+			dtrace_probedesc_t	*pd = &ep->dted_probe;
+
+			if (strcmp(pd->dtpd_provider, match->dtpd_provider))
+				continue;
+
+			if (strcmp(pd->dtpd_mod, match->dtpd_mod))
+				continue;
+
+			if (strcmp(pd->dtpd_func, match->dtpd_func))
+				continue;
+
+			if (strcmp(pd->dtpd_name, match->dtpd_name))
+				continue;
+
+			/*
+			 * We have a winning probe!  Add it to our growing
+			 * enabling.
+			 */
+			found = 1;
+			dtrace_enabling_addlike(new, ep, create);
+		}
+	}
+
+	if (!found || (err = dtrace_enabling_retain(new)) != 0) {
+		dtrace_enabling_destroy(new);
+		return err;
+	}
+
+	return 0;
+}
+
+void dtrace_enabling_retract(dtrace_state_t *state)
+{
+	dtrace_enabling_t	*enab, *next;
+
+	ASSERT(mutex_is_locked(&dtrace_lock));
+
+	/*
+	 * Iterate over all retained enablings, destroy the enablings retained
+	 * for the specified state.
+	 */
+	for (enab = dtrace_retained; enab != NULL; enab = next) {
+		next = enab->dten_next;
+
+		/*
+		 * dtvs_state can only be NULL for helper enablings, and helper
+		 * enablings can't be retained.
+		 */
+		ASSERT(enab->dten_vstate->dtvs_state != NULL);
+
+		if (enab->dten_vstate->dtvs_state == state) {
+			ASSERT(state->dts_nretained > 0);
+			dtrace_enabling_destroy(enab);
+		}
+	}
+
+	ASSERT(state->dts_nretained == 0);
+}
+
+int dtrace_enabling_match(dtrace_enabling_t *enab, int *nmatched)
+{
+	int	i;
+	int	total_matched = 0, matched = 0;
+
+	for (i = 0; i < enab->dten_ndesc; i++) {
+		dtrace_ecbdesc_t	*ep = enab->dten_desc[i];
+
+		enab->dten_current = ep;
+		enab->dten_error = 0;
+
+		if ((matched = dtrace_probe_enable(&ep->dted_probe, enab)) < 0)
+			return -EBUSY;
+
+		total_matched += matched;
+
+		if (enab->dten_error != 0) {
+			if (nmatched == NULL)
+				pr_warning("dtrace_enabling_match() error on %p: %d\n", (void *)ep, enab->dten_error);
+
+			return enab->dten_error;
+		}
+	}
+
+	enab->dten_probegen = dtrace_probegen;
+	if (nmatched != NULL)
+		*nmatched = total_matched;
+
+	return 0;
+}
+
+void dtrace_enabling_matchall(void)
+{
+	dtrace_enabling_t	*enab;
+
+	/* FIXME: mutex_lock(&cpu_lock); */
+	mutex_lock(&dtrace_lock);
+
+	for (enab = dtrace_retained; enab != NULL; enab = enab->dten_next)
+		(void) dtrace_enabling_match(enab, NULL);
+
+	mutex_unlock(&dtrace_lock);
+	/* FIXME: mutex_unlock(&cpu_lock); */
+}
+
+/*
+ * If an enabling is to be enabled without having matched probes (that is, if
+ * dtrace_state_go() is to be called on the underlying dtrace_state_t), the
+ * enabling must be _primed_ by creating an ECB for every ECB description.
+ * This must be done to assure that we know the number of speculations, the
+ * number of aggregations, the minimum buffer size needed, etc. before we
+ * transition out of DTRACE_ACTIVITY_INACTIVE.  To do this without actually
+ * enabling any probes, we create ECBs for every ECB decription, but with a
+ * NULL probe -- which is exactly what this function does.
+ */
+void dtrace_enabling_prime(dtrace_state_t *state)
+{
+	dtrace_enabling_t	*enab;
+	int			i;
+
+	for (enab = dtrace_retained; enab != NULL; enab = enab->dten_next) {
+		ASSERT(enab->dten_vstate->dtvs_state != NULL);
+
+		if (enab->dten_vstate->dtvs_state != state)
+			continue;
+
+		/*
+		 * We don't want to prime an enabling more than once, lest
+		 * we allow a malicious user to induce resource exhaustion.
+		 * (The ECBs that result from priming an enabling aren't
+		 * leaked -- but they also aren't deallocated until the
+		 * consumer state is destroyed.)
+		 */
+		if (enab->dten_primed)
+			continue;
+
+		for (i = 0; i < enab->dten_ndesc; i++) {
+			enab->dten_current = enab->dten_desc[i];
+			dtrace_probe_enable(NULL, enab);
+		}
+
+		enab->dten_primed = 1;
+	}
+}
+
+void dtrace_enabling_provide(dtrace_provider_t *prv)
+{
+	int		all = 0;
+	dtrace_genid_t	gen;
+
+	if (prv == NULL) {
+		all = 1;
+		prv = dtrace_provider;
+	}
+
+	do {
+		dtrace_enabling_t	*enab;
+		void			*parg = prv->dtpv_arg;
+
+retry:
+		gen = dtrace_retained_gen;
+		for (enab = dtrace_retained; enab != NULL;
+		     enab = enab->dten_next) {
+			int	i;
+
+			for (i = 0; i < enab->dten_ndesc; i++) {
+				dtrace_probedesc_t	desc;
+
+				desc = enab->dten_desc[i]->dted_probe;
+				mutex_unlock(&dtrace_lock);
+				prv->dtpv_pops.dtps_provide(parg, &desc);
+				mutex_lock(&dtrace_lock);
+
+				if (gen != dtrace_retained_gen)
+					goto retry;
+			}
+		}
+	} while (all && (prv = prv->dtpv_next) != NULL);
+
+	mutex_unlock(&dtrace_lock);
+	dtrace_probe_provide(NULL, all ? NULL : prv);
+	mutex_lock(&dtrace_lock);
+}
diff -urN ../linux-2.6.34/kernel/dtrace/dtrace_fmt.c ./kernel/dtrace/dtrace_fmt.c
--- ../linux-2.6.34/kernel/dtrace/dtrace_fmt.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/dtrace_fmt.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,84 @@
+/*
+ * FILE:	dtrace_fmt.c
+ * DESCRIPTION:	Dynamic Tracing: format functions
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/slab.h>
+
+#include "dtrace.h"
+
+uint16_t dtrace_format_add(dtrace_state_t *state, char *str)
+{
+	char		*fmt, **new;
+	uint16_t	ndx;
+
+	fmt = kstrdup(str, GFP_KERNEL);
+
+	for (ndx = 0; ndx < state->dts_nformats; ndx++) {
+		if (state->dts_formats[ndx] == NULL) {
+			state->dts_formats[ndx] = fmt;
+
+			return ndx + 1;
+		}
+	}
+
+	if (state->dts_nformats == UINT16_MAX) {
+		kfree(fmt);
+
+		return 0;
+	}
+
+	ndx = state->dts_nformats++;
+	new = kmalloc((ndx + 1) * sizeof (char *), GFP_KERNEL);
+
+	if (state->dts_formats != NULL) {
+		ASSERT(ndx != 0);
+		memcpy(new, state->dts_formats, ndx * sizeof (char *));
+		kfree(state->dts_formats);
+	}
+
+	state->dts_formats = new;
+	state->dts_formats[ndx] = fmt;
+
+	return ndx + 1;
+}
+
+void dtrace_format_remove(dtrace_state_t *state, uint16_t format)
+{
+	char	*fmt;
+
+	ASSERT(state->dts_formats != NULL);
+	ASSERT(format <= state->dts_nformats);
+	ASSERT(state->dts_formats[format - 1] != NULL);
+
+	fmt = state->dts_formats[format - 1];
+	kfree(fmt);
+	state->dts_formats[format - 1] = NULL;
+}
+
+void dtrace_format_destroy(dtrace_state_t *state)
+{
+	int	i;
+
+	if (state->dts_nformats == 0) {
+		ASSERT(state->dts_formats == NULL);
+		return;
+	}
+
+	ASSERT(state->dts_formats != NULL);
+
+	for (i = 0; i < state->dts_nformats; i++) {
+		char	*fmt = state->dts_formats[i];
+
+		if (fmt == NULL)
+			continue;
+
+		kfree(fmt);
+	}
+
+	kfree(state->dts_formats);
+	state->dts_nformats = 0;
+	state->dts_formats = NULL;
+}
diff -urN ../linux-2.6.34/kernel/dtrace/dtrace.h ./kernel/dtrace/dtrace.h
--- ../linux-2.6.34/kernel/dtrace/dtrace.h	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/dtrace.h	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,2121 @@
+#ifndef _DTRACE_H_
+#define _DTRACE_H_
+
+#include <linux/clocksource.h>
+#include <linux/cred.h>
+#include <linux/sched.h>
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/stringify.h>
+#include <asm/bitsperlong.h>
+#include <asm/ptrace.h>
+
+#include "cyclic.h"
+
+#define UINT8_MAX		(0xff)
+#define UINT8_MIN		0
+#define UINT16_MAX		(0xffff)
+#define UINT16_MIN		0
+#define UINT32_MAX		(0xffffffff)
+#define UINT32_MIN		0
+#define UINT64_MAX		(~0ULL)
+#define UINT64_MIN		(0)
+#define INT64_MAX		((long long)(~0ULL>>1))
+
+#define NBBY			(__BITS_PER_LONG / sizeof (long))
+
+#define SEC			1
+#define MILLISEC		1000
+#define MICROSEC		1000000
+#define NANOSEC			1000000000
+
+#define DTRACE_CPUALL		-1
+#define DTRACE_IDNONE		0
+#define DTRACE_EPIDNONE		0
+#define DTRACE_AGGIDNONE	0
+#define DTRACE_AGGVARIDNONE	0
+#define DTRACE_CACHEIDNONE	0
+#define DTRACE_PROVNONE		0
+#define DTRACE_METAPROVNONE	0
+#define DTRACE_ARGNONE		-1
+
+#define DTRACE_PROVNAMELEN	64
+#define DTRACE_MODNAMELEN	64
+#define DTRACE_FUNCNAMELEN	128
+#define DTRACE_NAMELEN		64
+#define DTRACE_FULLNAMELEN	(DTRACE_PROVNAMELEN + DTRACE_MODNAMELEN + \
+				 DTRACE_FUNCNAMELEN + DTRACE_NAMELEN + 4)
+#define DTRACE_ARGTYPELEN	128
+
+#define DTRACE_PROBEKEY_MAXDEPTH	8
+
+#define DTRACE_STABILITY_INTERNAL	0
+#define DTRACE_STABILITY_PRIVATE	1
+#define DTRACE_STABILITY_OBSOLETE	2
+#define DTRACE_STABILITY_EXTERNAL	3
+#define DTRACE_STABILITY_UNSTABLE	4
+#define DTRACE_STABILITY_EVOLVING	5
+#define DTRACE_STABILITY_STABLE		6
+#define DTRACE_STABILITY_STANDARD	7
+#define DTRACE_STABILITY_MAX		7
+
+#define DTRACE_CLASS_UNKNOWN	0
+#define DTRACE_CLASS_CPU	1
+#define DTRACE_CLASS_PLATFORM	2
+#define DTRACE_CLASS_GROUP	3
+#define DTRACE_CLASS_ISA	4
+#define DTRACE_CLASS_COMMON	5
+#define DTRACE_CLASS_MAX	5
+
+#define DTRACE_COND_OWNER	0x01
+#define DTRACE_COND_USERMODE	0x02
+
+#define DTRACE_ACCESS_KERNEL	0x1
+
+#define DTRACE_CRA_PROC				0x0001
+#define DTRACE_CRA_PROC_CONTROL			0x0002
+#define DTRACE_CRA_PROC_DESTRUCTIVE_ALLUSER	0x0004
+#define DTRACE_CRA_PROC_DESTRUCTIVE_CREDCHG	0x0010
+#define DTRACE_CRA_KERNEL			0x0020
+#define DTRACE_CRA_KERNEL_DESTRUCTIVE		0x0040
+
+#define DTRACE_CRA_ALL		(DTRACE_CRA_PROC | \
+				 DTRACE_CRA_PROC_CONTROL | \
+				 DTRACE_CRA_PROC_DESTRUCTIVE_ALLUSER | \
+				 DTRACE_CRA_PROC_DESTRUCTIVE_CREDCHG | \
+				 DTRACE_CRA_KERNEL | \
+				 DTRACE_CRA_KERNEL_DESTRUCTIVE)
+
+#define DTRACE_CRV_ALLPROC	0x01
+#define DTRACE_CRV_KERNEL	0x02
+#define DTRACE_CRV_ALL		(DTRACE_CRV_ALLPROC | DTRACE_CRV_KERNEL)
+
+#define DTRACE_MATCH_FAIL	-1
+#define DTRACE_MATCH_NEXT	0
+#define DTRACE_MATCH_DONE	1
+
+#define DTRACE_PRIV_NONE	0x0000
+#define DTRACE_PRIV_KERNEL	0x0001
+#define DTRACE_PRIV_USER	0x0002
+#define DTRACE_PRIV_PROC	0x0004
+#define DTRACE_PRIV_OWNER	0x0008
+#define DTRACE_PRIV_ALL		(DTRACE_PRIV_KERNEL | DTRACE_PRIV_USER | \
+				 DTRACE_PRIV_PROC | DTRACE_PRIV_OWNER)
+
+#define DTRACE_QUANTIZE_NBUCKETS		\
+		(((sizeof (uint64_t) * NBBY) - 1) * 2 + 1)
+
+#define DTRACE_QUANTIZE_ZEROBUCKET	((sizeof (uint64_t) * NBBY) - 1)
+
+#define DTRACE_QUANTIZE_BUCKETVAL(buck)		\
+	(int64_t)((buck) < DTRACE_QUANTIZE_ZEROBUCKET ? \
+		  -(1LL << (DTRACE_QUANTIZE_ZEROBUCKET - 1 - (buck))) : \
+		  (buck) == DTRACE_QUANTIZE_ZEROBUCKET ? 0 : \
+		  1LL << ((buck) - DTRACE_QUANTIZE_ZEROBUCKET - 1))
+
+#define DTRACE_LQUANTIZE_STEPSHIFT	48
+#define DTRACE_LQUANTIZE_STEPMASK	((uint64_t)UINT16_MAX << 48)
+#define DTRACE_LQUANTIZE_LEVELSHIFT	32
+#define DTRACE_LQUANTIZE_LEVELMASK	((uint64_t)UINT16_MAX << 32)
+#define DTRACE_LQUANTIZE_BASESHIFT	0
+#define DTRACE_LQUANTIZE_BASEMASK	UINT32_MAX
+
+#define DTRACE_LQUANTIZE_STEP(x)		\
+		(uint16_t)(((x) & DTRACE_LQUANTIZE_STEPMASK) >> \
+			   DTRACE_LQUANTIZE_STEPSHIFT)
+
+#define DTRACE_LQUANTIZE_LEVELS(x)		\
+		(uint16_t)(((x) & DTRACE_LQUANTIZE_LEVELMASK) >> \
+			   DTRACE_LQUANTIZE_LEVELSHIFT)
+
+#define DTRACE_LQUANTIZE_BASE(x)		\
+		(int32_t)(((x) & DTRACE_LQUANTIZE_BASEMASK) >> \
+			  DTRACE_LQUANTIZE_BASESHIFT)
+
+#define DTRACE_USTACK_NFRAMES(x)	(uint32_t)((x) & UINT32_MAX)
+#define DTRACE_USTACK_STRSIZE(x)	(uint32_t)((x) >> 32)
+#define DTRACE_USTACK_ARG(x, y)		\
+		((((uint64_t)(y)) << 32) | ((x) & UINT32_MAX))
+
+#ifndef CONFIG_64BIT
+# ifndef __LITTLE_ENDIAN
+#  define DTRACE_PTR(type, name)	uint32_t name##pad; type *name
+# else
+#  define DTRACE_PTR(type, name)	type *name; uint32_t name##pad
+# endif
+#else
+# define DTRACE_PTR(type, name)		type *name
+#endif
+
+#define DTRACEACT_NONE			0
+#define DTRACEACT_DIFEXPR		1
+#define DTRACEACT_EXIT			2
+#define DTRACEACT_PRINTF		3
+#define DTRACEACT_PRINTA		4
+#define DTRACEACT_LIBACT		5
+
+#define DTRACEACT_PROC			0x0100
+#define DTRACEACT_USTACK		(DTRACEACT_PROC + 1)
+#define DTRACEACT_JSTACK		(DTRACEACT_PROC + 2)
+#define DTRACEACT_USYM			(DTRACEACT_PROC + 3)
+#define DTRACEACT_UMOD			(DTRACEACT_PROC + 4)
+#define DTRACEACT_UADDR			(DTRACEACT_PROC + 5)
+
+#define DTRACEACT_PROC_DESTRUCTIVE	0x0200
+#define DTRACEACT_STOP			(DTRACEACT_PROC_DESTRUCTIVE + 1)
+#define DTRACEACT_RAISE			(DTRACEACT_PROC_DESTRUCTIVE + 2)
+#define DTRACEACT_SYSTEM		(DTRACEACT_PROC_DESTRUCTIVE + 3)
+#define DTRACEACT_FREOPEN		(DTRACEACT_PROC_DESTRUCTIVE + 4)
+
+#define DTRACEACT_PROC_CONTROL		0x0300
+
+#define DTRACEACT_KERNEL		0x0400
+#define DTRACEACT_STACK			(DTRACEACT_KERNEL + 1)
+#define DTRACEACT_SYM			(DTRACEACT_KERNEL + 2)
+#define DTRACEACT_MOD			(DTRACEACT_KERNEL + 3)
+
+#define DTRACEACT_KERNEL_DESTRUCTIVE	0x0500
+#define DTRACEACT_BREAKPOINT		(DTRACEACT_KERNEL_DESTRUCTIVE + 1)
+#define DTRACEACT_PANIC			(DTRACEACT_KERNEL_DESTRUCTIVE + 2)
+#define DTRACEACT_CHILL			(DTRACEACT_KERNEL_DESTRUCTIVE + 3)
+
+#define DTRACEACT_SPECULATIVE           0x0600
+#define DTRACEACT_SPECULATE		(DTRACEACT_SPECULATIVE + 1)
+#define DTRACEACT_COMMIT		(DTRACEACT_SPECULATIVE + 2)
+#define DTRACEACT_DISCARD		(DTRACEACT_SPECULATIVE + 3)
+
+#define DTRACEACT_AGGREGATION		0x0700
+#define DTRACEAGG_COUNT			(DTRACEACT_AGGREGATION + 1)
+#define DTRACEAGG_MIN			(DTRACEACT_AGGREGATION + 2)
+#define DTRACEAGG_MAX			(DTRACEACT_AGGREGATION + 3)
+#define DTRACEAGG_AVG			(DTRACEACT_AGGREGATION + 4)
+#define DTRACEAGG_SUM			(DTRACEACT_AGGREGATION + 5)
+#define DTRACEAGG_STDDEV		(DTRACEACT_AGGREGATION + 6)
+#define DTRACEAGG_QUANTIZE		(DTRACEACT_AGGREGATION + 7)
+#define DTRACEAGG_LQUANTIZE		(DTRACEACT_AGGREGATION + 8)
+
+#define DTRACEACT_CLASS(x)		((x) & 0xff00)
+
+#define DTRACEACT_ISAGG(x)		\
+		(DTRACEACT_CLASS(x) == DTRACEACT_AGGREGATION)
+
+#define DTRACEACT_ISDESTRUCTIVE(x)	\
+		(DTRACEACT_CLASS(x) == DTRACEACT_PROC_DESTRUCTIVE || \
+		 DTRACEACT_CLASS(x) == DTRACEACT_KERNEL_DESTRUCTIVE)
+
+#define DTRACEACT_ISSPECULATIVE(x)	\
+		(DTRACEACT_CLASS(x) == DTRACEACT_SPECULATIVE)
+
+#define DTRACEACT_ISPRINTFLIKE(x)	\
+		((x) == DTRACEACT_PRINTF || (x) == DTRACEACT_PRINTA || \
+		 (x) == DTRACEACT_SYSTEM || (x) == DTRACEACT_FREOPEN)
+
+/*
+ * DTrace Faults
+ *
+ * The constants below DTRACEFLT_LIBRARY indicate probe processing faults;
+ * constants at or above DTRACEFLT_LIBRARY indicate faults in probe
+ * postprocessing at user-level.  Probe processing faults induce an ERROR
+ * probe and are replicated in unistd.d to allow users' ERROR probes to decode
+ * the error condition using thse symbolic labels.
+ */
+#define DTRACEFLT_UNKNOWN		0	/* Unknown fault */
+#define DTRACEFLT_BADADDR		1	/* Bad address */
+#define DTRACEFLT_BADALIGN		2	/* Bad alignment */
+#define DTRACEFLT_ILLOP			3	/* Illegal operation */
+#define DTRACEFLT_DIVZERO		4	/* Divide-by-zero */
+#define DTRACEFLT_NOSCRATCH		5	/* Out of scratch space */
+#define DTRACEFLT_KPRIV			6	/* Illegal kernel access */
+#define DTRACEFLT_UPRIV			7	/* Illegal user access */
+#define DTRACEFLT_TUPOFLOW		8	/* Tuple stack overflow */
+#define DTRACEFLT_BADSTACK		9	/* Bad stack */
+
+#define DTRACEFLT_LIBRARY		1000	/* Library-level fault */
+
+#define DTRACEOPT_BUFSIZE	0
+#define DTRACEOPT_BUFPOLICY	1
+#define DTRACEOPT_DYNVARSIZE	2
+#define DTRACEOPT_AGGSIZE	3
+#define DTRACEOPT_SPECSIZE	4
+#define DTRACEOPT_NSPEC		5
+#define DTRACEOPT_STRSIZE	6
+#define DTRACEOPT_CLEANRATE	7
+#define DTRACEOPT_CPU		8
+#define DTRACEOPT_BUFRESIZE	9
+#define DTRACEOPT_GRABANON	10
+#define DTRACEOPT_FLOWINDENT	11
+#define DTRACEOPT_QUIET		12
+#define DTRACEOPT_STACKFRAMES	13
+#define DTRACEOPT_USTACKFRAMES	14
+#define DTRACEOPT_AGGRATE	15
+#define DTRACEOPT_SWITCHRATE	16
+#define DTRACEOPT_STATUSRATE	17
+#define DTRACEOPT_DESTRUCTIVE	18
+#define DTRACEOPT_STACKINDENT	19
+#define DTRACEOPT_RAWBYTES	20
+#define DTRACEOPT_JSTACKFRAMES	21
+#define DTRACEOPT_JSTACKSTRSIZE	22
+#define DTRACEOPT_AGGSORTKEY	23
+#define DTRACEOPT_AGGSORTREV	24
+#define DTRACEOPT_AGGSORTPOS	25
+#define DTRACEOPT_AGGSORTKEYPOS	26
+#define DTRACEOPT_MAX		27
+
+#define DTRACEOPT_UNSET		(dtrace_optval_t)-2
+
+#define DTRACEOPT_BUFPOLICY_RING	0
+#define DTRACEOPT_BUFPOLICY_FILL	1
+#define DTRACEOPT_BUFPOLICY_SWITCH	2
+
+#define DTRACEOPT_BUFRESIZE_AUTO	0
+#define DTRACEOPT_BUFRESIZE_MANUAL	1
+
+typedef unsigned char	uchar_t;
+typedef unsigned int	uint_t;
+typedef unsigned long	ulong_t;
+
+typedef long		intptr_t;
+
+typedef uint8_t		dtrace_stability_t;
+typedef uint8_t		dtrace_class_t;
+
+typedef uint16_t	dtrace_actkind_t;
+
+typedef uint32_t	zoneid_t;	/* FIXME */
+typedef uint32_t	dtrace_aggid_t;
+typedef uint32_t	dtrace_cacheid_t;
+typedef uint32_t	dtrace_epid_t;
+typedef uint32_t	dtrace_optid_t;
+typedef uint32_t	dtrace_specid_t;
+typedef uint32_t	processorid_t;
+
+typedef uint64_t	dtrace_aggvarid_t;
+typedef uint64_t	dtrace_genid_t;
+typedef uint64_t	dtrace_optval_t;
+
+typedef enum {
+	TRUE = -1,
+	FALSE = 0
+} boolean_t;
+
+typedef struct cred	cred_t;
+typedef cycle_t		hrtime_t;
+typedef __be32		ipaddr_t;
+
+typedef typeof(((struct pt_regs *)0)->ip)	pc_t;
+
+#define P2ROUNDUP(x, a)	(-(-(x) & -(a)))
+
+typedef struct dtrace_ppriv {
+	uint32_t dtpp_flags;
+	uid_t dtpp_uid;
+	zoneid_t dtpp_zoneid;
+} dtrace_ppriv_t;
+
+typedef struct dtrace_attribute {
+	dtrace_stability_t dtat_name;
+	dtrace_stability_t dtat_data;
+	dtrace_class_t dtat_class;
+} dtrace_attribute_t;
+
+typedef struct dtrace_pattr {
+	dtrace_attribute_t dtpa_provider;
+	dtrace_attribute_t dtpa_mod;
+	dtrace_attribute_t dtpa_func;
+	dtrace_attribute_t dtpa_name;
+	dtrace_attribute_t dtpa_args;
+} dtrace_pattr_t;
+
+typedef struct dtrace_providerdesc {
+	char dtvd_name[DTRACE_PROVNAMELEN];
+	dtrace_pattr_t dtvd_attr;
+	dtrace_ppriv_t dtvd_priv;
+} dtrace_providerdesc_t;
+
+typedef uint32_t dtrace_id_t;
+
+typedef struct dtrace_probedesc {
+	dtrace_id_t dtpd_id;
+	char dtpd_provider[DTRACE_PROVNAMELEN];
+	char dtpd_mod[DTRACE_MODNAMELEN];
+	char dtpd_func[DTRACE_FUNCNAMELEN];
+	char dtpd_name[DTRACE_NAMELEN];
+} dtrace_probedesc_t;
+
+typedef struct dtrace_repldesc {
+	dtrace_probedesc_t dtrpd_match;
+	dtrace_probedesc_t dtrpd_create;
+} dtrace_repldesc_t;
+
+typedef struct dtrace_argdesc {
+	dtrace_id_t dtargd_id;
+	int dtargd_ndx;
+	int dtargd_mapping;
+	char dtargd_native[DTRACE_ARGTYPELEN];
+	char dtargd_xlate[DTRACE_ARGTYPELEN];
+} dtrace_argdesc_t;
+
+typedef struct dtrace_pops {
+	void (*dtps_provide)(void *, const dtrace_probedesc_t *);
+	void (*dtps_provide_module)(void *, struct module *);
+	int (*dtps_enable)(void *, dtrace_id_t, void *);
+	void (*dtps_disable)(void *, dtrace_id_t, void *);
+	void (*dtps_suspend)(void *, dtrace_id_t, void *);
+	void (*dtps_resume)(void *, dtrace_id_t, void *);
+	void (*dtps_getargdesc)(void *, dtrace_id_t, void *,
+				dtrace_argdesc_t *);
+	uint64_t (*dtps_getargval)(void *, dtrace_id_t, void *, int, int);
+	int (*dtps_usermode)(void *, dtrace_id_t, void *);
+	void (*dtps_destroy)(void *, dtrace_id_t, void *);
+} dtrace_pops_t;
+
+typedef struct dtrace_helper_probedesc {
+	char *dthpb_mod;
+	char *dthpb_func;
+	char *dthpb_name;
+	uint64_t dthpb_base;
+	uint32_t *dthpb_offs;
+	uint32_t *dthpb_enoffs;
+	uint32_t dthpb_noffs;
+	uint32_t dthpb_nenoffs;
+	uint8_t *dthpb_args;
+	uint8_t dthpb_xargc;
+	uint8_t dthpb_nargc;
+	char *dthpb_xtypes;
+	char *dthpb_ntypes;
+} dtrace_helper_probedesc_t;
+
+typedef struct dtrace_helper_provdesc {
+	char *dthpv_provname;
+	dtrace_pattr_t dthpv_pattr;
+} dtrace_helper_provdesc_t;
+
+typedef struct dtrace_mops {
+	void (*dtms_create_probe)(void *, void *, dtrace_helper_probedesc_t *);
+	void (*dtms_provide_pid)(void *, dtrace_helper_provdesc_t *, pid_t);
+	void (*dtms_remove_pid)(void *, dtrace_helper_provdesc_t *, pid_t);
+} dtrace_mops_t;
+
+typedef struct dtrace_provider {
+	dtrace_pattr_t dtpv_attr;
+	dtrace_ppriv_t dtpv_priv;
+	dtrace_pops_t dtpv_pops;
+	char *dtpv_name;
+	void *dtpv_arg;
+	uint_t dtpv_defunct;
+	struct dtrace_provider *dtpv_next;
+} dtrace_provider_t;
+
+typedef uint32_t	dif_instr_t;
+
+typedef struct dtrace_diftype {
+	uint8_t dtdt_kind;
+	uint8_t dtdt_ckind;
+	uint8_t dtdt_flags;
+	uint8_t dtdt_pad;
+	uint32_t dtdt_size;
+} dtrace_diftype_t;
+
+typedef struct dtrace_difv {
+	uint32_t dtdv_name;
+	uint32_t dtdv_id;
+	uint8_t dtdv_kind;
+	uint8_t dtdv_scope;
+	uint16_t dtdv_flags;
+	dtrace_diftype_t dtdv_type;
+} dtrace_difv_t;
+
+typedef struct dtrace_difo {
+	dif_instr_t *dtdo_buf;
+	uint64_t *dtdo_inttab;
+	char *dtdo_strtab;
+	dtrace_difv_t *dtdo_vartab;
+	uint_t dtdo_len;
+	uint_t dtdo_intlen;
+	uint_t dtdo_strlen;
+	uint_t dtdo_varlen;
+	dtrace_diftype_t dtdo_rtype;
+	uint_t dtdo_refcnt;
+	uint_t dtdo_destructive;
+#ifndef __KERNEL__
+	dof_relodesc_t *dtdo_kreltab;
+	dof_relodesc_t *dtdo_ureltab;
+	struct dt_node **dtdo_xlmtab;
+	uint_t dtdo_krelen;
+	uint_t dtdo_urelen;
+	uint_t dtdo_xlmlen;
+#endif
+} dtrace_difo_t;
+
+typedef struct dtrace_actdesc {
+	dtrace_difo_t *dtad_difo;
+	struct dtrace_actdesc *dtad_next;
+	dtrace_actkind_t dtad_kind;
+	uint32_t dtad_ntuple;
+	uint64_t dtad_arg;
+	uint64_t dtad_uarg;
+	int dtad_refcnt;
+} dtrace_actdesc_t;
+
+typedef struct dtrace_predicate {
+	dtrace_difo_t *dtp_difo;
+	dtrace_cacheid_t dtp_cacheid;
+	int dtp_refcnt;
+} dtrace_predicate_t;
+
+typedef struct dtrace_preddesc {
+	dtrace_difo_t *dtpdd_difo;
+	dtrace_predicate_t *dtpdd_predicate;
+} dtrace_preddesc_t;
+
+typedef struct dtrace_ecbdesc {
+	dtrace_actdesc_t *dted_action;
+	dtrace_preddesc_t dted_pred;
+	dtrace_probedesc_t dted_probe;
+	uint64_t dted_uarg;
+	int dted_refcnt;
+} dtrace_ecbdesc_t;
+
+typedef struct dtrace_statvar {
+	uint64_t dtsv_data;
+	size_t dtsv_size;
+	int dtsv_refcnt;
+	dtrace_difv_t dtsv_var;
+} dtrace_statvar_t;
+
+typedef struct dtrace_recdesc {
+	dtrace_actkind_t dtrd_action;
+	uint32_t dtrd_size;
+	uint32_t dtrd_offset;
+	uint16_t dtrd_alignment;
+	uint16_t dtrd_format;
+	uint64_t dtrd_arg;
+	uint64_t dtrd_uarg;
+} dtrace_recdesc_t;
+
+typedef struct dtrace_eprobedesc {
+	dtrace_epid_t dtepd_epid;
+	dtrace_id_t dtepd_probeid;
+	uint64_t dtepd_uarg;
+	uint32_t dtepd_size;
+	int dtepd_nrecs;
+	dtrace_recdesc_t dtepd_rec[1];
+} dtrace_eprobedesc_t;
+
+typedef struct dtrace_aggdesc {
+	DTRACE_PTR(char, dtagd_name);
+	dtrace_aggvarid_t dtagd_varid;
+	int dtagd_flags;
+	dtrace_aggid_t dtagd_id;
+	dtrace_epid_t dtagd_epid;
+	uint32_t dtagd_size;
+	int dtagd_nrecs;
+	uint32_t dtagd_pad;
+	dtrace_recdesc_t dtagd_rec[1];
+} dtrace_aggdesc_t;
+
+typedef struct dtrace_action {
+	dtrace_actkind_t dta_kind;
+	uint16_t dta_intuple;
+	uint32_t dta_refcnt;
+	dtrace_difo_t *dta_difo;
+	dtrace_recdesc_t dta_rec;
+	struct dtrace_action *dta_prev;
+	struct dtrace_action *dta_next;
+} dtrace_action_t;
+
+struct dtrace_ecb;
+typedef struct dtrace_ecb	dtrace_ecb_t;
+
+typedef struct dtrace_probe {
+	dtrace_id_t dtpr_id;
+	dtrace_ecb_t *dtpr_ecb;
+	dtrace_ecb_t *dtpr_ecb_last;
+	void *dtpr_arg;
+	dtrace_cacheid_t dtpr_predcache;
+	int dtpr_aframes;
+	dtrace_provider_t *dtpr_provider;
+	char *dtpr_mod;
+	char *dtpr_func;
+	char *dtpr_name;
+	struct dtrace_probe *dtpr_nextmod;
+	struct dtrace_probe *dtpr_prevmod;
+	struct dtrace_probe *dtpr_nextfunc;
+	struct dtrace_probe *dtpr_prevfunc;
+	struct dtrace_probe *dtpr_nextname;
+	struct dtrace_probe *dtpr_prevname;
+	dtrace_genid_t dtpr_gen;
+} dtrace_probe_t;
+
+struct dtrace_state;
+typedef struct dtrace_state	dtrace_state_t;
+
+struct dtrace_ecb {
+	dtrace_epid_t dte_epid;
+	uint32_t dte_alignment;
+	size_t dte_needed;
+	size_t dte_size;
+	dtrace_predicate_t *dte_predicate;
+	dtrace_action_t *dte_action;
+	struct dtrace_ecb *dte_next;
+	dtrace_state_t *dte_state;
+	uint32_t dte_cond;
+	dtrace_probe_t *dte_probe;
+	dtrace_action_t *dte_action_last;
+	uint64_t dte_uarg;
+};
+
+typedef enum dtrace_activity {
+	DTRACE_ACTIVITY_INACTIVE = 0,
+	DTRACE_ACTIVITY_WARMUP,
+	DTRACE_ACTIVITY_ACTIVE,
+	DTRACE_ACTIVITY_DRAINING,
+	DTRACE_ACTIVITY_COOLDOWN,
+	DTRACE_ACTIVITY_STOPPED,
+	DTRACE_ACTIVITY_KILLED
+} dtrace_activity_t;
+
+typedef enum dtrace_dstate_state {
+	DTRACE_DSTATE_CLEAN = 0,
+	DTRACE_DSTATE_EMPTY,
+	DTRACE_DSTATE_DIRTY,
+	DTRACE_DSTATE_RINSING
+} dtrace_dstate_state_t;
+
+typedef struct dtrace_key {
+	uint64_t dttk_value;
+	uint64_t dttk_size;
+} dtrace_key_t;
+
+typedef struct dtrace_tuple {
+	uint32_t dtt_nkeys;
+	uint32_t dtt_pad;
+	dtrace_key_t dtt_key[1];
+} dtrace_tuple_t;
+
+typedef struct dtrace_dynvar {
+	uint64_t dtdv_hashval;
+	struct dtrace_dynvar *dtdv_next;
+	void *dtdv_data;
+	dtrace_tuple_t dtdv_tuple;
+} dtrace_dynvar_t;
+
+typedef enum dtrace_dynvar_op {
+	DTRACE_DYNVAR_ALLOC,
+	DTRACE_DYNVAR_NOALLOC,
+	DTRACE_DYNVAR_DEALLOC
+} dtrace_dynvar_op_t;
+
+typedef struct dtrace_dstate_percpu {
+	dtrace_dynvar_t *dtdsc_free;
+	dtrace_dynvar_t *dtdsc_dirty;
+	dtrace_dynvar_t *dtdsc_rinsing;
+	dtrace_dynvar_t *dtdsc_clean;
+	uint64_t dtdsc_drops;
+	uint64_t dtdsc_dirty_drops;
+	uint64_t dtdsc_rinsing_drops;
+#ifdef CONFIG_64BIT
+	uint64_t dtdsc_pad;
+#else
+	uint64_t dtdsc_pad[2];
+#endif
+} dtrace_dstate_percpu_t;
+
+typedef struct dtrace_dynhash {
+	dtrace_dynvar_t *dtdh_chain;
+	uintptr_t dtdh_lock;
+#ifdef CONFIG_64BIT
+	uintptr_t dtdh_pad[6];
+#else
+	uintptr_t dtdh_pad[14];
+#endif
+} dtrace_dynhash_t;
+
+typedef struct dtrace_dstate {
+	void *dtds_base;
+	size_t dtds_size;
+	size_t dtds_hashsize;
+	size_t dtds_chunksize;
+	dtrace_dynhash_t *dtds_hash;
+	dtrace_dstate_state_t dtds_state;
+	dtrace_dstate_percpu_t *dtds_percpu;
+} dtrace_dstate_t;
+
+typedef struct dtrace_vstate {
+	dtrace_state_t *dtvs_state;
+	dtrace_statvar_t **dtvs_globals;
+	int dtvs_nglobals;
+	dtrace_difv_t *dtvs_tlocals;
+	int dtvs_ntlocals;
+	dtrace_statvar_t **dtvs_locals;
+	int dtvs_nlocals;
+	dtrace_dstate_t dtvs_dynvars;
+} dtrace_vstate_t;
+
+/*
+ * DTrace Machine State
+ *
+ * In the process of processing a fired probe, DTrace needs to track and/or
+ * cache some per-CPU state associated with that particular firing.  This is
+ * state that is always discarded after the probe firing has completed, and
+ * much of it is not specific to any DTrace consumer, remaining valid across
+ * all ECBs.  This state is tracked in the dtrace_mstate structure.
+ */
+#define DTRACE_MSTATE_ARGS		0x00000001
+#define DTRACE_MSTATE_PROBE		0x00000002
+#define DTRACE_MSTATE_EPID		0x00000004
+#define DTRACE_MSTATE_TIMESTAMP		0x00000008
+#define DTRACE_MSTATE_STACKDEPTH	0x00000010
+#define DTRACE_MSTATE_CALLER		0x00000020
+#define DTRACE_MSTATE_IPL		0x00000040
+#define DTRACE_MSTATE_FLTOFFS		0x00000080
+#define DTRACE_MSTATE_WALLTIMESTAMP	0x00000100
+#define DTRACE_MSTATE_USTACKDEPTH	0x00000200
+#define DTRACE_MSTATE_UCALLER		0x00000400
+
+typedef struct dtrace_mstate {
+	uintptr_t dtms_scratch_base;
+	uintptr_t dtms_scratch_ptr;
+	size_t dtms_scratch_size;
+	uint32_t dtms_present;
+	uint64_t dtms_arg[5];
+	dtrace_epid_t dtms_epid;
+	uint64_t dtms_timestamp;
+	hrtime_t dtms_walltimestamp;
+	int dtms_stackdepth;
+	int dtms_ustackdepth;
+	struct dtrace_probe *dtms_probe;
+	uintptr_t dtms_caller;
+	uint64_t dtms_ucaller;
+	int dtms_ipl;
+	int dtms_fltoffs;
+	uintptr_t dtms_strtok;
+	uint32_t dtms_access;
+	dtrace_difo_t *dtms_difo;
+} dtrace_mstate_t;
+
+typedef struct dtrace_buffer {
+	uint64_t dtb_offset;
+	uint64_t dtb_size;
+	uint32_t dtb_flags;
+	uint32_t dtb_drops;
+	caddr_t dtb_tomax;
+	caddr_t dtb_xamot;
+	uint32_t dtb_xamot_flags;
+	uint32_t dtb_xamot_drops;
+	uint64_t dtb_xamot_offset;
+	uint32_t dtb_errors;
+	uint32_t dtb_xamot_errors;
+#ifndef CONFIG_64BIT
+	uint64_t dtb_pad1;
+#endif
+} dtrace_buffer_t;
+
+typedef enum dtrace_speculation_state {
+	DTRACESPEC_INACTIVE = 0,
+	DTRACESPEC_ACTIVE,
+	DTRACESPEC_ACTIVEONE,
+	DTRACESPEC_ACTIVEMANY,
+	DTRACESPEC_COMMITTING,
+	DTRACESPEC_COMMITTINGMANY,
+	DTRACESPEC_DISCARDING
+} dtrace_speculation_state_t;
+
+typedef struct dtrace_speculation {
+	dtrace_speculation_state_t dtsp_state;
+	int dtsp_cleaning;
+	dtrace_buffer_t *dtsp_buffer;
+} dtrace_speculation_t;
+
+typedef struct dtrace_aggregation {
+	dtrace_action_t dtag_action;
+	dtrace_aggid_t dtag_id;
+	dtrace_ecb_t *dtag_ecb;
+	dtrace_action_t *dtag_first;
+	uint32_t dtag_base;
+	uint8_t dtag_hasarg;
+	uint64_t dtag_initial;
+	void (*dtag_aggregate)(uint64_t *, uint64_t, uint64_t);
+} dtrace_aggregation_t;
+
+typedef struct dtrace_cred {
+	const cred_t *dcr_cred;
+	uint8_t dcr_destructive;
+	uint8_t dcr_visible;
+	uint16_t dcr_action;
+} dtrace_cred_t;
+
+struct dtrace_state {
+	dev_t dts_dev;
+	int dts_necbs;
+	dtrace_ecb_t **dts_ecbs;
+	dtrace_epid_t dts_epid;
+	size_t dts_needed;
+	struct dtrace_state *dts_anon;
+	dtrace_activity_t dts_activity;
+	dtrace_vstate_t dts_vstate;
+	dtrace_buffer_t *dts_buffer;
+	dtrace_buffer_t *dts_aggbuffer;
+	dtrace_speculation_t *dts_speculations;
+	int dts_nspeculations;
+	int dts_naggregations;
+	dtrace_aggregation_t **dts_aggregations;
+	void *dts_aggid_arena;	/* NOT USED / FIXME: was vmem_t * */
+	uint64_t dts_errors;
+	uint32_t dts_speculations_busy;
+	uint32_t dts_speculations_unavail;
+	uint32_t dts_stkstroverflows;
+	uint32_t dts_dblerrors;
+	uint32_t dts_reserve;
+	hrtime_t dts_laststatus;
+	cyclic_id_t dts_cleaner;
+	cyclic_id_t dts_deadman;
+	hrtime_t dts_alive;
+	char dts_speculates;
+	char dts_destructive;
+	int dts_nformats;
+	char **dts_formats;
+	dtrace_optval_t dts_options[DTRACEOPT_MAX];
+	dtrace_cred_t dts_cred;
+	size_t dts_nretained;
+};
+
+typedef struct dtrace_enabling {
+	dtrace_ecbdesc_t **dten_desc;
+	int dten_ndesc;
+	int dten_maxdesc;
+	dtrace_vstate_t *dten_vstate;
+	dtrace_genid_t dten_probegen;
+	dtrace_ecbdesc_t *dten_current;
+	int dten_error;
+	int dten_primed;
+	struct dtrace_enabling *dten_prev;
+	struct dtrace_enabling *dten_next;
+} dtrace_enabling_t;
+
+typedef int dtrace_probekey_f(const char *, const char *, int);
+
+typedef struct dtrace_probekey {
+	const char *dtpk_prov;
+	dtrace_probekey_f *dtpk_pmatch;
+	const char *dtpk_mod;
+	dtrace_probekey_f *dtpk_mmatch;
+	const char *dtpk_func;
+	dtrace_probekey_f *dtpk_fmatch;
+	const char *dtpk_name;
+	dtrace_probekey_f *dtpk_nmatch;
+	dtrace_id_t dtpk_id;
+} dtrace_probekey_t;
+
+typedef struct dtrace_hashbucket {
+	struct dtrace_hashbucket *dthb_next;
+	dtrace_probe_t *dthb_chain;
+	int dthb_len;
+} dtrace_hashbucket_t;
+
+typedef struct dtrace_hash {
+	dtrace_hashbucket_t **dth_tab;
+	int dth_size;
+	int dth_mask;
+	int dth_nbuckets;
+	uintptr_t dth_nextoffs;
+	uintptr_t dth_prevoffs;
+	uintptr_t dth_stroffs;
+} dtrace_hash_t;
+
+/*
+ * DTrace supports safe loads from probe context; if the address turns out to
+ * be invalid, a bit will be set by the kernel indicating that DTrace
+ * encountered a memory error, and DTrace will propagate the error to the user
+ * accordingly.  However, there may exist some regions of memory in which an
+ * arbitrary load can change system state, and from which it is impossible to
+ * recover from such a load after it has been attempted.  Examples of this may
+ * include memory in which programmable I/O registers are mapped (for which a
+ * read may have some implications for the device) or (in the specific case of
+ * UltraSPARC-I and -II) the virtual address hole.  The platform is required
+ * to make DTrace aware of these toxic ranges; DTrace will then check that
+ * target addresses are not in a toxic range before attempting to issue a
+ * safe load.
+ */
+typedef struct dtrace_toxrange {
+	uintptr_t dtt_base;
+	uintptr_t dtt_limit;
+} dtrace_toxrange_t;
+
+/*
+ * DTrace Helpers
+ *
+ * In general, DTrace establishes probes in processes and takes actions on
+ * processes without knowing their specific user-level structures.  Instead of
+ * existing in the framework, process-specific knowledge is contained by the
+ * enabling D program -- which can apply process-specific knowledge by making
+ * appropriate use of DTrace primitives like copyin() and copyinstr() to
+ * operate on user-level data.  However, there may exist some specific probes
+ * of particular semantic relevance that the application developer may wish to
+ * explicitly export.  For example, an application may wish to export a probe
+ * at the point that it begins and ends certain well-defined transactions.  In
+ * addition to providing probes, programs may wish to offer assistance for
+ * certain actions.  For example, in highly dynamic environments (e.g., Java),
+ * it may be difficult to obtain a stack trace in terms of meaningful symbol
+ * names (the translation from instruction addresses to corresponding symbol
+ * names may only be possible in situ); these environments may wish to define
+ * a series of actions to be applied in situ to obtain a meaningful stack
+ * trace.
+ *
+ * These two mechanisms -- user-level statically defined tracing and assisting
+ * DTrace actions -- are provided via DTrace _helpers_.  Helpers are specified
+ * via DOF, but unlike enabling DOF, helper DOF may contain definitions of
+ * providers, probes and their arguments.  If a helper wishes to provide
+ * action assistance, probe descriptions and corresponding DIF actions may be
+ * specified in the helper DOF.  For such helper actions, however, the probe
+ * description describes the specific helper:  all DTrace helpers have the
+ * provider name "dtrace" and the module name "helper", and the name of the
+ * helper is contained in the function name (for example, the ustack() helper
+ * is named "ustack").  Any helper-specific name may be contained in the name
+ * (for example, if a helper were to have a constructor, it might be named
+ * "dtrace:helper:<helper>:init").  Helper actions are only called when the
+ * action that they are helping is taken.  Helper actions may only return DIF
+ * expressions, and may only call the following subroutines:
+ *
+ *    alloca()      <= Allocates memory out of the consumer's scratch space
+ *    bcopy()       <= Copies memory to scratch space
+ *    copyin()      <= Copies memory from user-level into consumer's scratch
+ *    copyinto()    <= Copies memory into a specific location in scratch
+ *    copyinstr()   <= Copies a string into a specific location in scratch
+ *
+ * Helper actions may only access the following built-in variables:
+ *
+ *    curthread     <= Current kthread_t pointer
+ *    tid           <= Current thread identifier
+ *    pid           <= Current process identifier
+ *    ppid          <= Parent process identifier
+ *    uid           <= Current user ID
+ *    gid           <= Current group ID
+ *    execname      <= Current executable name
+ *    zonename      <= Current zone name
+ *
+ * Helper actions may not manipulate or allocate dynamic variables, but they
+ * may have clause-local and statically-allocated global variables.  The
+ * helper action variable state is specific to the helper action -- variables
+ * used by the helper action may not be accessed outside of the helper
+ * action, and the helper action may not access variables that like outside
+ * of it.  Helper actions may not load from kernel memory at-large; they are
+ * restricting to loading current user state (via copyin() and variants) and
+ * scratch space.  As with probe enablings, helper actions are executed in
+ * program order.  The result of the helper action is the result of the last
+ * executing helper expression.
+ *
+ * Helpers -- composed of either providers/probes or probes/actions (or both)
+ * -- are added by opening the "helper" minor node, and issuing an ioctl(2)
+ * (DTRACEHIOC_ADDDOF) that specifies the dof_helper_t structure. This
+ * encapsulates the name and base address of the user-level library or
+ * executable publishing the helpers and probes as well as the DOF that
+ * contains the definitions of those helpers and probes.
+ *
+ * The DTRACEHIOC_ADD and DTRACEHIOC_REMOVE are left in place for legacy
+ * helpers and should no longer be used.  No other ioctls are valid on the
+ * helper minor node.
+ */
+typedef struct dof_helper {
+	char dofhp_mod[DTRACE_MODNAMELEN];	/* executable or library name */
+	uint64_t dofhp_addr;			/* base address of object */
+	uint64_t dofhp_dof;			/* address of helper DOF */
+} dof_helper_t;
+
+/*
+ * DTrace Helper Implementation
+ *
+ * A description of the helper architecture may be found in <linux/dtrace.h>.
+ * Each process contains a pointer to its helpers in its dtrace_helpers
+ * member.  This is a pointer to a dtrace_helpers structure, which contains an
+ * array of pointers to dtrace_helper structures, helper variable state (shared
+ * among a process's helpers) and a generation count.  (The generation count is
+ * used to provide an identifier when a helper is added so that it may be
+ * subsequently removed.)  The dtrace_helper structure is self-explanatory,
+ * containing pointers to the objects needed to execute the helper.  Note that
+ * helpers are _duplicated_ across fork(2), and destroyed on exec(2).  No more
+ * than dtrace_helpers_max are allowed per-process.
+ */
+#define DTRACE_HELPER_ACTION_USTACK	0
+#define DTRACE_NHELPER_ACTIONS		1
+
+typedef struct dtrace_helper_action {
+	int dtha_generation;			/* helper action generation */
+	int dtha_nactions;			/* number of actions */
+	dtrace_difo_t *dtha_predicate;		/* helper action predicate */
+	dtrace_difo_t **dtha_actions;		/* array of actions */
+	struct dtrace_helper_action *dtha_next;	/* next helper action */
+} dtrace_helper_action_t;
+
+typedef struct dtrace_helper_provider {
+	int dthp_generation;			/* helper provider generation */
+	uint32_t dthp_ref;			/* reference count */
+	dof_helper_t dthp_prov;			/* DOF w/ provider and probes */
+} dtrace_helper_provider_t;
+
+typedef struct dtrace_helpers {
+	dtrace_helper_action_t **dthps_actions;	/* array of helper actions */
+	dtrace_vstate_t dthps_vstate;	/* helper action var. state */
+	dtrace_helper_provider_t **dthps_provs;	/* array of providers */
+	uint_t dthps_nprovs;			/* count of providers */
+	uint_t dthps_maxprovs;			/* provider array size */
+	int dthps_generation;			/* current generation */
+	pid_t dthps_pid;			/* pid of associated proc */
+	int dthps_deferred;			/* helper in deferred list */
+	struct dtrace_helpers *dthps_next;	/* next pointer */
+	struct dtrace_helpers *dthps_prev;	/* prev pointer */
+} dtrace_helpers_t;
+
+/*
+ * DTrace Helper Action Tracing
+ *
+ * Debugging helper actions can be arduous.  To ease the development and
+ * debugging of helpers, DTrace contains a tracing-framework-within-a-tracing-
+ * framework: helper tracing.  If dtrace_helptrace_enabled is non-zero (which
+ * it is by default on DEBUG kernels), all helper activity will be traced to a
+ * global, in-kernel ring buffer.  Each entry includes a pointer to the specific
+ * helper, the location within the helper, and a trace of all local variables.
+ * The ring buffer may be displayed in a human-readable format with the
+ * ::dtrace_helptrace mdb(1) dcmd.
+ */
+#define DTRACE_HELPTRACE_NEXT	(-1)
+#define DTRACE_HELPTRACE_DONE	(-2)
+#define DTRACE_HELPTRACE_ERR	(-3)
+
+typedef struct dtrace_helptrace {
+	dtrace_helper_action_t  *dtht_helper;	/* helper action */
+	int dtht_where;				/* where in helper action */
+	int dtht_nlocals;			/* number of locals */
+	int dtht_fault;				/* type of fault (if any) */
+	int dtht_fltoffs;			/* DIF offset */
+	uint64_t dtht_illval;			/* faulting value */
+	uint64_t dtht_locals[1];		/* local variables */
+} dtrace_helptrace_t;
+
+extern struct mutex		dtrace_lock;
+extern struct mutex		dtrace_provider_lock;
+extern struct mutex		dtrace_meta_lock;
+
+extern dtrace_genid_t		dtrace_probegen;
+
+extern dtrace_pops_t		dtrace_provider_ops;
+
+extern int			dtrace_opens;
+extern int			dtrace_err_verbose;
+
+extern dtrace_toxrange_t	*dtrace_toxrange;
+extern int			dtrace_toxranges;
+
+extern void dtrace_nullop(void);
+extern int dtrace_enable_nullop(void);
+extern int dtrace_istoxic(uintptr_t, size_t);
+
+/*
+ * DTrace Probe Context Functions
+ */
+#undef ASSERT
+#ifdef DEBUG
+# define ASSERT(x)	((void)((x) || dtrace_assfail(#x, __FILE__, __LINE__)))
+#else
+# define ASSERT(x)	((void)0)
+#endif
+
+extern void dtrace_panic(const char *, ...);
+extern int dtrace_assfail(const char *, const char *, int);
+extern void dtrace_aggregate_min(uint64_t *, uint64_t, uint64_t);
+extern void dtrace_aggregate_max(uint64_t *, uint64_t, uint64_t);
+extern void dtrace_aggregate_quantize(uint64_t *, uint64_t, uint64_t);
+extern void dtrace_aggregate_lquantize(uint64_t *, uint64_t, uint64_t);
+extern void dtrace_aggregate_avg(uint64_t *, uint64_t, uint64_t);
+extern void dtrace_aggregate_stddev(uint64_t *, uint64_t, uint64_t);
+extern void dtrace_aggregate_count(uint64_t *, uint64_t, uint64_t);
+extern void dtrace_aggregate_sum(uint64_t *, uint64_t, uint64_t);
+extern void dtrace_aggregate(dtrace_aggregation_t *, dtrace_buffer_t *,
+			     intptr_t, dtrace_buffer_t *, uint64_t, uint64_t);
+
+/*
+ * DTrace Probe Hashing Functions
+ */
+#define DTRACE_HASHNEXT(hash, probe)	\
+	(dtrace_probe_t **)((uintptr_t)(probe) + (hash)->dth_nextoffs)
+#define DTRACE_HASHPREV(hash, probe)	\
+	(dtrace_probe_t **)((uintptr_t)(probe) + (hash)->dth_prevoffs)
+
+extern dtrace_hash_t *dtrace_hash_create(uintptr_t, uintptr_t, uintptr_t);
+extern void dtrace_hash_add(dtrace_hash_t *, dtrace_probe_t *);
+extern dtrace_probe_t *dtrace_hash_lookup(dtrace_hash_t *, dtrace_probe_t *);
+extern int dtrace_hash_collisions(dtrace_hash_t *, dtrace_probe_t *);
+extern void dtrace_hash_remove(dtrace_hash_t *, dtrace_probe_t *);
+
+/*
+ * DTrace Speculation Functions
+ */
+extern int dtrace_speculation(dtrace_state_t *);
+extern void dtrace_speculation_commit(dtrace_state_t *, processorid_t,
+				      dtrace_specid_t);
+extern void dtrace_speculation_discard(dtrace_state_t *, processorid_t,
+				       dtrace_specid_t);
+extern void dtrace_speculation_clean(dtrace_state_t *);
+extern dtrace_buffer_t *dtrace_speculation_buffer(dtrace_state_t *,
+                                           processorid_t, dtrace_specid_t);
+
+/*
+ * DTrace Non-Probe Context Utility Functions
+ */
+
+/*
+ * DTrace Matching Functions
+ */
+extern dtrace_hash_t		*dtrace_bymod;
+extern dtrace_hash_t		*dtrace_byfunc;
+extern dtrace_hash_t		*dtrace_byname;
+
+extern int dtrace_match_priv(const dtrace_probe_t *, uint32_t, uid_t);
+extern int dtrace_match_probe(const dtrace_probe_t *,
+			      const dtrace_probekey_t *, uint32_t, uid_t);
+extern int dtrace_match(const dtrace_probekey_t *, uint32_t, uid_t,
+			int (*matched)(dtrace_probe_t *, void *), void *);
+extern void dtrace_probekey(const dtrace_probedesc_t *, dtrace_probekey_t *);
+
+/*
+ * DTrace Provider-to-Framework API Functions
+ */
+typedef uintptr_t		dtrace_provider_id_t;
+typedef uintptr_t		dtrace_meta_provider_id_t;
+
+extern dtrace_provider_t	*dtrace_provider;
+
+extern int dtrace_register(const char *, const dtrace_pattr_t *, uint32_t,
+			   cred_t *, const dtrace_pops_t *, void *,
+			   dtrace_provider_id_t *);
+extern int dtrace_unregister(dtrace_provider_id_t);
+
+extern int dtrace_meta_register(const char *, const dtrace_mops_t *, void *,
+				dtrace_meta_provider_id_t *);
+extern int dtrace_meta_unregister(dtrace_meta_provider_id_t);
+
+/*
+ * DTrace Privilege Check Functions
+ */
+extern int dtrace_priv_proc_destructive(dtrace_state_t *);
+extern int dtrace_priv_proc_control(dtrace_state_t *);
+extern int dtrace_priv_proc(dtrace_state_t *);
+extern int dtrace_priv_kernel(dtrace_state_t *);
+
+/*
+ * DTrace Probe Management Functions
+ */
+#define DTRACE_ANCHORED(probe)	((probe)->dtpr_func[0] != '\0')
+#define DTRACE_FLAGS2FLT(flags)						\
+	(((flags) & CPU_DTRACE_BADADDR) ? DTRACEFLT_BADADDR :		\
+	 ((flags) & CPU_DTRACE_ILLOP) ? DTRACEFLT_ILLOP :		\
+	 ((flags) & CPU_DTRACE_DIVZERO) ? DTRACEFLT_DIVZERO :		\
+	 ((flags) & CPU_DTRACE_KPRIV) ? DTRACEFLT_KPRIV :		\
+	 ((flags) & CPU_DTRACE_UPRIV) ? DTRACEFLT_UPRIV :		\
+	 ((flags) & CPU_DTRACE_TUPOFLOW) ?  DTRACEFLT_TUPOFLOW :	\
+	 ((flags) & CPU_DTRACE_BADALIGN) ?  DTRACEFLT_BADALIGN :	\
+	 ((flags) & CPU_DTRACE_NOSCRATCH) ?  DTRACEFLT_NOSCRATCH :	\
+	 ((flags) & CPU_DTRACE_BADSTACK) ?  DTRACEFLT_BADSTACK :	\
+	 DTRACEFLT_UNKNOWN)
+
+
+extern dtrace_id_t dtrace_probe_create(dtrace_provider_id_t, const char *,
+				       const char *, const char *, int,
+				       void *);
+extern int dtrace_probe_enable(const dtrace_probedesc_t *,
+			       dtrace_enabling_t *);
+extern void dtrace_probe_description(const dtrace_probe_t *,
+				     dtrace_probedesc_t *);
+extern void dtrace_probe_provide(dtrace_probedesc_t *, dtrace_provider_t *);
+extern void dtrace_probe(dtrace_id_t, uintptr_t, uintptr_t, uintptr_t,
+			 uintptr_t, uintptr_t);
+extern void dtrace_probe_init(void);
+extern void dtrace_probe_exit(void);
+extern void dtrace_probe_remove_id(dtrace_id_t);
+extern dtrace_probe_t *dtrace_probe_lookup_id(dtrace_id_t);
+extern int dtrace_probe_for_each(int (*)(int, void *, void *), void *);
+
+/*
+ * DTrace DIF Object Functions
+ *
+ * DTrace Intermediate Format (DIF)
+ *
+ * The following definitions describe the DTrace Intermediate Format (DIF), a
+ * a RISC-like instruction set and program encoding used to represent
+ * predicates and actions that can be bound to DTrace probes.  The constants
+ * below defining the number of available registers are suggested minimums; the
+ * compiler should use DTRACEIOC_CONF to dynamically obtain the number of
+ * registers provided by the current DTrace implementation.
+ */
+#define DIF_VERSION_1	1
+#define DIF_VERSION_2	2
+#define DIF_VERSION	DIF_VERSION_2
+#define DIF_DIR_NREGS	8
+#define DIF_DTR_NREGS	8
+
+#define DIF_OP_OR	1		/* or   r1, r2, rd */
+#define DIF_OP_XOR	2		/* xor  r1, r2, rd */
+#define DIF_OP_AND	3		/* and  r1, r2, rd */
+#define DIF_OP_SLL	4		/* sll  r1, r2, rd */
+#define DIF_OP_SRL	5		/* srl  r1, r2, rd */
+#define DIF_OP_SUB	6		/* sub  r1, r2, rd */
+#define DIF_OP_ADD	7		/* add  r1, r2, rd */
+#define DIF_OP_MUL	8		/* mul  r1, r2, rd */
+#define DIF_OP_SDIV	9		/* sdiv r1, r2, rd */
+#define DIF_OP_UDIV	10		/* udiv r1, r2, rd */
+#define DIF_OP_SREM	11		/* srem r1, r2, rd */
+#define DIF_OP_UREM	12		/* urem r1, r2, rd */
+#define DIF_OP_NOT	13		/* not  r1, rd */
+#define DIF_OP_MOV	14		/* mov  r1, rd */
+#define DIF_OP_CMP	15		/* cmp  r1, r2 */
+#define DIF_OP_TST	16		/* tst  r1 */
+#define DIF_OP_BA	17		/* ba   label */
+#define DIF_OP_BE	18		/* be   label */
+#define DIF_OP_BNE	19		/* bne  label */
+#define DIF_OP_BG	20		/* bg   label */
+#define DIF_OP_BGU	21		/* bgu  label */
+#define DIF_OP_BGE	22		/* bge  label */
+#define DIF_OP_BGEU	23		/* bgeu label */
+#define DIF_OP_BL	24		/* bl   label */
+#define DIF_OP_BLU	25		/* blu  label */
+#define DIF_OP_BLE	26		/* ble  label */
+#define DIF_OP_BLEU	27		/* bleu label */
+#define DIF_OP_LDSB	28		/* ldsb [r1], rd */
+#define DIF_OP_LDSH	29		/* ldsh [r1], rd */
+#define DIF_OP_LDSW	30		/* ldsw [r1], rd */
+#define DIF_OP_LDUB	31		/* ldub [r1], rd */
+#define DIF_OP_LDUH	32		/* lduh [r1], rd */
+#define DIF_OP_LDUW	33		/* lduw [r1], rd */
+#define DIF_OP_LDX	34		/* ldx  [r1], rd */
+#define DIF_OP_RET	35		/* ret  rd */
+#define DIF_OP_NOP	36		/* nop */
+#define DIF_OP_SETX	37		/* setx intindex, rd */
+#define DIF_OP_SETS	38		/* sets strindex, rd */
+#define DIF_OP_SCMP	39		/* scmp r1, r2 */
+#define DIF_OP_LDGA	40		/* ldga var, ri, rd */
+#define DIF_OP_LDGS	41		/* ldgs var, rd */
+#define DIF_OP_STGS	42		/* stgs var, rs */
+#define DIF_OP_LDTA	43		/* ldta var, ri, rd */
+#define DIF_OP_LDTS	44		/* ldts var, rd */
+#define DIF_OP_STTS	45		/* stts var, rs */
+#define DIF_OP_SRA	46		/* sra  r1, r2, rd */
+#define DIF_OP_CALL	47		/* call subr, rd */
+#define DIF_OP_PUSHTR	48		/* pushtr type, rs, rr */
+#define DIF_OP_PUSHTV	49		/* pushtv type, rs, rv */
+#define DIF_OP_POPTS	50		/* popts */
+#define DIF_OP_FLUSHTS	51		/* flushts */
+#define DIF_OP_LDGAA	52		/* ldgaa var, rd */
+#define DIF_OP_LDTAA	53		/* ldtaa var, rd */
+#define DIF_OP_STGAA	54		/* stgaa var, rs */
+#define DIF_OP_STTAA	55		/* sttaa var, rs */
+#define DIF_OP_LDLS	56		/* ldls var, rd */
+#define DIF_OP_STLS	57		/* stls var, rs */
+#define DIF_OP_ALLOCS	58		/* allocs r1, rd */
+#define DIF_OP_COPYS	59		/* copys  r1, r2, rd */
+#define DIF_OP_STB	60		/* stb  r1, [rd] */
+#define DIF_OP_STH	61		/* sth  r1, [rd] */
+#define DIF_OP_STW	62		/* stw  r1, [rd] */
+#define DIF_OP_STX	63		/* stx  r1, [rd] */
+#define DIF_OP_ULDSB	64		/* uldsb [r1], rd */
+#define DIF_OP_ULDSH	65		/* uldsh [r1], rd */
+#define DIF_OP_ULDSW	66		/* uldsw [r1], rd */
+#define DIF_OP_ULDUB	67		/* uldub [r1], rd */
+#define DIF_OP_ULDUH	68		/* ulduh [r1], rd */
+#define DIF_OP_ULDUW	69		/* ulduw [r1], rd */
+#define DIF_OP_ULDX	70		/* uldx  [r1], rd */
+#define DIF_OP_RLDSB	71		/* rldsb [r1], rd */
+#define DIF_OP_RLDSH	72		/* rldsh [r1], rd */
+#define DIF_OP_RLDSW	73		/* rldsw [r1], rd */
+#define DIF_OP_RLDUB	74		/* rldub [r1], rd */
+#define DIF_OP_RLDUH	75		/* rlduh [r1], rd */
+#define DIF_OP_RLDUW	76		/* rlduw [r1], rd */
+#define DIF_OP_RLDX	77		/* rldx  [r1], rd */
+#define DIF_OP_XLATE	78		/* xlate xlrindex, rd */
+#define DIF_OP_XLARG	79		/* xlarg xlrindex, rd */
+
+#define DIF_INTOFF_MAX		0xffff
+#define DIF_STROFF_MAX		0xffff
+#define DIF_REGISTER_MAX	0xff
+#define DIF_VARIABLE_MAX	0xffff
+#define DIF_SUBROUTINE_MAX	0xffff
+
+#define DIF_VAR_ARRAY_MIN	0x0000
+#define DIF_VAR_ARRAY_UBASE	0x0080
+#define DIF_VAR_ARRAY_MAX	0x00ff
+
+#define DIF_VAR_OTHER_MIN	0x0100
+#define DIF_VAR_OTHER_UBASE	0x0500
+#define DIF_VAR_OTHER_MAX	0xffff
+
+#define DIF_VAR_ARGS		0x0000
+#define DIF_VAR_REGS		0x0001
+#define DIF_VAR_UREGS		0x0002
+#define DIF_VAR_CURTHREAD	0x0100
+#define DIF_VAR_TIMESTAMP	0x0101
+#define DIF_VAR_VTIMESTAMP	0x0102
+#define DIF_VAR_IPL		0x0103
+#define DIF_VAR_EPID		0x0104
+#define DIF_VAR_ID		0x0105
+#define DIF_VAR_ARG0		0x0106
+#define DIF_VAR_ARG1		0x0107
+#define DIF_VAR_ARG2		0x0108
+#define DIF_VAR_ARG3		0x0109
+#define DIF_VAR_ARG4		0x010a
+#define DIF_VAR_ARG5		0x010b
+#define DIF_VAR_ARG6		0x010c
+#define DIF_VAR_ARG7		0x010d
+#define DIF_VAR_ARG8		0x010e
+#define DIF_VAR_ARG9		0x010f
+#define DIF_VAR_STACKDEPTH	0x0110
+#define DIF_VAR_CALLER		0x0111
+#define DIF_VAR_PROBEPROV	0x0112
+#define DIF_VAR_PROBEMOD	0x0113
+#define DIF_VAR_PROBEFUNC	0x0114
+#define DIF_VAR_PROBENAME	0x0115
+#define DIF_VAR_PID		0x0116
+#define DIF_VAR_TID		0x0117
+#define DIF_VAR_EXECNAME	0x0118
+#define DIF_VAR_ZONENAME	0x0119
+#define DIF_VAR_WALLTIMESTAMP	0x011a
+#define DIF_VAR_USTACKDEPTH	0x011b
+#define DIF_VAR_UCALLER		0x011c
+#define DIF_VAR_PPID		0x011d
+#define DIF_VAR_UID		0x011e
+#define DIF_VAR_GID		0x011f
+#define DIF_VAR_ERRNO		0x0120
+
+#define DIF_SUBR_RAND			0
+#define DIF_SUBR_MUTEX_OWNED		1
+#define DIF_SUBR_MUTEX_OWNER		2
+#define DIF_SUBR_MUTEX_TYPE_ADAPTIVE	3
+#define DIF_SUBR_MUTEX_TYPE_SPIN	4
+#define DIF_SUBR_RW_READ_HELD		5
+#define DIF_SUBR_RW_WRITE_HELD		6
+#define DIF_SUBR_RW_ISWRITER		7
+#define DIF_SUBR_COPYIN			8
+#define DIF_SUBR_COPYINSTR		9
+#define DIF_SUBR_SPECULATION		10
+#define DIF_SUBR_PROGENYOF		11
+#define DIF_SUBR_STRLEN			12
+#define DIF_SUBR_COPYOUT		13
+#define DIF_SUBR_COPYOUTSTR		14
+#define DIF_SUBR_ALLOCA			15
+#define DIF_SUBR_BCOPY			16
+#define DIF_SUBR_COPYINTO		17
+#define DIF_SUBR_MSGDSIZE		18
+#define DIF_SUBR_MSGSIZE		19
+#define DIF_SUBR_GETMAJOR		20
+#define DIF_SUBR_GETMINOR		21
+#define DIF_SUBR_DDI_PATHNAME		22
+#define DIF_SUBR_STRJOIN		23
+#define DIF_SUBR_LLTOSTR		24
+#define DIF_SUBR_BASENAME		25
+#define DIF_SUBR_DIRNAME		26
+#define DIF_SUBR_CLEANPATH		27
+#define DIF_SUBR_STRCHR			28
+#define DIF_SUBR_STRRCHR		29
+#define DIF_SUBR_STRSTR			30
+#define DIF_SUBR_STRTOK			31
+#define DIF_SUBR_SUBSTR			32
+#define DIF_SUBR_INDEX			33
+#define DIF_SUBR_RINDEX			34
+#define DIF_SUBR_HTONS			35
+#define DIF_SUBR_HTONL			36
+#define DIF_SUBR_HTONLL			37
+#define DIF_SUBR_NTOHS			38
+#define DIF_SUBR_NTOHL			39
+#define DIF_SUBR_NTOHLL			40
+#define DIF_SUBR_INET_NTOP		41
+#define DIF_SUBR_INET_NTOA		42
+#define DIF_SUBR_INET_NTOA6		43
+
+#define DIF_SUBR_MAX			43
+
+#define DIF_INSTR_OP(i)			(((i) >> 24) & 0xff)
+#define DIF_INSTR_R1(i)			(((i) >> 16) & 0xff)
+#define DIF_INSTR_R2(i)			(((i) >>  8) & 0xff)
+#define DIF_INSTR_RD(i)			((i) & 0xff)
+#define DIF_INSTR_RS(i)			((i) & 0xff)
+#define DIF_INSTR_LABEL(i)		((i) & 0xffffff)
+#define DIF_INSTR_VAR(i)		(((i) >>  8) & 0xffff)
+#define DIF_INSTR_INTEGER(i)		(((i) >>  8) & 0xffff)
+#define DIF_INSTR_STRING(i)		(((i) >>  8) & 0xffff)
+#define DIF_INSTR_SUBR(i)		(((i) >>  8) & 0xffff)
+#define DIF_INSTR_TYPE(i)		(((i) >> 16) & 0xff)
+#define DIF_INSTR_XLREF(i)		(((i) >>  8) & 0xffff)
+#define DIF_INSTR_FMT(op, r1, r2, d) \
+			(((op) << 24) | ((r1) << 16) | ((r2) << 8) | (d))
+
+#define DIF_INSTR_NOT(r1, d)		(DIF_INSTR_FMT(DIF_OP_NOT, r1, 0, d))
+#define DIF_INSTR_MOV(r1, d)		(DIF_INSTR_FMT(DIF_OP_MOV, r1, 0, d))
+#define DIF_INSTR_CMP(op, r1, r2)	(DIF_INSTR_FMT(op, r1, r2, 0))
+#define DIF_INSTR_TST(r1)		(DIF_INSTR_FMT(DIF_OP_TST, r1, 0, 0))
+#define DIF_INSTR_BRANCH(op, label)	(((op) << 24) | (label))
+#define DIF_INSTR_LOAD(op, r1, d)	(DIF_INSTR_FMT(op, r1, 0, d))
+#define DIF_INSTR_STORE(op, r1, d)	(DIF_INSTR_FMT(op, r1, 0, d))
+#define DIF_INSTR_SETX(i, d)		((DIF_OP_SETX << 24) | ((i) << 8) | (d))
+#define DIF_INSTR_SETS(s, d)		((DIF_OP_SETS << 24) | ((s) << 8) | (d))
+#define DIF_INSTR_RET(d)		(DIF_INSTR_FMT(DIF_OP_RET, 0, 0, d))
+#define DIF_INSTR_NOP			(DIF_OP_NOP << 24)
+#define DIF_INSTR_LDA(op, v, r, d)	(DIF_INSTR_FMT(op, v, r, d))
+#define DIF_INSTR_LDV(op, v, d)		(((op) << 24) | ((v) << 8) | (d))
+#define DIF_INSTR_STV(op, v, rs)	(((op) << 24) | ((v) << 8) | (rs))
+#define DIF_INSTR_CALL(s, d)		((DIF_OP_CALL << 24) | ((s) << 8) | (d))
+#define DIF_INSTR_PUSHTS(op, t, r2, rs)	(DIF_INSTR_FMT(op, t, r2, rs))
+#define DIF_INSTR_POPTS			(DIF_OP_POPTS << 24)
+#define DIF_INSTR_FLUSHTS		(DIF_OP_FLUSHTS << 24)
+#define DIF_INSTR_ALLOCS(r1, d)		(DIF_INSTR_FMT(DIF_OP_ALLOCS, r1, 0, d))
+#define DIF_INSTR_COPYS(r1, r2, d)	(DIF_INSTR_FMT(DIF_OP_COPYS, r1, r2, d))
+#define DIF_INSTR_XLATE(op, r, d)	(((op) << 24) | ((r) << 8) | (d))
+
+#define DIF_REG_R0		0
+
+#define DIF_TYPE_CTF		0
+#define DIF_TYPE_STRING		1
+
+#define DIF_TF_BYREF		0x1
+
+#define DIFV_KIND_ARRAY		0
+#define DIFV_KIND_SCALAR	1
+
+#define DIFV_SCOPE_GLOBAL	0
+#define DIFV_SCOPE_THREAD	1
+#define DIFV_SCOPE_LOCAL	2
+
+#define DIFV_F_REF		0x1
+#define DIFV_F_MOD		0x2
+
+/*
+ * Test whether alloc_sz bytes will fit in the scratch region.  We isolate
+ * alloc_sz on the righthand side of the comparison in order to avoid overflow
+ * or underflow in the comparison with it.  This is simpler than the INRANGE
+ * check above, because we know that the dtms_scratch_ptr is valid in the
+ * range.  Allocations of size zero are allowed.
+ */
+#define DTRACE_INSCRATCH(mstate, alloc_sz) \
+	((mstate)->dtms_scratch_base + (mstate)->dtms_scratch_size - \
+	 (mstate)->dtms_scratch_ptr >= (alloc_sz))
+
+extern uint8_t dtrace_load8(uintptr_t);
+extern uint16_t dtrace_load16(uintptr_t);
+extern uint32_t dtrace_load32(uintptr_t);
+extern uint64_t dtrace_load64(uintptr_t);
+
+extern void dtrace_bzero(void *, size_t);
+
+extern int dtrace_vcanload(void *, dtrace_diftype_t *, dtrace_mstate_t *,
+			   dtrace_vstate_t *);
+
+extern int dtrace_difo_validate(dtrace_difo_t *, dtrace_vstate_t *, uint_t,
+				const cred_t *);
+extern int dtrace_difo_cacheable(dtrace_difo_t *);
+extern void dtrace_difo_hold(dtrace_difo_t *);
+extern void dtrace_difo_init(dtrace_difo_t *, dtrace_vstate_t *);
+extern void dtrace_difo_release(dtrace_difo_t *, dtrace_vstate_t *);
+
+extern uint64_t dtrace_dif_emulate(dtrace_difo_t *, dtrace_mstate_t *,
+				   dtrace_vstate_t *, dtrace_state_t *);
+
+/*
+ * DTrace Format Functions
+ */
+extern uint16_t dtrace_format_add(dtrace_state_t *, char *);
+extern void dtrace_format_remove(dtrace_state_t *, uint16_t);
+extern void dtrace_format_destroy(dtrace_state_t *);
+
+/*
+ * DTrace Predicate Functions
+ */
+extern dtrace_predicate_t *dtrace_predicate_create(dtrace_difo_t *);
+extern void dtrace_predicate_hold(dtrace_predicate_t *);
+extern void dtrace_predicate_release(dtrace_predicate_t *, dtrace_vstate_t *);
+
+/*
+ * DTrace Action Description Functions
+ */
+extern dtrace_actdesc_t *dtrace_actdesc_create(dtrace_actkind_t, uint32_t,
+					       uint64_t, uint64_t);
+extern void dtrace_actdesc_hold(dtrace_actdesc_t *);
+extern void dtrace_actdesc_release(dtrace_actdesc_t *, dtrace_vstate_t *);
+
+/*
+ * DTrace Helper Functions
+ */
+extern uint64_t dtrace_helper(int, dtrace_mstate_t *, dtrace_state_t *,
+			      uint64_t, uint64_t);
+
+/*
+ * DTrace ECB Functions
+ */
+extern dtrace_ecb_t		*dtrace_ecb_create_cache;
+
+extern int dtrace_ecb_create_enable(dtrace_probe_t *, void *);
+extern void dtrace_ecb_disable(dtrace_ecb_t *);
+extern void dtrace_ecb_destroy(dtrace_ecb_t *);
+extern void dtrace_ecb_resize(dtrace_ecb_t *);
+extern int dtrace_ecb_enable(dtrace_ecb_t *);
+extern dtrace_ecb_t *dtrace_epid2ecb(dtrace_state_t *, dtrace_epid_t);
+extern dtrace_aggregation_t *dtrace_aggid2agg(dtrace_state_t *,
+					      dtrace_aggid_t);
+
+/*
+ * DTrace Buffer Functions
+ *
+ * DTrace Buffers
+ *
+ * Principal buffers, aggregation buffers, and speculative buffers are all
+ * managed with the dtrace_buffer structure.  By default, this structure
+ * includes twin data buffers -- dtb_tomax and dtb_xamot -- that serve as the
+ * active and passive buffers, respectively.  For speculative buffers,
+ * dtb_xamot will be NULL; for "ring" and "fill" buffers, dtb_xamot will point
+ * to a scratch buffer.  For all buffer types, the dtrace_buffer structure is
+ * always allocated on a per-CPU basis; a single dtrace_buffer structure is
+ * never shared among CPUs.  (That is, there is never true sharing of the
+ * dtrace_buffer structure; to prevent false sharing of the structure, it must
+ * always be aligned to the coherence granularity -- generally 64 bytes.)
+ *
+ * One of the critical design decisions of DTrace is that a given ECB always
+ * stores the same quantity and type of data.  This is done to assure that the
+ * only metadata required for an ECB's traced data is the EPID.  That is, from
+ * the EPID, the consumer can determine the data layout.  (The data buffer
+ * layout is shown schematically below.)  By assuring that one can determine
+ * data layout from the EPID, the metadata stream can be separated from the
+ * data stream -- simplifying the data stream enormously.
+ *
+ *      base of data buffer --->  +------+--------------------+------+
+ *                                | EPID | data               | EPID |
+ *                                +------+--------+------+----+------+
+ *                                | data          | EPID | data      |
+ *                                +---------------+------+-----------+
+ *                                | data, cont.                      |
+ *                                +------+--------------------+------+
+ *                                | EPID | data               |      |
+ *                                +------+--------------------+      |
+ *                                |                ||                |
+ *                                |                ||                |
+ *                                |                \/                |
+ *                                :                                  :
+ *                                .                                  .
+ *                                .                                  .
+ *                                .                                  .
+ *                                :                                  :
+ *                                |                                  |
+ *     limit of data buffer --->  +----------------------------------+
+ *
+ * When evaluating an ECB, dtrace_probe() determines if the ECB's needs of the
+ * principal buffer (both scratch and payload) exceed the available space.  If
+ * the ECB's needs exceed available space (and if the principal buffer policy
+ * is the default "switch" policy), the ECB is dropped, the buffer's drop count
+ * is incremented, and processing advances to the next ECB.  If the ECB's needs
+ * can be met with the available space, the ECB is processed, but the offset in
+ * the principal buffer is only advanced if the ECB completes processing
+ * without error.
+ *
+ * When a buffer is to be switched (either because the buffer is the principal
+ * buffer with a "switch" policy or because it is an aggregation buffer), a
+ * cross call is issued to the CPU associated with the buffer.  In the cross
+ * call context, interrupts are disabled, and the active and the inactive
+ * buffers are atomically switched.  This involves switching the data pointers,
+ * copying the various state fields (offset, drops, errors, etc.) into their
+ * inactive equivalents, and clearing the state fields.  Because interrupts are
+ * disabled during this procedure, the switch is guaranteed to appear atomic to
+ * dtrace_probe().
+ *
+ * DTrace Ring Buffering
+ *
+ * To process a ring buffer correctly, one must know the oldest valid record.
+ * Processing starts at the oldest record in the buffer and continues until
+ * the end of the buffer is reached.  Processing then resumes starting with
+ * the record stored at offset 0 in the buffer, and continues until the
+ * youngest record is processed.  If trace records are of a fixed-length,
+ * determining the oldest record is trivial:
+ *
+ *   - If the ring buffer has not wrapped, the oldest record is the record
+ *     stored at offset 0.
+ *
+ *   - If the ring buffer has wrapped, the oldest record is the record stored
+ *     at the current offset.
+ *
+ * With variable length records, however, just knowing the current offset
+ * doesn't suffice for determining the oldest valid record:  assuming that one
+ * allows for arbitrary data, one has no way of searching forward from the
+ * current offset to find the oldest valid record.  (That is, one has no way
+ * of separating data from metadata.) It would be possible to simply refuse to
+ * process any data in the ring buffer between the current offset and the
+ * limit, but this leaves (potentially) an enormous amount of otherwise valid
+ * data unprocessed.
+ *
+ * To effect ring buffering, we track two offsets in the buffer:  the current
+ * offset and the _wrapped_ offset.  If a request is made to reserve some
+ * amount of data, and the buffer has wrapped, the wrapped offset is
+ * incremented until the wrapped offset minus the current offset is greater
+ * than or equal to the reserve request.  This is done by repeatedly looking
+ * up the ECB corresponding to the EPID at the current wrapped offset, and
+ * incrementing the wrapped offset by the size of the data payload
+ * corresponding to that ECB.  If this offset is greater than or equal to the
+ * limit of the data buffer, the wrapped offset is set to 0.  Thus, the
+ * current offset effectively "chases" the wrapped offset around the buffer.
+ * Schematically:
+ *
+ *      base of data buffer --->  +------+--------------------+------+
+ *                                | EPID | data               | EPID |
+ *                                +------+--------+------+----+------+
+ *                                | data          | EPID | data      |
+ *                                +---------------+------+-----------+
+ *                                | data, cont.                      |
+ *                                +------+---------------------------+
+ *                                | EPID | data                      |
+ *           current offset --->  +------+---------------------------+
+ *                                | invalid data                     |
+ *           wrapped offset --->  +------+--------------------+------+
+ *                                | EPID | data               | EPID |
+ *                                +------+--------+------+----+------+
+ *                                | data          | EPID | data      |
+ *                                +---------------+------+-----------+
+ *                                :                                  :
+ *                                .                                  .
+ *                                .        ... valid data ...        .
+ *                                .                                  .
+ *                                :                                  :
+ *                                +------+-------------+------+------+
+ *                                | EPID | data        | EPID | data |
+ *                                +------+------------++------+------+
+ *                                | data, cont.       | leftover     |
+ *     limit of data buffer --->  +-------------------+--------------+
+ *
+ * If the amount of requested buffer space exceeds the amount of space
+ * available between the current offset and the end of the buffer:
+ *
+ *  (1)  all words in the data buffer between the current offset and the limit
+ *       of the data buffer (marked "leftover", above) are set to
+ *       DTRACE_EPIDNONE
+ *
+ *  (2)  the wrapped offset is set to zero
+ *
+ *  (3)  the iteration process described above occurs until the wrapped offset
+ *       is greater than the amount of desired space.
+ *
+ * The wrapped offset is implemented by (re-)using the inactive offset.
+ * In a "switch" buffer policy, the inactive offset stores the offset in
+ * the inactive buffer; in a "ring" buffer policy, it stores the wrapped
+ * offset.
+ *
+ * DTrace Scratch Buffering
+ *
+ * Some ECBs may wish to allocate dynamically-sized temporary scratch memory.
+ * To accommodate such requests easily, scratch memory may be allocated in
+ * the buffer beyond the current offset plus the needed memory of the current
+ * ECB.  If there isn't sufficient room in the buffer for the requested amount
+ * of scratch space, the allocation fails and an error is generated.  Scratch
+ * memory is tracked in the dtrace_mstate_t and is automatically freed when
+ * the ECB ceases processing.  Note that ring buffers cannot allocate their
+ * scratch from the principal buffer -- lest they needlessly overwrite older,
+ * valid data.  Ring buffers therefore have their own dedicated scratch buffer
+ * from which scratch is allocated.
+ */
+
+#define DTRACEBUF_RING		0x0001		/* bufpolicy set to "ring" */
+#define DTRACEBUF_FILL		0x0002		/* bufpolicy set to "fill" */
+#define DTRACEBUF_NOSWITCH	0x0004		/* do not switch buffer */
+#define DTRACEBUF_WRAPPED	0x0008		/* ring buffer has wrapped */
+#define DTRACEBUF_DROPPED	0x0010		/* drops occurred */
+#define DTRACEBUF_ERROR		0x0020		/* errors occurred */
+#define DTRACEBUF_FULL		0x0040		/* "fill" buffer is full */
+#define DTRACEBUF_CONSUMED	0x0080		/* buffer has been consumed */
+#define DTRACEBUF_INACTIVE	0x0100		/* buffer is not yet active */
+
+#define DTRACE_STORE(type, tomax, offset, what) \
+	*((type *)((uintptr_t)(tomax) + (uintptr_t)offset)) = (type)(what);
+
+extern void dtrace_buffer_activate(dtrace_state_t *);
+extern int dtrace_buffer_alloc(dtrace_buffer_t *, size_t, int, processorid_t);
+extern void dtrace_buffer_drop(dtrace_buffer_t *);
+extern intptr_t dtrace_buffer_reserve(dtrace_buffer_t *, size_t, size_t,
+				      dtrace_state_t *, dtrace_mstate_t *);
+extern void dtrace_buffer_free(dtrace_buffer_t *);
+
+/*
+ * DTrace Enabling Functions
+ */
+extern dtrace_enabling_t	*dtrace_retained;
+extern dtrace_genid_t		dtrace_retained_gen;
+
+extern dtrace_enabling_t *dtrace_enabling_create(dtrace_vstate_t *);
+extern void dtrace_enabling_add(dtrace_enabling_t *, dtrace_ecbdesc_t *);
+extern void dtrace_enabling_dump(dtrace_enabling_t *);
+extern void dtrace_enabling_destroy(dtrace_enabling_t *);
+extern int dtrace_enabling_retain(dtrace_enabling_t *);
+extern int dtrace_enabling_replicate(dtrace_state_t *, dtrace_probedesc_t *,
+				     dtrace_probedesc_t *);
+extern void dtrace_enabling_retract(dtrace_state_t *);
+extern int dtrace_enabling_match(dtrace_enabling_t *, int *);
+extern void dtrace_enabling_matchall(void);
+extern void dtrace_enabling_prime(dtrace_state_t *);
+extern void dtrace_enabling_provide(dtrace_provider_t *);
+
+/*
+ * DTrace DOF Functions
+ */
+
+/*
+ * DTrace Object Format (DOF)
+ *
+ * DTrace programs can be persistently encoded in the DOF format so that they
+ * may be embedded in other programs (for example, in an ELF file) or in the
+ * dtrace driver configuration file for use in anonymous tracing.  The DOF
+ * format is versioned and extensible so that it can be revised and so that
+ * internal data structures can be modified or extended compatibly.  All DOF
+ * structures use fixed-size types, so the 32-bit and 64-bit representations
+ * are identical and consumers can use either data model transparently.
+ *
+ * The file layout is structured as follows:
+ *
+ * +---------------+-------------------+----- ... ----+---- ... ------+
+ * |   dof_hdr_t   |  dof_sec_t[ ... ] |   loadable   | non-loadable  |
+ * | (file header) | (section headers) | section data | section data  |
+ * +---------------+-------------------+----- ... ----+---- ... ------+
+ * |<------------ dof_hdr.dofh_loadsz --------------->|               |
+ * |<------------ dof_hdr.dofh_filesz ------------------------------->|
+ *
+ * The file header stores meta-data including a magic number, data model for
+ * the instrumentation, data encoding, and properties of the DIF code within.
+ * The header describes its own size and the size of the section headers.  By
+ * convention, an array of section headers follows the file header, and then
+ * the data for all loadable sections and unloadable sections.  This permits
+ * consumer code to easily download the headers and all loadable data into the
+ * DTrace driver in one contiguous chunk, omitting other extraneous sections.
+ *
+ * The section headers describe the size, offset, alignment, and section type
+ * for each section.  Sections are described using a set of #defines that tell
+ * the consumer what kind of data is expected.  Sections can contain links to
+ * other sections by storing a dof_secidx_t, an index into the section header
+ * array, inside of the section data structures.  The section header includes
+ * an entry size so that sections with data arrays can grow their structures.
+ *
+ * The DOF data itself can contain many snippets of DIF (i.e. >1 DIFOs), which
+ * are represented themselves as a collection of related DOF sections.  This
+ * permits us to change the set of sections associated with a DIFO over time,
+ * and also permits us to encode DIFOs that contain different sets of sections.
+ * When a DOF section wants to refer to a DIFO, it stores the dof_secidx_t of a
+ * section of type DOF_SECT_DIFOHDR.  This section's data is then an array of
+ * dof_secidx_t's which in turn denote the sections associated with this DIFO.
+ *
+ * This loose coupling of the file structure (header and sections) to the
+ * structure of the DTrace program itself (ECB descriptions, action
+ * descriptions, and DIFOs) permits activities such as relocation processing
+ * to occur in a single pass without having to understand D program structure.
+ *
+ * Finally, strings are always stored in ELF-style string tables along with a
+ * string table section index and string table offset.  Therefore strings in
+ * DOF are always arbitrary-length and not bound to the current implementation.
+ */
+
+#define DOF_ID_SIZE     16      /* total size of dofh_ident[] in bytes */
+
+typedef struct dof_hdr {
+	uint8_t dofh_ident[DOF_ID_SIZE];
+	uint32_t dofh_flags;
+	uint32_t dofh_hdrsize;
+	uint32_t dofh_secsize;
+	uint32_t dofh_secnum;
+	uint64_t dofh_secoff;
+	uint64_t dofh_loadsz;
+	uint64_t dofh_filesz;
+	uint64_t dofh_pad;
+} dof_hdr_t;
+
+#define DOF_ID_MAG0	0
+#define DOF_ID_MAG1	1
+#define DOF_ID_MAG2	2
+#define DOF_ID_MAG3	3
+#define DOF_ID_MODEL	4
+#define DOF_ID_ENCODING	5
+#define DOF_ID_VERSION	6
+#define DOF_ID_DIFVERS	7
+#define DOF_ID_DIFIREG	8
+#define DOF_ID_DIFTREG	9
+#define DOF_ID_PAD	10
+
+#define DOF_MAG_MAG0	0x7F
+#define DOF_MAG_MAG1	'D'
+#define DOF_MAG_MAG2	'O'
+#define DOF_MAG_MAG3	'F'
+
+#define DOF_MAG_STRING	"\177DOF"
+#define DOF_MAG_STRLEN	4
+
+#define DOF_MODEL_NONE	0
+#define DOF_MODEL_ILP32	1
+#define DOF_MODEL_LP64	2
+
+#ifdef CONFIG_64BIT
+#define DOF_MODEL_NATIVE	DOF_MODEL_LP64
+#else
+#define DOF_MODEL_NATIVE	DOF_MODEL_ILP32
+#endif
+
+#define DOF_ENCODE_NONE	0
+#define DOF_ENCODE_LSB	1
+#define DOF_ENCODE_MSB	2
+
+#ifdef _BIG_ENDIAN
+#define DOF_ENCODE_NATIVE	DOF_ENCODE_MSB
+#else
+#define DOF_ENCODE_NATIVE	DOF_ENCODE_LSB
+#endif
+
+#define DOF_VERSION_1	1
+#define DOF_VERSION_2	2
+#define DOF_VERSION	DOF_VERSION_2
+
+#define DOF_FL_VALID	0
+
+typedef uint32_t	dof_secidx_t;
+typedef uint32_t	dof_stridx_t;
+
+#define DOF_SECIDX_NONE	-1U
+#define DOF_STRIDX_NONE	-1U
+
+typedef struct dof_sec {
+	uint32_t dofs_type;
+	uint32_t dofs_align;
+	uint32_t dofs_flags;
+	uint32_t dofs_entsize;
+	uint64_t dofs_offset;
+	uint64_t dofs_size;
+} dof_sec_t;
+
+#define DOF_SECT_NONE		0
+#define DOF_SECT_COMMENTS	1
+#define DOF_SECT_SOURCE		2
+#define DOF_SECT_ECBDESC	3
+#define DOF_SECT_PROBEDESC	4
+#define DOF_SECT_ACTDESC	5
+#define DOF_SECT_DIFOHDR	6
+#define DOF_SECT_DIF		7
+#define DOF_SECT_STRTAB		8
+#define DOF_SECT_VARTAB		9
+#define DOF_SECT_RELTAB		10
+#define DOF_SECT_TYPTAB		11
+#define DOF_SECT_URELHDR	12
+#define DOF_SECT_KRELHDR	13
+#define DOF_SECT_OPTDESC	14
+#define DOF_SECT_PROVIDER	15
+#define DOF_SECT_PROBES		16
+#define DOF_SECT_PRARGS		17
+#define DOF_SECT_PROFFS		18
+#define DOF_SECT_INTTAB		19
+#define DOF_SECT_UTSNAME	20
+#define DOF_SECT_XLTAB		21
+#define DOF_SECT_XLMEMBERS	22
+#define DOF_SECT_XLIMPORT	23
+#define DOF_SECT_XLEXPORT	24
+#define DOF_SECT_PREXPORT	25
+#define DOF_SECT_PRENOFFS       26
+
+#define DOF_SECF_LOAD		1
+
+#define DOF_SEC_ISLOADABLE(x)						      \
+		(((x) == DOF_SECT_ECBDESC) || ((x) == DOF_SECT_PROBEDESC) ||  \
+		((x) == DOF_SECT_ACTDESC) || ((x) == DOF_SECT_DIFOHDR) ||     \
+		((x) == DOF_SECT_DIF) || ((x) == DOF_SECT_STRTAB) ||	      \
+		((x) == DOF_SECT_VARTAB) || ((x) == DOF_SECT_RELTAB) ||	      \
+		((x) == DOF_SECT_TYPTAB) || ((x) == DOF_SECT_URELHDR) ||      \
+		((x) == DOF_SECT_KRELHDR) || ((x) == DOF_SECT_OPTDESC) ||     \
+		((x) == DOF_SECT_PROVIDER) || ((x) == DOF_SECT_PROBES) ||     \
+		((x) == DOF_SECT_PRARGS) || ((x) == DOF_SECT_PROFFS) ||	      \
+		((x) == DOF_SECT_INTTAB) || ((x) == DOF_SECT_XLTAB) ||	      \
+		((x) == DOF_SECT_XLMEMBERS) || ((x) == DOF_SECT_XLIMPORT) ||  \
+		((x) == DOF_SECT_XLIMPORT) || ((x) == DOF_SECT_XLEXPORT) ||   \
+		((x) == DOF_SECT_PREXPORT) || ((x) == DOF_SECT_PRENOFFS))
+
+typedef struct dof_ecbdesc {
+	dof_secidx_t dofe_probes;
+	dof_secidx_t dofe_pred;
+	dof_secidx_t dofe_actions;
+	uint32_t dofe_pad;
+	uint64_t dofe_uarg;
+} dof_ecbdesc_t;
+
+typedef struct dof_probedesc {
+	dof_secidx_t dofp_strtab;
+	dof_stridx_t dofp_provider;
+	dof_stridx_t dofp_mod;
+	dof_stridx_t dofp_func;
+	dof_stridx_t dofp_name;
+	uint32_t dofp_id;
+} dof_probedesc_t;
+
+typedef struct dof_actdesc {
+	dof_secidx_t dofa_difo;
+	dof_secidx_t dofa_strtab;
+	uint32_t dofa_kind;
+	uint32_t dofa_ntuple;
+	uint64_t dofa_arg;
+	uint64_t dofa_uarg;
+} dof_actdesc_t;
+
+typedef struct dof_difohdr {
+	dtrace_diftype_t dofd_rtype;
+	dof_secidx_t dofd_links[1];
+ } dof_difohdr_t;
+
+typedef struct dof_relohdr {
+	dof_secidx_t dofr_strtab;
+	dof_secidx_t dofr_relsec;
+	dof_secidx_t dofr_tgtsec;
+} dof_relohdr_t;
+
+typedef struct dof_relodesc {
+	dof_stridx_t dofr_name;
+	uint32_t dofr_type;
+	uint64_t dofr_offset;
+	uint64_t dofr_data;
+} dof_relodesc_t;
+
+#define DOF_RELO_NONE	0
+#define DOF_RELO_SETX	1
+
+typedef struct dof_optdesc {
+	uint32_t dofo_option;
+	dof_secidx_t dofo_strtab;
+	uint64_t dofo_value;
+} dof_optdesc_t;
+
+typedef uint32_t	dof_attr_t;
+
+#define DOF_ATTR(n, d, c)	(((n) << 24) | ((d) << 16) | ((c) << 8))
+#define DOF_ATTR_NAME(a)	(((a) >> 24) & 0xff)
+#define DOF_ATTR_DATA(a)	(((a) >> 16) & 0xff)
+#define DOF_ATTR_CLASS(a)	(((a) >>  8) & 0xff)
+
+typedef struct dof_provider {
+	dof_secidx_t dofpv_strtab;
+	dof_secidx_t dofpv_probes;
+	dof_secidx_t dofpv_prargs;
+	dof_secidx_t dofpv_proffs;
+	dof_stridx_t dofpv_name;
+	dof_attr_t dofpv_provattr;
+	dof_attr_t dofpv_modattr;
+	dof_attr_t dofpv_funcattr;
+	dof_attr_t dofpv_nameattr;
+	dof_attr_t dofpv_argsattr;
+	dof_secidx_t dofpv_prenoffs;
+} dof_provider_t;
+
+typedef struct dof_probe {
+	uint64_t dofpr_addr;
+	dof_stridx_t dofpr_func;
+	dof_stridx_t dofpr_name;
+	dof_stridx_t dofpr_nargv;
+	dof_stridx_t dofpr_xargv;
+	uint32_t dofpr_argidx;
+	uint32_t dofpr_offidx;
+	uint8_t dofpr_nargc;
+	uint8_t dofpr_xargc;
+	uint16_t dofpr_noffs;
+	uint32_t dofpr_enoffidx;
+	uint16_t dofpr_nenoffs;
+	uint16_t dofpr_pad1;
+	uint32_t dofpr_pad2;
+} dof_probe_t;
+
+typedef struct dof_xlator {
+	dof_secidx_t dofxl_members;
+	dof_secidx_t dofxl_strtab;
+	dof_stridx_t dofxl_argv;
+	uint32_t dofxl_argc;
+	dof_stridx_t dofxl_type;
+	dof_attr_t dofxl_attr;
+} dof_xlator_t;
+
+typedef struct dof_xlmember {
+	dof_secidx_t dofxm_difo;
+	dof_stridx_t dofxm_name;
+	dtrace_diftype_t dofxm_type;
+} dof_xlmember_t;
+
+typedef struct dof_xlref {
+	dof_secidx_t dofxr_xlator;
+	uint32_t dofxr_member;
+	uint32_t dofxr_argn;
+} dof_xlref_t;
+
+extern dof_hdr_t *dtrace_dof_copyin(void __user *, int *);
+extern dof_hdr_t *dtrace_dof_property(const char *);
+extern void dtrace_dof_destroy(dof_hdr_t *);
+extern int dtrace_dof_slurp(dof_hdr_t *, dtrace_vstate_t *, const cred_t *,
+			    dtrace_enabling_t **, uint64_t, int);
+extern int dtrace_dof_options(dof_hdr_t *, dtrace_state_t *);
+
+/*
+ * DTrace Anonymous Enabling Functions
+ */
+typedef struct dtrace_anon {
+	dtrace_state_t *dta_state;
+	dtrace_enabling_t *dta_enabling;
+	processorid_t dta_beganon;
+} dtrace_anon_t;
+
+extern dtrace_anon_t		dtrace_anon;
+
+extern dtrace_state_t *dtrace_anon_grab(void);
+extern void dtrace_anon_property(void);
+
+/*
+ * DTrace Consumer State Functions
+ */
+extern struct kmem_cache	*dtrace_state_cache;
+extern size_t			dtrace_strsize_default;
+
+extern int			dtrace_destructive_disallow;
+
+extern dtrace_id_t		dtrace_probeid_begin;
+extern dtrace_id_t		dtrace_probeid_end;
+extern dtrace_id_t		dtrace_probeid_error;
+
+extern int dtrace_dstate_init(dtrace_dstate_t *, size_t);
+extern void dtrace_dstate_fini(dtrace_dstate_t *);
+extern void dtrace_vstate_fini(dtrace_vstate_t *);
+extern dtrace_state_t *dtrace_state_create(struct file *);
+extern int dtrace_state_go(dtrace_state_t *, processorid_t *);
+extern int dtrace_state_stop(dtrace_state_t *, processorid_t *);
+extern int dtrace_state_option(dtrace_state_t *, dtrace_optid_t,
+			       dtrace_optval_t);
+extern void dtrace_state_destroy(dtrace_state_t *);
+
+/*
+ * DTrace Utility Functions
+ */
+extern int dtrace_strncmp(char *, char *, size_t);
+extern size_t dtrace_strlen(const char *, size_t);
+extern int dtrace_badattr(const dtrace_attribute_t *);
+extern int dtrace_badname(const char *);
+extern void dtrace_cred2priv(const cred_t *, uint32_t *, uid_t *);
+
+#define DT_PROVIDER_MODULE(name)					\
+  static dtrace_provider_id_t name##_id;				\
+									\
+  static int __init name##_init(void)					\
+  {									\
+	int ret = 0;							\
+									\
+	ret = name##_dev_init();					\
+	if (ret)							\
+		goto failed;						\
+									\
+	ret = dtrace_register(__stringify(name), &name##_attr,		\
+			      DTRACE_PRIV_USER, NULL, &name##_pops,	\
+			      NULL, &name##_id);			\
+	if (ret)							\
+		goto failed;						\
+									\
+	return 0;							\
+									\
+  failed:								\
+	return ret;							\
+  }									\
+									\
+  static void __exit name##_exit(void)					\
+  {									\
+	dtrace_unregister(name##_id);					\
+	name##_dev_exit();						\
+  }									\
+									\
+  module_init(name##_init);						\
+  module_exit(name##_exit);
+
+#define dtrace_membar_producer()	mb()
+#define dtrace_membar_consumer()	mb()
+
+typedef uintptr_t	dtrace_icookie_t;
+
+#define DTRACE_CPUFLAG_ISSET(flag) \
+	(cpu_core[smp_processor_id()].cpuc_dtrace_flags & (flag))
+
+#define DTRACE_CPUFLAG_SET(flag) \
+	(cpu_core[smp_processor_id()].cpuc_dtrace_flags |= (flag))
+
+#define DTRACE_CPUFLAG_CLEAR(flag) \
+	(cpu_core[smp_processor_id()].cpuc_dtrace_flags &= ~(flag))
+
+#define CPU_DTRACE_NOFAULT	0x0001
+#define CPU_DTRACE_DROP		0x0002
+#define CPU_DTRACE_BADADDR	0x0004
+#define CPU_DTRACE_BADALIGN	0x0008
+#define CPU_DTRACE_DIVZERO	0x0010
+#define CPU_DTRACE_ILLOP	0x0020
+#define CPU_DTRACE_NOSCRATCH	0x0040
+#define CPU_DTRACE_KPRIV	0x0080
+#define CPU_DTRACE_UPRIV	0x0100
+#define CPU_DTRACE_TUPOFLOW	0x0200
+#define CPU_DTRACE_ENTRY	0x0800
+#define CPU_DTRACE_BADSTACK	0x1000
+
+#define CPU_DTRACE_FAULT	(CPU_DTRACE_BADADDR | CPU_DTRACE_BADALIGN | \
+				 CPU_DTRACE_DIVZERO | CPU_DTRACE_ILLOP | \
+				 CPU_DTRACE_NOSCRATCH | CPU_DTRACE_KPRIV | \
+				 CPU_DTRACE_UPRIV | CPU_DTRACE_TUPOFLOW | \
+				 CPU_DTRACE_BADSTACK)
+#define CPU_DTRACE_ERROR	(CPU_DTRACE_FAULT | CPU_DTRACE_DROP)
+
+#define CPUC_SIZE	(sizeof (uint16_t) + sizeof(uint8_t) + \
+			 sizeof(uintptr_t) + sizeof(struct mutex))
+#define CPUC_PADSIZE	(64 - CPUC_SIZE)
+
+typedef struct cpu_core {
+	uint16_t cpuc_dtrace_flags;
+	uint8_t cpuc_dcpc_intr_state;
+	uint8_t cpuc_pad[CPUC_PADSIZE];
+	uintptr_t cpuc_dtrace_illval;
+	struct mutex cpuc_pid_lock;
+
+	uintptr_t cpu_dtrace_caller;
+	hrtime_t cpu_dtrace_chillmark;
+	hrtime_t cpu_dtrace_chilled;
+} cpu_core_t;
+
+extern cpu_core_t	cpu_core[];
+
+extern void dtrace_sync(void);
+extern void dtrace_toxic_ranges(void (*)(uintptr_t, uintptr_t));
+extern void dtrace_vpanic(const char *, va_list);
+extern int dtrace_getipl(void);
+
+extern hrtime_t dtrace_gethrestime(void);
+extern void dtrace_vtime_enable(void);
+extern void dtrace_vtime_disable(void);
+
+extern hrtime_t dtrace_gethrtime(void);
+
+extern dtrace_icookie_t dtrace_interrupt_disable(void);
+extern void dtrace_interrupt_enable(dtrace_icookie_t);
+
+typedef void 		(*dtrace_xcall_t)(void *);
+
+extern void dtrace_xcall(processorid_t, dtrace_xcall_t, void *);
+
+extern uint8_t dtrace_fuword8(void *);
+extern uint16_t dtrace_fuword16(void *);
+extern uint32_t dtrace_fuword32(void *);
+extern uint64_t dtrace_fuword64(void *);
+
+extern void dtrace_probe_error(dtrace_state_t *, dtrace_epid_t, int, int, int,
+			       uintptr_t);
+
+extern void dtrace_getpcstack(pc_t *, int, int, uint32_t *);
+extern void dtrace_getupcstack(uint64_t *, int);
+extern void dtrace_getufpstack(uint64_t *, uint64_t *, int);
+extern uint64_t dtrace_getarg(int, int);
+extern int dtrace_getstackdepth(int);
+extern int dtrace_getustackdepth(void);
+extern ulong_t dtrace_getreg(struct pt_regs *, uint_t);
+extern void dtrace_copyin(uintptr_t, uintptr_t, size_t, volatile uint16_t *);
+extern void dtrace_copyout(uintptr_t, uintptr_t, size_t, volatile uint16_t *);
+extern void dtrace_copyinstr(uintptr_t, uintptr_t, size_t,
+			     volatile uint16_t *);
+extern void dtrace_copyoutstr(uintptr_t, uintptr_t, size_t,
+			      volatile uint16_t *);
+extern uintptr_t dtrace_caller(int);
+
+#endif /* _DTRACE_H_ */
diff -urN ../linux-2.6.34/kernel/dtrace/dtrace_hash.c ./kernel/dtrace/dtrace_hash.c
--- ../linux-2.6.34/kernel/dtrace/dtrace_hash.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/dtrace_hash.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,203 @@
+/*
+ * FILE:	dtrace_hash.c
+ * DESCRIPTION:	Dynamic Tracing: probe hashing functions
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/slab.h>
+
+#include "dtrace.h"
+
+#define DTRACE_HASHSTR(hash, probe)	\
+	dtrace_hash_str(*((char **)((uintptr_t)(probe) + (hash)->dth_stroffs)))
+#define DTRACE_HASHEQ(hash, lhs, rhs)	\
+	(strcmp(*((char **)((uintptr_t)(lhs) + (hash)->dth_stroffs)), \
+		*((char **)((uintptr_t)(rhs) + (hash)->dth_stroffs))) == 0)
+
+static uint_t dtrace_hash_str(char *p)
+{
+	uint_t	g;
+	uint_t	hval = 0;
+
+	while (*p) {
+		hval = (hval << 4) + *p++;
+		if ((g = (hval & 0xf0000000)) != 0)
+			hval ^= g >> 24;
+
+		hval &= ~g;
+	}
+
+	return hval;
+}
+
+dtrace_hash_t *dtrace_hash_create(uintptr_t stroffs, uintptr_t nextoffs,
+				  uintptr_t prevoffs)
+{
+	dtrace_hash_t	*hash = kzalloc(sizeof (dtrace_hash_t), GFP_KERNEL);
+
+	hash->dth_stroffs = stroffs;
+	hash->dth_nextoffs = nextoffs;
+	hash->dth_prevoffs = prevoffs;
+
+	hash->dth_size = 1;
+	hash->dth_mask = hash->dth_size - 1;
+
+	hash->dth_tab = kzalloc(hash->dth_size *
+				sizeof (dtrace_hashbucket_t *), GFP_KERNEL);
+
+	return hash;
+}
+
+static void dtrace_hash_resize(dtrace_hash_t *hash)
+{
+	int			size = hash->dth_size, i, ndx;
+	int			new_size = hash->dth_size << 1;
+	int			new_mask = new_size - 1;
+	dtrace_hashbucket_t	**new_tab, *bucket, *next;
+
+	ASSERT((new_size & new_mask) == 0);
+
+	new_tab = kzalloc(new_size * sizeof (void *), GFP_KERNEL);
+
+	for (i = 0; i < size; i++) {
+		for (bucket = hash->dth_tab[i]; bucket != NULL;
+		     bucket = next) {
+			dtrace_probe_t *probe = bucket->dthb_chain;
+
+			ASSERT(probe != NULL);
+			ndx = DTRACE_HASHSTR(hash, probe) & new_mask;
+
+			next = bucket->dthb_next;
+			bucket->dthb_next = new_tab[ndx];
+			new_tab[ndx] = bucket;
+		}
+	}
+
+	kfree(hash->dth_tab);
+	hash->dth_tab = new_tab;
+	hash->dth_size = new_size;
+	hash->dth_mask = new_mask;
+}
+
+void dtrace_hash_add(dtrace_hash_t *hash, dtrace_probe_t *new)
+{
+	int			hashval = DTRACE_HASHSTR(hash, new);
+	int			ndx = hashval & hash->dth_mask;
+	dtrace_hashbucket_t	*bucket = hash->dth_tab[ndx];
+	dtrace_probe_t		**nextp, **prevp;
+
+	for (; bucket != NULL; bucket = bucket->dthb_next) {
+		if (DTRACE_HASHEQ(hash, bucket->dthb_chain, new))
+			goto add;
+	}
+
+	if ((hash->dth_nbuckets >> 1) > hash->dth_size) {
+		dtrace_hash_resize(hash);
+		dtrace_hash_add(hash, new);
+		return;
+	}
+
+	bucket = kzalloc(sizeof (dtrace_hashbucket_t), GFP_KERNEL);
+	bucket->dthb_next = hash->dth_tab[ndx];
+	hash->dth_tab[ndx] = bucket;
+	hash->dth_nbuckets++;
+
+add:
+	nextp = DTRACE_HASHNEXT(hash, new);
+
+	ASSERT(*nextp == NULL && *(DTRACE_HASHPREV(hash, new)) == NULL);
+
+	*nextp = bucket->dthb_chain;
+
+	if (bucket->dthb_chain != NULL) {
+		prevp = DTRACE_HASHPREV(hash, bucket->dthb_chain);
+
+		ASSERT(*prevp == NULL);
+
+		*prevp = new;
+	}
+
+	bucket->dthb_chain = new;
+	bucket->dthb_len++;
+}
+
+dtrace_probe_t *dtrace_hash_lookup(dtrace_hash_t *hash,
+				   dtrace_probe_t *template)
+{
+	int			hashval = DTRACE_HASHSTR(hash, template);
+	int			ndx = hashval & hash->dth_mask;
+	dtrace_hashbucket_t	*bucket = hash->dth_tab[ndx];
+
+	for (; bucket != NULL; bucket = bucket->dthb_next) {
+		if (DTRACE_HASHEQ(hash, bucket->dthb_chain, template))
+			return bucket->dthb_chain;
+	}
+
+	return NULL;
+}
+
+int dtrace_hash_collisions(dtrace_hash_t *hash, dtrace_probe_t *template)
+{
+	int			hashval = DTRACE_HASHSTR(hash, template);
+	int			ndx = hashval & hash->dth_mask;
+	dtrace_hashbucket_t	*bucket = hash->dth_tab[ndx];
+
+	for (; bucket != NULL; bucket = bucket->dthb_next) {
+		if (DTRACE_HASHEQ(hash, bucket->dthb_chain, template))
+			return bucket->dthb_len;
+	}
+
+	return 0;
+}
+
+void dtrace_hash_remove(dtrace_hash_t *hash, dtrace_probe_t *probe)
+{
+	int			ndx = DTRACE_HASHSTR(hash, probe) &
+				      hash->dth_mask;
+	dtrace_hashbucket_t	*bucket = hash->dth_tab[ndx];
+	dtrace_probe_t		**prevp = DTRACE_HASHPREV(hash, probe);
+	dtrace_probe_t		**nextp = DTRACE_HASHNEXT(hash, probe);
+
+	for (; bucket != NULL; bucket = bucket->dthb_next) {
+		if (DTRACE_HASHEQ(hash, bucket->dthb_chain, probe))
+			break;
+	}
+
+	ASSERT(bucket != NULL);
+
+	if (*prevp == NULL) {
+		if (*nextp == NULL) {
+			/*
+			 * This is the last probe in the bucket; we can remove
+			 * the bucket.
+			 */
+			dtrace_hashbucket_t	*b = hash->dth_tab[ndx];
+
+			ASSERT(bucket->dthb_chain == probe);
+			ASSERT(b != NULL);
+
+			if (b == bucket)
+				hash->dth_tab[ndx] = bucket->dthb_next;
+			else {
+				while (b->dthb_next != bucket)
+					b = b->dthb_next;
+
+				b->dthb_next = bucket->dthb_next;
+			}
+
+			ASSERT(hash->dth_nbuckets > 0);
+
+			hash->dth_nbuckets--;
+			kfree(bucket);
+
+			return;
+		}
+
+		bucket->dthb_chain = *nextp;
+	} else
+		*(DTRACE_HASHNEXT(hash, *prevp)) = *nextp;
+
+	if (*nextp != NULL)
+		*(DTRACE_HASHPREV(hash, *nextp)) = *prevp;
+}
diff -urN ../linux-2.6.34/kernel/dtrace/dtrace_helper.c ./kernel/dtrace/dtrace_helper.c
--- ../linux-2.6.34/kernel/dtrace/dtrace_helper.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/dtrace_helper.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,175 @@
+/*
+ * FILE:	dtrace_helper.c
+ * DESCRIPTION:	Dynamic Tracing: helper functions
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include "dtrace.h"
+
+static uint32_t	dtrace_helptrace_next = 0;
+static uint32_t	dtrace_helptrace_nlocals;
+static char	*dtrace_helptrace_buffer;
+static int	dtrace_helptrace_bufsize = 512 * 1024;
+
+#ifdef DEBUG
+static int	dtrace_helptrace_enabled = 1;
+#else
+static int	dtrace_helptrace_enabled = 0;
+#endif
+
+static void dtrace_helper_trace(dtrace_helper_action_t *helper,
+				dtrace_mstate_t *mstate,
+				dtrace_vstate_t *vstate, int where)
+{
+	uint32_t		size, next, nnext, i;
+	dtrace_helptrace_t	*ent;
+	uint16_t		flags = cpu_core[
+					    smp_processor_id()
+					].cpuc_dtrace_flags;
+
+	if (!dtrace_helptrace_enabled)
+		return;
+
+	ASSERT(vstate->dtvs_nlocals <= dtrace_helptrace_nlocals);
+
+	/*
+	 * What would a tracing framework be without its own tracing
+	 * framework?  (Well, a hell of a lot simpler, for starters...)
+	 */
+	size = sizeof(dtrace_helptrace_t) + dtrace_helptrace_nlocals *
+	       sizeof(uint64_t) - sizeof(uint64_t);
+
+	/*
+	 * Iterate until we can allocate a slot in the trace buffer.
+	 */
+	do {
+		next = dtrace_helptrace_next;
+
+		if (next + size < dtrace_helptrace_bufsize)
+			nnext = next + size;
+		else
+			nnext = size;
+	} while (cmpxchg(&dtrace_helptrace_next, next, nnext) != next);
+
+	/*
+	 * We have our slot; fill it in.
+	*/
+	if (nnext == size)
+		next = 0;
+
+	ent = (dtrace_helptrace_t *)&dtrace_helptrace_buffer[next];
+	ent->dtht_helper = helper;
+	ent->dtht_where = where;
+	ent->dtht_nlocals = vstate->dtvs_nlocals;
+
+	ent->dtht_fltoffs = (mstate->dtms_present & DTRACE_MSTATE_FLTOFFS)
+				?  mstate->dtms_fltoffs
+				: -1;
+	ent->dtht_fault = DTRACE_FLAGS2FLT(flags);
+	ent->dtht_illval = cpu_core[smp_processor_id()].cpuc_dtrace_illval;
+
+	for (i = 0; i < vstate->dtvs_nlocals; i++) {
+		dtrace_statvar_t	*svar;
+
+		if ((svar = vstate->dtvs_locals[i]) == NULL)
+			continue;
+
+		ASSERT(svar->dtsv_size >= NR_CPUS * sizeof(uint64_t));
+		ent->dtht_locals[i] =
+			((uint64_t *)(uintptr_t)svar->dtsv_data)[
+							smp_processor_id()];
+	}
+}
+
+uint64_t dtrace_helper(int which, dtrace_mstate_t *mstate,
+		       dtrace_state_t *state, uint64_t arg0, uint64_t arg1)
+{
+	uint16_t		*flags = &cpu_core[
+						smp_processor_id()
+					  ].cpuc_dtrace_flags;
+	uint64_t		sarg0 = mstate->dtms_arg[0];
+	uint64_t		sarg1 = mstate->dtms_arg[1];
+	uint64_t		rval = 0;
+	dtrace_helpers_t	*helpers = current->dtrace_helpers;
+	dtrace_helper_action_t	*helper;
+	dtrace_vstate_t		*vstate;
+	dtrace_difo_t		*pred;
+	int			i, trace = dtrace_helptrace_enabled;
+
+	ASSERT(which >= 0 && which < DTRACE_NHELPER_ACTIONS);
+
+	if (helpers == NULL)
+		return 0;
+
+	if ((helper = helpers->dthps_actions[which]) == NULL)
+		return 0;
+
+	vstate = &helpers->dthps_vstate;
+	mstate->dtms_arg[0] = arg0;
+	mstate->dtms_arg[1] = arg1;
+
+	/*
+	 * Now iterate over each helper.  If its predicate evaluates to 'true',
+	 * we'll call the corresponding actions.  Note that the below calls
+	 * to dtrace_dif_emulate() may set faults in machine state.  This is
+	 * okay:  our caller (the outer dtrace_dif_emulate()) will simply plow
+	 * the stored DIF offset with its own (which is the desired behavior).
+	 * Also, note the calls to dtrace_dif_emulate() may allocate scratch
+	 * from machine state; this is okay, too.
+	 */
+	for (; helper != NULL; helper = helper->dtha_next) {
+		if ((pred = helper->dtha_predicate) != NULL) {
+			if (trace)
+				dtrace_helper_trace(helper, mstate, vstate, 0);
+
+			if (!dtrace_dif_emulate(pred, mstate, vstate, state))
+				goto next;
+
+			if (*flags & CPU_DTRACE_FAULT)
+				goto err;
+		}
+
+		for (i = 0; i < helper->dtha_nactions; i++) {
+			if (trace)
+				dtrace_helper_trace(helper, mstate, vstate,
+						    i + 1);
+
+			rval = dtrace_dif_emulate(helper->dtha_actions[i],
+						  mstate, vstate, state);
+
+			if (*flags & CPU_DTRACE_FAULT)
+				goto err;
+		}
+
+next:
+		if (trace)
+			dtrace_helper_trace(helper, mstate, vstate,
+					    DTRACE_HELPTRACE_NEXT);
+	}
+
+	if (trace)
+		dtrace_helper_trace(helper, mstate, vstate,
+				    DTRACE_HELPTRACE_DONE);
+
+	/*
+	 * Restore the arg0 that we saved upon entry.
+	 */
+	mstate->dtms_arg[0] = sarg0;
+	mstate->dtms_arg[1] = sarg1;
+
+	return rval;
+
+err:
+	if (trace)
+		dtrace_helper_trace(helper, mstate, vstate,
+				    DTRACE_HELPTRACE_ERR);
+
+	/*
+	 * Restore the arg0 that we saved upon entry.
+	 */
+	mstate->dtms_arg[0] = sarg0;
+	mstate->dtms_arg[1] = sarg1;
+
+	return 0;
+}
diff -urN ../linux-2.6.34/kernel/dtrace/dtrace_ioctl.h ./kernel/dtrace/dtrace_ioctl.h
--- ../linux-2.6.34/kernel/dtrace/dtrace_ioctl.h	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/dtrace_ioctl.h	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,30 @@
+#ifndef _DTRACE_IOCTL_H_
+#define _DTRACE_IOCTL_H_
+
+#include <linux/types.h>
+#include <linux/ioctl.h>
+
+#define DTRACEIOC		0xd4
+#define DTRACEIOC_PROVIDER	_IOR(DTRACEIOC, 1, dtrace_providerdesc_t)
+#define DTRACEIOC_PROBES	_IOR(DTRACEIOC, 2, dtrace_probedesc_t)
+#define DTRACEIOC_BUFSNAP	_IOR(DTRACEIOC, 4, dtrace_bufdesc_t)
+#define DTRACEIOC_PROBEMATCH	_IOR(DTRACEIOC, 5, dtrace_probedesc_t)
+#define DTRACEIOC_ENABLE	_IOW(DTRACEIOC, 6, void *)
+#define DTRACEIOC_AGGSNAP	_IOR(DTRACEIOC, 7, dtrace_bufdesc_t)
+#define DTRACEIOC_EPROBE	_IOW(DTRACEIOC, 8, dtrace_eprobedesc_t)
+#define DTRACEIOC_PROBEARG	_IOR(DTRACEIOC, 9, dtrace_argdesc_t)
+#define DTRACEIOC_CONF		_IOR(DTRACEIOC, 10, dtrace_conf_t)
+#define DTRACEIOC_STATUS	_IOR(DTRACEIOC, 11, dtrace_status_t)
+#define DTRACEIOC_GO		_IOW(DTRACEIOC, 12, processorid_t)
+#define DTRACEIOC_STOP		_IOW(DTRACEIOC, 13, processorid_t)
+#define DTRACEIOC_AGGDESC	_IOR(DTRACEIOC, 15, dtrace_aggdesc_t)
+#define DTRACEIOC_FORMAT	_IOR(DTRACEIOC, 16, dtrace_fmtdesc_t)
+#define DTRACEIOC_DOFGET	_IOR(DTRACEIOC, 17, dof_hdr_t)
+#define DTRACEIOC_REPLICATE	_IOR(DTRACEIOC, 18, void *)
+
+#define DTRACEHIOC		0xd8
+#define DTRACEHIOC_ADD		_IOW(DTRACEHIOC, 1, int)
+#define DTRACEHIOC_REMOVE	_IOW(DTRACEHIOC, 2, int)
+#define DTRACEHIOC_ADDDOF	_IOW(DTRACEHIOC, 3, dof_helper_t)
+
+#endif
diff -urN ../linux-2.6.34/kernel/dtrace/dtrace_match.c ./kernel/dtrace/dtrace_match.c
--- ../linux-2.6.34/kernel/dtrace/dtrace_match.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/dtrace_match.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,325 @@
+/*
+ * FILE:	dtrace_match.c
+ * DESCRIPTION:	Dynamic Tracing: matching functions
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include "dtrace.h"
+
+dtrace_hash_t	*dtrace_bymod;
+dtrace_hash_t	*dtrace_byfunc;
+dtrace_hash_t	*dtrace_byname;
+
+int dtrace_match_priv(const dtrace_probe_t *prp, uint32_t priv, uid_t uid)
+{
+	if (priv != DTRACE_PRIV_ALL) {
+		uint32_t	ppriv =
+				prp->dtpr_provider->dtpv_priv.dtpp_flags;
+		uint32_t	match = priv & ppriv;
+
+		if ((priv & (DTRACE_PRIV_PROC | DTRACE_PRIV_USER |
+		    DTRACE_PRIV_KERNEL)) == 0)
+			return 0;
+
+		if (match == 0 && ppriv != 0)
+			return 0;
+
+		if (((ppriv & ~match) & DTRACE_PRIV_OWNER) != 0 &&
+		    uid != prp->dtpr_provider->dtpv_priv.dtpp_uid)
+			return 0;
+	}
+
+	return 1;
+}
+
+int dtrace_match_probe(const dtrace_probe_t *prp, const dtrace_probekey_t *pkp,
+		       uint32_t priv, uid_t uid)
+{
+	dtrace_provider_t	*pvp = prp->dtpr_provider;
+	int			rv;
+
+	if (pvp->dtpv_defunct)
+		return 0;
+
+	if ((rv = pkp->dtpk_pmatch(pvp->dtpv_name, pkp->dtpk_prov, 0)) <= 0)
+		return rv;
+
+	if ((rv = pkp->dtpk_mmatch(prp->dtpr_mod, pkp->dtpk_mod, 0)) <= 0)
+		return rv;
+
+	if ((rv = pkp->dtpk_fmatch(prp->dtpr_func, pkp->dtpk_func, 0)) <= 0)
+		return rv;
+
+	if ((rv = pkp->dtpk_nmatch(prp->dtpr_name, pkp->dtpk_name, 0)) <= 0)
+		return rv;
+
+	if (dtrace_match_priv(prp, priv, uid) == 0)
+		return 0;
+
+        return rv;
+}
+
+static int dtrace_match_glob(const char *s, const char *p, int depth)
+{
+	const char	*olds;
+	char		s1, c;
+	int		gs;
+
+	if (depth > DTRACE_PROBEKEY_MAXDEPTH)
+		return -1;
+
+	if (s == NULL)
+		s = "";
+
+top:
+	olds = s;
+	s1 = *s++;
+
+	if (p == NULL)
+		return 0;
+
+	if ((c = *p++) == '\0')
+		return s1 == '\0';
+
+	switch (c) {
+	case '[':
+		{
+			int	ok = 0, notflag = 0;
+			char	lc = '\0';
+
+			if (s1 == '\0')
+				return 0;
+
+			if (*p == '!') {
+				notflag = 1;
+				p++;
+			}
+
+			if ((c = *p++) == '\0')
+				return 0;
+
+			do {
+				if (c == '-' && lc != '\0' && *p != ']') {
+					if ((c = *p++) == '\0')
+						return 0;
+					if (c == '\\' && (c = *p++) == '\0')
+						return 0;
+
+					if (notflag) {
+						if (s1 < lc || s1 > c)
+							ok++;
+						else
+							return 0;
+					} else if (lc <= s1 && s1 <= c)
+						ok++;
+				} else if (c == '\\' && (c = *p++) == '\0')
+					return 0;
+
+				lc = c;
+
+				if (notflag) {
+					if (s1 != c)
+						ok++;
+					else
+						return 0;
+				} else if (s1 == c)
+					ok++;
+
+				if ((c = *p++) == '\0')
+					return 0;
+			} while (c != ']');
+
+			if (ok)
+				goto top;
+
+			return 0;
+		}
+
+	case '\\':
+		if ((c = *p++) == '\0')
+			return 0;
+
+	default:
+		if (c != s1)
+			return 0;
+
+	case '?':
+		if (s1 != '\0')
+			goto top;
+
+		return 0;
+
+	case '*':
+		while (*p == '*')
+			p++;
+
+		if (*p == '\0')
+			return 1;
+
+		for (s = olds; *s != '\0'; s++) {
+			if ((gs = dtrace_match_glob(s, p, depth + 1)) != 0)
+				return gs;
+		}
+
+		return 0;
+	}
+}
+
+static int dtrace_match_string(const char *s, const char *p, int depth)
+{
+	return s != NULL && strcmp(s, p) == 0;
+}
+
+static int dtrace_match_nul(const char *s, const char *p, int depth)
+{
+	return 1;
+}
+
+static int dtrace_match_nonzero(const char *s, const char *p, int depth)
+{
+	return s != NULL && s[0] != '\0';
+}
+
+struct probe_match {
+	const dtrace_probekey_t *pkp;
+	uint32_t		priv;
+	uid_t			uid;
+	int			(*matched)(dtrace_probe_t *, void *);
+	void			*arg;
+	int			nmatched;
+};
+
+static int dtrace_match_one(int id, void *p, void *data)
+{
+	struct probe_match	*pbm	= (struct probe_match *)data;
+	dtrace_probe_t		*probe	= (dtrace_probe_t *)p;
+	int			rc;
+
+	if (dtrace_match_probe(probe, pbm->pkp, pbm->priv, pbm->uid) <= 0)
+		return 0;
+
+	pbm->nmatched++;
+
+	if ((rc = (pbm->matched)(probe, pbm->arg)) != DTRACE_MATCH_NEXT) {
+		if (rc == DTRACE_MATCH_FAIL)
+			return DTRACE_MATCH_FAIL;
+	}
+
+	return 0;
+}
+
+int dtrace_match(const dtrace_probekey_t *pkp, uint32_t priv, uid_t uid,
+		 int (*matched)(dtrace_probe_t *, void *), void *arg)
+{
+	dtrace_probe_t	template, *probe;
+	dtrace_hash_t	*hash = NULL;
+	int		len, rc, best = INT_MAX, nmatched = 0;
+
+	if (pkp->dtpk_id != DTRACE_IDNONE) {
+		if ((probe = dtrace_probe_lookup_id(pkp->dtpk_id)) != NULL &&
+		    dtrace_match_probe(probe, pkp, priv, uid) > 0) {
+			if ((*matched)(probe, arg) == DTRACE_MATCH_FAIL)
+				return DTRACE_MATCH_FAIL;
+
+			nmatched++;
+		}
+
+		return nmatched;
+	}
+
+	template.dtpr_mod = (char *)pkp->dtpk_mod;
+	template.dtpr_func = (char *)pkp->dtpk_func;
+	template.dtpr_name = (char *)pkp->dtpk_name;
+
+	if (pkp->dtpk_mmatch == &dtrace_match_string &&
+	    (len = dtrace_hash_collisions(dtrace_bymod, &template)) < best) {
+		best = len;
+		hash = dtrace_bymod;
+	}
+
+	if (pkp->dtpk_fmatch == &dtrace_match_string &&
+	    (len = dtrace_hash_collisions(dtrace_byfunc, &template)) < best) {
+		best = len;
+		hash = dtrace_byfunc;
+	}
+
+	if (pkp->dtpk_nmatch == &dtrace_match_string &&
+	    (len = dtrace_hash_collisions(dtrace_byname, &template)) < best) {
+		best = len;
+		hash = dtrace_byname;
+	}
+
+	if (hash == NULL) {
+		struct probe_match	pbm;
+
+		pbm.pkp = pkp;
+		pbm.priv = priv;
+		pbm.uid = uid;
+		pbm.matched = matched;
+		pbm.arg = arg;
+		pbm.nmatched = 0;
+
+		rc = dtrace_probe_for_each(dtrace_match_one, &pbm);
+		if (rc == DTRACE_MATCH_FAIL)
+			return DTRACE_MATCH_FAIL;
+
+		return pbm.nmatched;
+	}
+
+	for (probe = dtrace_hash_lookup(hash, &template); probe != NULL;
+	     probe = *(DTRACE_HASHNEXT(hash, probe))) {
+		if (dtrace_match_probe(probe, pkp, priv, uid) <= 0)
+			continue;
+
+		nmatched++;
+
+		if ((rc = (*matched)(probe, arg)) != DTRACE_MATCH_NEXT) {
+			if (rc == DTRACE_MATCH_FAIL)
+				return DTRACE_MATCH_FAIL;
+
+			break;
+		}
+	}
+
+	return nmatched;
+}
+
+static dtrace_probekey_f *dtrace_probekey_func(const char *p)
+{
+	char	c;
+
+	if (p == NULL || *p == '\0')
+		return &dtrace_match_nul;
+
+	while ((c = *p++) != '\0') {
+		if (c == '[' || c == '?' || c == '*' || c == '\\')
+			return &dtrace_match_glob;
+	}
+
+	return &dtrace_match_string;
+}
+
+void dtrace_probekey(const dtrace_probedesc_t *pdp, dtrace_probekey_t *pkp)
+{
+	pkp->dtpk_prov = pdp->dtpd_provider;
+	pkp->dtpk_pmatch = dtrace_probekey_func(pdp->dtpd_provider);
+
+	pkp->dtpk_mod = pdp->dtpd_mod;
+	pkp->dtpk_mmatch = dtrace_probekey_func(pdp->dtpd_mod);
+
+	pkp->dtpk_func = pdp->dtpd_func;
+	pkp->dtpk_fmatch = dtrace_probekey_func(pdp->dtpd_func);
+
+	pkp->dtpk_name = pdp->dtpd_name;
+	pkp->dtpk_nmatch = dtrace_probekey_func(pdp->dtpd_name);
+
+	pkp->dtpk_id = pdp->dtpd_id;
+
+	if (pkp->dtpk_id == DTRACE_IDNONE &&
+	    pkp->dtpk_pmatch == &dtrace_match_nul &&
+	    pkp->dtpk_mmatch == &dtrace_match_nul &&
+	    pkp->dtpk_fmatch == &dtrace_match_nul &&
+	    pkp->dtpk_nmatch == &dtrace_match_nul)
+		pkp->dtpk_fmatch = &dtrace_match_nonzero;
+}
diff -urN ../linux-2.6.34/kernel/dtrace/dtrace_mod.c ./kernel/dtrace/dtrace_mod.c
--- ../linux-2.6.34/kernel/dtrace/dtrace_mod.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/dtrace_mod.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,34 @@
+/*
+ * FILE:	dtrace_mod.c
+ * DESCRIPTION:	Dynamic Tracing: module handling
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/module.h>
+
+#include "dtrace_dev.h"
+
+MODULE_AUTHOR("Kris Van Hees (kris.van.hees@oracle.com)");
+MODULE_DESCRIPTION("Dynamic Tracing");
+MODULE_VERSION("v0.1");
+MODULE_LICENSE("Proprietary");
+
+/*
+ * Initialize the module.
+ */
+static int __init dtrace_init(void)
+{
+	return dtrace_dev_init();
+}
+
+/*
+ * Perform cleanup before the module is removed.
+ */
+static void __exit dtrace_exit(void)
+{
+	dtrace_dev_exit();
+}
+
+module_init(dtrace_init);
+module_exit(dtrace_exit);
diff -urN ../linux-2.6.34/kernel/dtrace/dtrace_predicate.c ./kernel/dtrace/dtrace_predicate.c
--- ../linux-2.6.34/kernel/dtrace/dtrace_predicate.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/dtrace_predicate.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,66 @@
+/*
+ * FILE:	dtrace_predicate.c
+ * DESCRIPTION:	Dynamic Tracing: predicate functions
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/slab.h>
+
+#include "dtrace.h"
+
+static dtrace_cacheid_t	dtrace_predcache_id = DTRACE_CACHEIDNONE + 1;
+
+dtrace_predicate_t *dtrace_predicate_create(dtrace_difo_t *dp)
+{
+	dtrace_predicate_t	*pred;
+
+	ASSERT(mutex_is_locked(&dtrace_lock));
+	ASSERT(dp->dtdo_refcnt != 0);
+
+	pred = kzalloc(sizeof (dtrace_predicate_t), GFP_KERNEL);
+	pred->dtp_difo = dp;
+	pred->dtp_refcnt = 1;
+
+	if (!dtrace_difo_cacheable(dp))
+		return pred;
+
+	/*
+	 * This is only theoretically possible -- we have had 2^32 cacheable
+	 * predicates on this machine.  We cannot allow any more predicates to
+	 * become cacheable:  as unlikely as it is, there may be a thread
+	 * caching a (now stale) predicate cache ID. (N.B.: the temptation is
+	 * being successfully resisted to have this cmn_err() "Holy shit -- we
+	 * executed this code!")
+	 */
+	if (dtrace_predcache_id == DTRACE_CACHEIDNONE)
+		return pred;
+
+	pred->dtp_cacheid = dtrace_predcache_id++;
+
+	return pred;
+}
+
+void dtrace_predicate_hold(dtrace_predicate_t *pred)
+{
+	ASSERT(mutex_is_locked(&dtrace_lock));
+	ASSERT(pred->dtp_difo != NULL && pred->dtp_difo->dtdo_refcnt != 0);
+	ASSERT(pred->dtp_refcnt > 0);
+
+	pred->dtp_refcnt++;
+}
+
+void dtrace_predicate_release(dtrace_predicate_t *pred,
+			      dtrace_vstate_t *vstate)
+{
+	dtrace_difo_t *dp = pred->dtp_difo;
+
+	ASSERT(mutex_is_locked(&dtrace_lock));
+	ASSERT(dp != NULL && dp->dtdo_refcnt != 0);
+	ASSERT(pred->dtp_refcnt > 0);
+
+	if (--pred->dtp_refcnt == 0) {
+		dtrace_difo_release(dp, vstate);
+		kfree(pred);
+	}
+}
diff -urN ../linux-2.6.34/kernel/dtrace/dtrace_priv.c ./kernel/dtrace/dtrace_priv.c
--- ../linux-2.6.34/kernel/dtrace/dtrace_priv.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/dtrace_priv.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,67 @@
+/*
+ * FILE:	dtrace_priv.c
+ * DESCRIPTION:	Dynamic Tracing: privilege check functions
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include "dtrace.h"
+
+int dtrace_priv_proc_destructive(dtrace_state_t *state)
+{
+	int	action = state->dts_cred.dcr_action;
+
+	if (((action & DTRACE_CRA_PROC_DESTRUCTIVE_ALLZONE) == 0) &&
+	    dtrace_priv_proc_common_zone(state) == 0)
+		goto bad;
+
+	if (((action & DTRACE_CRA_PROC_DESTRUCTIVE_ALLUSER) == 0) &&
+	    dtrace_priv_proc_common_user(state) == 0)
+		goto bad;
+
+	if (((action & DTRACE_CRA_PROC_DESTRUCTIVE_CREDCHG) == 0) &&
+	    dtrace_priv_proc_common_nocd() == 0)
+		goto bad;
+
+	return 1;
+
+bad:
+	cpu_core[smp_processor_id()].cpuc_dtrace_flags |= CPU_DTRACE_UPRIV;
+   
+	return 0;
+}
+
+int dtrace_priv_proc_control(dtrace_state_t *state)
+{
+	if (state->dts_cred.dcr_action & DTRACE_CRA_PROC_CONTROL)
+		return 1;
+
+	if (dtrace_priv_proc_common_zone(state) &&
+	    dtrace_priv_proc_common_user(state) &&
+	    dtrace_priv_proc_common_nocd())
+		return 1;
+
+	cpu_core[smp_processor_id()].cpuc_dtrace_flags |= CPU_DTRACE_UPRIV;
+
+	return 0;
+}
+
+int dtrace_priv_proc(dtrace_state_t *state)
+{
+	if (state->dts_cred.dcr_action & DTRACE_CRA_PROC)
+		return 1;
+
+	cpu_core[smp_processor_id()].cpuc_dtrace_flags |= CPU_DTRACE_UPRIV;
+
+	return 0;
+}
+
+int dtrace_priv_kernel(dtrace_state_t *state)
+{
+	if (state->dts_cred.dcr_action & DTRACE_CRA_KERNEL)
+		return 1;
+
+	cpu_core[smp_processir_id()].cpuc_dtrace_flags |= CPU_DTRACE_KPRIV;
+
+	return 0;
+}
diff -urN ../linux-2.6.34/kernel/dtrace/dtrace_probe.c ./kernel/dtrace/dtrace_probe.c
--- ../linux-2.6.34/kernel/dtrace/dtrace_probe.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/dtrace_probe.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,1121 @@
+/*
+ * FILE:	dtrace_probe.c
+ * DESCRIPTION:	Dynamic Tracing: probe management functions
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/hardirq.h>
+#include <linux/idr.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <asm/cmpxchg.h>
+
+#include "dtrace.h"
+
+cycle_t				dtrace_deadman_timeout = (cycle_t)10 * NANOSEC;
+hrtime_t			dtrace_chill_interval = NANOSEC;
+hrtime_t			dtrace_chill_max = 500 * (NANOSEC / MILLISEC);
+
+static struct idr		dtrace_probe_idr;
+static uint64_t			dtrace_vtime_references;
+
+static struct task_struct	*dtrace_panicked;
+
+/*
+ * Create a new probe.
+ */
+dtrace_id_t dtrace_probe_create(dtrace_provider_id_t prov, const char *mod,
+				const char *func, const char *name,
+				int aframes, void *arg)
+{
+	dtrace_probe_t		*probe;
+	dtrace_provider_t	*provider = (dtrace_provider_t *)prov;
+	dtrace_id_t		id;
+	int			err;
+
+	probe = kzalloc(sizeof(dtrace_probe_t), __GFP_NOFAIL);
+
+	/*
+	 * The idr_pre_get() function should be called without holding locks.
+	 * When the provider is the DTrace core itself, dtrace_lock will be
+	 * held when we enter this function.
+	 */
+	if (provider == dtrace_provider) {
+		ASSERT(mutex_is_locked(&dtrace_lock));
+		mutex_unlock(&dtrace_lock);
+	}
+
+again:
+	idr_pre_get(&dtrace_probe_idr, __GFP_NOFAIL);
+
+	mutex_lock(&dtrace_lock);
+	err = idr_get_new(&dtrace_probe_idr, probe, &id);
+	if (err == -EAGAIN) {
+		mutex_unlock(&dtrace_lock);
+		goto again;
+	}
+
+	probe->dtpr_id = id;
+	probe->dtpr_gen = dtrace_probegen++;
+	probe->dtpr_mod = kstrdup(mod, GFP_KERNEL);
+	probe->dtpr_func = kstrdup(func, GFP_KERNEL);
+	probe->dtpr_name = kstrdup(name, GFP_KERNEL);
+	probe->dtpr_arg = arg;
+	probe->dtpr_aframes = aframes;
+	probe->dtpr_provider = provider;
+
+	dtrace_hash_add(dtrace_bymod, probe);
+	dtrace_hash_add(dtrace_byfunc, probe);
+	dtrace_hash_add(dtrace_byname, probe);
+
+	if (provider != dtrace_provider)
+		mutex_unlock(&dtrace_lock);
+
+	return id;
+}
+
+int dtrace_probe_enable(const dtrace_probedesc_t *desc, dtrace_enabling_t *enab)
+{
+	dtrace_probekey_t	pkey;
+	uint32_t		priv;
+	uid_t			uid;
+
+	dtrace_ecb_create_cache = NULL;
+
+	if (desc == NULL) {
+		(void) dtrace_ecb_create_enable(NULL, enab);
+
+		return 0;
+	}
+
+	dtrace_probekey(desc, &pkey);
+	dtrace_cred2priv(enab->dten_vstate->dtvs_state->dts_cred.dcr_cred,
+			 &priv, &uid);
+
+	return dtrace_match(&pkey, priv, uid, dtrace_ecb_create_enable, enab);
+}
+
+/*
+ * Copy a probe into a probe description.
+ */
+void dtrace_probe_description(const dtrace_probe_t *prp,
+			      dtrace_probedesc_t *pdp)
+{
+	memset(pdp, 0, sizeof(dtrace_probedesc_t));
+	pdp->dtpd_id = prp->dtpr_id;
+
+	strncpy(pdp->dtpd_provider, prp->dtpr_provider->dtpv_name,
+		DTRACE_PROVNAMELEN - 1);
+
+	strncpy(pdp->dtpd_mod, prp->dtpr_mod, DTRACE_MODNAMELEN - 1);
+	strncpy(pdp->dtpd_func, prp->dtpr_func, DTRACE_FUNCNAMELEN - 1);
+	strncpy(pdp->dtpd_name, prp->dtpr_name, DTRACE_NAMELEN - 1);
+}
+
+void dtrace_probe_provide(dtrace_probedesc_t *desc, dtrace_provider_t *prv)
+{
+	struct module	*mod;
+	int		all = 0;
+
+	if (prv == NULL) {
+		all = 1;
+		prv = dtrace_provider;
+	}
+
+	do {
+		prv->dtpv_pops.dtps_provide(prv->dtpv_arg, desc);
+
+#ifdef FIXME
+/*
+ * This needs work because (so far) I have not found a way to get access to the
+ * list of modules in Linux.
+ */
+		mutex_lock(&module_mutex);
+
+		list_for_each_entry(mod, &modules, list) {
+			if (mod->state != MODULE_STATE_LIVE)
+				continue;
+
+			prv->dtpv_pops.dtps_provide_module(prv->dtpv_arg, mod);
+		}
+
+		mutex_unlock(&module_mutex);
+#endif
+	} while (all && (prv = prv->dtpv_next) != NULL);
+}
+
+/*
+ * Atomically increment a specified error counter from probe context.
+ */
+static void dtrace_error(uint32_t *counter)
+{
+	/*
+	 * Most counters stored to in probe context are per-CPU counters.
+	 * However, there are some error conditions that are sufficiently
+	 * arcane that they don't merit per-CPU storage.  If these counters
+	 * are incremented concurrently on different CPUs, scalability will be
+	 * adversely affected -- but we don't expect them to be white-hot in a
+	 * correctly constructed enabling...
+	 */
+	uint32_t	oval, nval;
+
+	do {
+		oval = *counter;
+
+		if ((nval = oval + 1) == 0) {
+			/*
+			 * If the counter would wrap, set it to 1 -- assuring
+			 * that the counter is never zero when we have seen
+			 * errors.  (The counter must be 32-bits because we
+			 * aren't guaranteed a 64-bit compare&swap operation.)
+			 * To save this code both the infamy of being fingered
+			 * by a priggish news story and the indignity of being
+			 * the target of a neo-puritan witch trial, we're
+			 * carefully avoiding any colorful description of the
+			 * likelihood of this condition -- but suffice it to
+			 * say that it is only slightly more likely than the
+			 * overflow of predicate cache IDs, as discussed in
+			 * dtrace_predicate_create().
+			 */
+			nval = 1;
+		}
+	} while (cmpxchg(counter, oval, nval) != oval);
+}
+
+static int dtrace_priv_kernel_destructive(dtrace_state_t *state)
+{
+	if (state->dts_cred.dcr_action & DTRACE_CRA_KERNEL_DESTRUCTIVE)
+		return 1;
+
+	cpu_core[smp_processor_id()].cpuc_dtrace_flags |= CPU_DTRACE_KPRIV;
+
+	return 0;
+}
+
+static void dtrace_action_breakpoint(dtrace_ecb_t *ecb)
+{
+	dtrace_probe_t		*probe = ecb->dte_probe;
+	dtrace_provider_t	*prov = probe->dtpr_provider;
+	char			c[DTRACE_FULLNAMELEN + 80], *str;
+	char			*msg = "dtrace: breakpoint action at probe ";
+	char			*ecbmsg = " (ecb ";
+	uintptr_t		mask = (0xf << (sizeof(uintptr_t) * NBBY / 4));
+	uintptr_t		val = (uintptr_t)ecb;
+	int			shift = (sizeof(uintptr_t) * NBBY) - 4, i = 0;
+
+	if (dtrace_destructive_disallow)
+		return;
+
+	/*
+	 * It's impossible to be taking action on the NULL probe.
+	 */
+	ASSERT(probe != NULL);
+
+	/*
+	 * This is a poor man's (destitute man's?) sprintf():  we want to
+	 * print the provider name, module name, function name and name of
+	 * the probe, along with the hex address of the ECB with the breakpoint
+	 * action -- all of which we must place in the character buffer by
+	 * hand.
+	 */
+	while (*msg != '\0')
+		c[i++] = *msg++;
+
+	for (str = prov->dtpv_name; *str != '\0'; str++)
+		c[i++] = *str;
+	c[i++] = ':';
+
+	for (str = probe->dtpr_mod; *str != '\0'; str++)
+		c[i++] = *str;
+	c[i++] = ':';
+
+	for (str = probe->dtpr_func; *str != '\0'; str++)
+		c[i++] = *str;
+	c[i++] = ':';
+
+	for (str = probe->dtpr_name; *str != '\0'; str++)
+		c[i++] = *str;
+
+	while (*ecbmsg != '\0')
+		c[i++] = *ecbmsg++;
+
+	while (shift >= 0) {
+		mask = (uintptr_t)0xf << shift;
+
+		if (val >= ((uintptr_t)1 << shift))
+			c[i++] = "0123456789abcdef"[(val & mask) >> shift];
+
+		shift -= 4;
+	}
+
+	c[i++] = ')';
+	c[i] = '\0';
+
+	debug_enter(c); /* FIXME */
+}
+
+static void dtrace_action_panic(dtrace_ecb_t *ecb)
+{
+	dtrace_probe_t	*probe = ecb->dte_probe;
+
+	/*
+	 * It's impossible to be taking action on the NULL probe.
+	 */
+	ASSERT(probe != NULL);
+
+	if (dtrace_destructive_disallow)
+		return;
+
+	if (dtrace_panicked != NULL)
+		return;
+
+	if (cmpxchg(&dtrace_panicked, NULL, current) != NULL)
+		return;
+
+	/*
+	 * We won the right to panic.  (We want to be sure that only one
+	 * thread calls panic() from dtrace_probe(), and that panic() is
+	 * called exactly once.)
+	 */
+	dtrace_panic("dtrace: panic action at probe %s:%s:%s:%s (ecb %p)",
+		     probe->dtpr_provider->dtpv_name, probe->dtpr_mod,
+		     probe->dtpr_func, probe->dtpr_name, (void *)ecb);
+}
+
+static void dtrace_action_raise(uint64_t sig)
+{
+	if (dtrace_destructive_disallow)
+		return;
+
+	if (sig >= _NSIG) {
+		DTRACE_CPUFLAG_SET(CPU_DTRACE_ILLOP);
+		return;
+	}
+
+	/*
+	 * raise() has a queue depth of 1 -- we ignore all subsequent
+	 * invocations of the raise() action.
+	 */
+	if (current->dtrace_sig == 0)
+		current->dtrace_sig = (uint8_t)sig;
+
+	current->sig_check = 1;
+	aston(current);
+}
+
+static void dtrace_action_stop(void)
+{
+	if (dtrace_destructive_disallow)
+		return;
+
+	if (!current->dtrace_stop) {
+		current->dtrace_stop = 1;
+		current->sig_check = 1;
+		aston(current);
+	}
+}
+
+static void dtrace_action_chill(dtrace_mstate_t *mstate, hrtime_t val)
+{
+	hrtime_t		now;
+	volatile uint16_t	*flags;
+	cpu_core_t		*cpu = &cpu_core[smp_processor_id()];
+
+	if (dtrace_destructive_disallow)
+		return;
+
+	flags = (volatile uint16_t *)&cpu->cpuc_dtrace_flags;
+
+	now = dtrace_gethrtime();
+
+	if (now - cpu->cpu_dtrace_chillmark > dtrace_chill_interval) {
+		/*
+		 * We need to advance the mark to the current time.
+		 */
+		cpu->cpu_dtrace_chillmark = now;
+		cpu->cpu_dtrace_chilled = 0;
+	}
+
+	/*
+	 * Now check to see if the requested chill time would take us over
+	 * the maximum amount of time allowed in the chill interval.  (Or
+	 * worse, if the calculation itself induces overflow.)
+	 */
+	if (cpu->cpu_dtrace_chilled + val > dtrace_chill_max ||
+	    cpu->cpu_dtrace_chilled + val < cpu->cpu_dtrace_chilled) {
+		*flags |= CPU_DTRACE_ILLOP;
+		return;
+	}
+
+	while (dtrace_gethrtime() - now < val)
+		continue;
+
+	/*
+	 * Normally, we assure that the value of the variable "timestamp" does
+	 * not change within an ECB.  The presence of chill() represents an
+	 * exception to this rule, however.
+	 */
+	mstate->dtms_present &= ~DTRACE_MSTATE_TIMESTAMP;
+	cpu->cpu_dtrace_chilled += val;
+}
+
+static void dtrace_action_ustack(dtrace_mstate_t *mstate,
+				 dtrace_state_t *state, uint64_t *buf,
+				 uint64_t arg)
+{
+	int		nframes = DTRACE_USTACK_NFRAMES(arg);
+	int		strsize = DTRACE_USTACK_STRSIZE(arg);
+	uint64_t	*pcs = &buf[1], *fps;
+	char		*str = (char *)&pcs[nframes];
+	int		size, offs = 0, i, j;
+	uintptr_t	old = mstate->dtms_scratch_ptr, saved;
+	uint16_t	*flags = &cpu_core[
+					smp_processor_id()
+				  ].cpuc_dtrace_flags;
+	char		*sym;
+
+	/*
+	 * Should be taking a faster path if string space has not been
+	 * allocated.
+	 */
+	ASSERT(strsize != 0);
+
+	/*
+	 * We will first allocate some temporary space for the frame pointers.
+	 */
+	fps = (uint64_t *)P2ROUNDUP(mstate->dtms_scratch_ptr, 8);
+	size = (uintptr_t)fps - mstate->dtms_scratch_ptr +
+	       (nframes * sizeof (uint64_t));
+
+	if (!DTRACE_INSCRATCH(mstate, size)) {
+		/*
+		 * Not enough room for our frame pointers -- need to indicate
+		 * that we ran out of scratch space.
+		 */
+		DTRACE_CPUFLAG_SET(CPU_DTRACE_NOSCRATCH);
+		return;
+	}
+
+	mstate->dtms_scratch_ptr += size;
+	saved = mstate->dtms_scratch_ptr;
+
+	/*
+	 * Now get a stack with both program counters and frame pointers.
+	 */
+	DTRACE_CPUFLAG_SET(CPU_DTRACE_NOFAULT);
+	dtrace_getufpstack(buf, fps, nframes + 1);
+	DTRACE_CPUFLAG_CLEAR(CPU_DTRACE_NOFAULT);
+
+	/*
+	 * If that faulted, we're cooked.
+	 */
+	if (*flags & CPU_DTRACE_FAULT)
+		goto out;
+
+	/*
+	 * Now we want to walk up the stack, calling the USTACK helper.  For
+	 * each iteration, we restore the scratch pointer.
+	 */
+	for (i = 0; i < nframes; i++) {
+		mstate->dtms_scratch_ptr = saved;
+
+		if (offs >= strsize)
+			break;
+
+		sym = (char *)(uintptr_t)dtrace_helper(
+						DTRACE_HELPER_ACTION_USTACK,
+						mstate, state, pcs[i], fps[i]);
+
+		/*
+		 * If we faulted while running the helper, we're going to
+		 * clear the fault and null out the corresponding string.
+		 */
+		if (*flags & CPU_DTRACE_FAULT) {
+			*flags &= ~CPU_DTRACE_FAULT;
+			str[offs++] = '\0';
+			continue;
+		}
+
+		if (sym == NULL) {
+			str[offs++] = '\0';
+			continue;
+		}
+
+		DTRACE_CPUFLAG_SET(CPU_DTRACE_NOFAULT);
+
+		/*
+		 * Now copy in the string that the helper returned to us.
+		 */
+		for (j = 0; offs + j < strsize; j++) {
+			if ((str[offs + j] = sym[j]) == '\0')
+			break;
+		}
+
+		DTRACE_CPUFLAG_CLEAR(CPU_DTRACE_NOFAULT);
+
+		offs += j + 1;
+	}
+
+	/*
+	 * If we didn't have room for all of the strings, we don't abort
+	 * processing -- this needn't be a fatal error -- but we still want
+	 * to increment a counter (dts_stkstroverflows) to allow this condition
+	 * to be warned about.  (If this is from a jstack() action, it is
+	 * easily tuned via jstackstrsize.)
+	 */
+	if (offs >= strsize)
+		dtrace_error(&state->dts_stkstroverflows);
+
+	while (offs < strsize)
+		str[offs++] = '\0';
+
+out:
+	mstate->dtms_scratch_ptr = old;
+}
+
+void dtrace_probe(dtrace_id_t id, uintptr_t arg0, uintptr_t arg1,
+		  uintptr_t arg2, uintptr_t arg3, uintptr_t arg4)
+{
+	processorid_t		cpuid;
+	dtrace_icookie_t	cookie;
+	dtrace_probe_t		*probe;
+	dtrace_mstate_t		mstate;
+	dtrace_ecb_t		*ecb;
+	dtrace_action_t		*act;
+	intptr_t		offs;
+	size_t			size;
+	int			vtime, onintr;
+	volatile uint16_t	*flags;
+	cycle_t			now;
+
+#ifdef FIXME
+	/*
+	 * Kick out immediately if this CPU is still being born (in which case
+	 * curthread will be set to -1) or the current thread can't allow
+	 * probes in its current context.
+	 */
+	if (((uintptr_t)curthread & 1) || (curthread->t_flag & T_DONTDTRACE))
+		return;
+#endif
+
+	cookie = dtrace_interrupt_disable();
+	probe = dtrace_probe_lookup_id(id);
+	cpuid = smp_processor_id();
+	onintr = in_interrupt();
+
+	if (!onintr && probe->dtpr_predcache != DTRACE_CACHEIDNONE &&
+	    probe->dtpr_predcache == current->predcache) {
+		/*
+		 * We have hit in the predicate cache; we know that
+		 * this predicate would evaluate to be false.
+		 */
+		dtrace_interrupt_enable(cookie);
+		return;
+	}
+
+#ifdef FIXME
+	if (panic_quiesce) {
+		/*
+		 * We don't trace anything if we're panicking.
+		 */
+		dtrace_interrupt_enable(cookie);
+		return;
+	}
+#endif
+
+	now = dtrace_gethrtime();
+	vtime = dtrace_vtime_references != 0;
+
+	if (vtime && current->dtrace_start)
+		current->dtrace_vtime += now - current->dtrace_start;
+
+	mstate.dtms_difo = NULL;
+	mstate.dtms_probe = probe;
+	mstate.dtms_strtok = (uintptr_t)NULL;
+	mstate.dtms_arg[0] = arg0;
+	mstate.dtms_arg[1] = arg1;
+	mstate.dtms_arg[2] = arg2;
+	mstate.dtms_arg[3] = arg3;
+	mstate.dtms_arg[4] = arg4;
+
+	flags = (volatile uint16_t *)&cpu_core[cpuid].cpuc_dtrace_flags;
+
+	for (ecb = probe->dtpr_ecb; ecb != NULL; ecb = ecb->dte_next) {
+		dtrace_predicate_t	*pred = ecb->dte_predicate;
+		dtrace_state_t		*state = ecb->dte_state;
+		dtrace_buffer_t		*buf = &state->dts_buffer[cpuid];
+		dtrace_buffer_t		*aggbuf = &state->dts_aggbuffer[cpuid];
+		dtrace_vstate_t		*vstate = &state->dts_vstate;
+		dtrace_provider_t	*prov = probe->dtpr_provider;
+		int			committed = 0;
+		caddr_t			tomax;
+
+		/*
+		 * A little subtlety with the following (seemingly innocuous)
+		 * declaration of the automatic 'val':  by looking at the
+		 * code, you might think that it could be declared in the
+		 * action processing loop, below.  (That is, it's only used in
+		 * the action processing loop.)  However, it must be declared
+		 * out of that scope because in the case of DIF expression
+		 * arguments to aggregating actions, one iteration of the
+		 * action loop will use the last iteration's value.
+		 */
+#ifdef lint
+		uint64_t val = 0;
+#else
+		uint64_t val;
+#endif
+
+		mstate.dtms_present = DTRACE_MSTATE_ARGS | DTRACE_MSTATE_PROBE;
+		*flags &= ~CPU_DTRACE_ERROR;
+
+		if (prov == dtrace_provider) {
+			/*
+			 * If dtrace itself is the provider of this probe,
+			 * we're only going to continue processing the ECB if
+			 * arg0 (the dtrace_state_t) is equal to the ECB's
+			 * creating state.  (This prevents disjoint consumers
+			 * from seeing one another's metaprobes.)
+			 */
+			if (arg0 != (uint64_t)(uintptr_t)state)
+				continue;
+		}
+
+		if (state->dts_activity != DTRACE_ACTIVITY_ACTIVE) {
+			/*
+			 * We're not currently active.  If our provider isn't
+			 * the dtrace pseudo provider, we're not interested.
+			 */
+			if (prov != dtrace_provider)
+				continue;
+
+			/*
+			 * Now we must further check if we are in the BEGIN
+			 * probe.  If we are, we will only continue orocessing
+			 * if we're still in WARMUP -- if one BEGIN enabling
+			 * has invoked the exit() action, we don't want to
+			 * evaluate subsequent BEGIN enablings.
+			 */
+			if (probe->dtpr_id == dtrace_probeid_begin &&
+			    state->dts_activity != DTRACE_ACTIVITY_WARMUP) {
+				ASSERT(state->dts_activity ==
+				       DTRACE_ACTIVITY_DRAINING);
+				continue;
+			}
+		}
+
+		if (ecb->dte_cond) {
+			/*
+			 * If the dte_cond bits indicate that this
+			 * consumer is only allowed to see user-mode firings
+			 * of this probe, call the provider's dtps_usermode()
+			 * entry point to check that the probe was fired
+			 * while in a user context. Skip this ECB if that's
+			 * not the case.
+			 */
+			if ((ecb->dte_cond & DTRACE_COND_USERMODE) &&
+			    prov->dtpv_pops.dtps_usermode(
+				prov->dtpv_arg, probe->dtpr_id, probe->dtpr_arg
+			    ) == 0)
+				continue;
+
+			/*
+			 * This is more subtle than it looks. We have to be
+			 * absolutely certain that current_cred() isn't going
+			 * to change out from under us so it's only legit to
+			 * examine that structure if we're in constrained
+			 * situations. Currently, the only times we'll this
+			 * check is if a non-super-user has enabled the
+			 * profile or syscall providers -- providers that
+			 * allow visibility of all processes. For the
+			 * profile case, the check above will ensure that
+			 * we're examining a user context.
+			 */
+			if (ecb->dte_cond & DTRACE_COND_OWNER) {
+				const cred_t	*cr;
+				const cred_t	*s_cr =
+					ecb->dte_state->dts_cred.dcr_cred;
+
+				ASSERT(s_cr != NULL);
+
+				if ((cr = current_cred()) == NULL ||
+				    s_cr->euid != cr->euid ||
+				    s_cr->euid != cr->uid ||
+				    s_cr->euid != cr->suid ||
+				    s_cr->egid != cr->egid ||
+				    s_cr->egid != cr->gid ||
+				    s_cr->egid != cr->sgid)
+					continue;
+			}
+		}
+
+		if (now - state->dts_alive > dtrace_deadman_timeout) {
+			/*
+			 * We seem to be dead.  Unless we (a) have kernel
+			 * destructive permissions (b) have expicitly enabled
+			 * destructive actions and (c) destructive actions have
+			 * not been disabled, we're going to transition into
+			 * the KILLED state, from which no further processing
+			 * on this state will be performed.
+			 */
+			if (!dtrace_priv_kernel_destructive(state) ||
+			    !state->dts_cred.dcr_destructive ||
+			    dtrace_destructive_disallow) {
+				dtrace_activity_t	*activity =
+							&state->dts_activity;
+				dtrace_activity_t	curr;
+
+				do {
+					curr= state->dts_activity;
+				} while (cmpxchg(activity, curr,
+					 DTRACE_ACTIVITY_KILLED) != curr);
+
+				continue;
+			}
+		}
+
+		if ((offs = dtrace_buffer_reserve(buf, ecb->dte_needed,
+						  ecb->dte_alignment, state,
+						  &mstate)) < 0)
+			continue;
+
+		tomax = buf->dtb_tomax;
+		ASSERT(tomax != NULL);
+
+		if (ecb->dte_size != 0)
+			DTRACE_STORE(uint32_t, tomax, offs, ecb->dte_epid);
+
+		mstate.dtms_epid = ecb->dte_epid;
+		mstate.dtms_present |= DTRACE_MSTATE_EPID;
+
+		if (state->dts_cred.dcr_visible & DTRACE_CRV_KERNEL)
+			mstate.dtms_access = DTRACE_ACCESS_KERNEL;
+		else
+			mstate.dtms_access = 0;
+
+		if (pred != NULL) {
+			dtrace_difo_t	*dp = pred->dtp_difo;
+			int		rval;
+
+			rval = dtrace_dif_emulate(dp, &mstate, vstate, state);
+
+			if (!(*flags & CPU_DTRACE_ERROR) && !rval) {
+				dtrace_cacheid_t	cid =
+							probe->dtpr_predcache;
+
+				if (cid != DTRACE_CACHEIDNONE && !onintr) {
+					/*
+					 * Update the predicate cache...
+					 */
+					ASSERT(cid == pred->dtp_cacheid);
+					current->predcache = cid;
+				}
+
+				continue;
+			}
+		}
+
+		for (act = ecb->dte_action;
+		     !(*flags & CPU_DTRACE_ERROR) && act != NULL;
+		     act = act->dta_next) {
+			size_t			valoffs;
+			dtrace_difo_t		*dp;
+			dtrace_recdesc_t	*rec = &act->dta_rec;
+
+			size = rec->dtrd_size;
+			valoffs = offs + rec->dtrd_offset;
+
+			if (DTRACEACT_ISAGG(act->dta_kind)) {
+				uint64_t		v = 0xbad;
+				dtrace_aggregation_t	*agg;
+
+				agg = (dtrace_aggregation_t *)act;
+
+				if ((dp = act->dta_difo) != NULL)
+					v = dtrace_dif_emulate(dp, &mstate,
+							       vstate, state);
+
+				if (*flags & CPU_DTRACE_ERROR)
+					continue;
+
+				/*
+				 * Note that we always pass the expression
+				 * value from the previous iteration of the
+				 * action loop.  This value will only be used
+				 * if there is an expression argument to the
+				 * aggregating action, denoted by the
+				 * dtag_hasarg field.
+				 */
+				dtrace_aggregate(agg, buf, offs, aggbuf, v,
+						 val);
+				continue;
+			}
+
+			switch (act->dta_kind) {
+			case DTRACEACT_STOP:
+				if (dtrace_priv_proc_destructive(state))
+					dtrace_action_stop();
+				continue;
+
+			case DTRACEACT_BREAKPOINT:
+				if (dtrace_priv_kernel_destructive(state))
+					dtrace_action_breakpoint(ecb);
+				continue;
+
+			case DTRACEACT_PANIC:
+				if (dtrace_priv_kernel_destructive(state))
+					dtrace_action_panic(ecb);
+				continue;
+
+			case DTRACEACT_STACK:
+				if (!dtrace_priv_kernel(state))
+					continue;
+
+				dtrace_getpcstack((pc_t *)(tomax + valoffs),
+						  size / sizeof(pc_t),
+						  probe->dtpr_aframes,
+						  DTRACE_ANCHORED(probe)
+							? NULL
+							: (uint32_t *)arg0);
+
+				continue;
+
+			case DTRACEACT_JSTACK:
+			case DTRACEACT_USTACK:
+				if (!dtrace_priv_proc(state))
+					continue;
+
+				/*
+				 * See comment in DIF_VAR_PID.
+				 */
+				if (DTRACE_ANCHORED(mstate.dtms_probe) &&
+				    in_interrupt()) {
+					int	depth = DTRACE_USTACK_NFRAMES(
+							    rec->dtrd_arg) + 1;
+
+					dtrace_bzero((void *)(tomax + valoffs),
+						     DTRACE_USTACK_STRSIZE(
+							rec->dtrd_arg) +
+						     depth * sizeof(uint64_t));
+
+					continue;
+				}
+
+				if (DTRACE_USTACK_STRSIZE(rec->dtrd_arg) != 0 &&
+				    current->dtrace_helpers != NULL) {
+					/*
+					 * This is the slow path -- we have
+					 * allocated string space, and we're
+					 * getting the stack of a process that
+					 * has helpers.  Call into a separate
+					 * routine to perform this processing.
+					 */
+					dtrace_action_ustack(
+						&mstate, state,
+						(uint64_t *)(tomax + valoffs),
+						rec->dtrd_arg);
+					continue;
+				}
+
+				DTRACE_CPUFLAG_SET(CPU_DTRACE_NOFAULT);
+				dtrace_getupcstack(
+					(uint64_t *)(tomax + valoffs),
+					DTRACE_USTACK_NFRAMES(rec->dtrd_arg) +
+					1);
+				DTRACE_CPUFLAG_CLEAR(CPU_DTRACE_NOFAULT);
+				continue;
+
+			default:
+				break;
+			}
+
+			dp = act->dta_difo;
+			ASSERT(dp != NULL);
+
+			val = dtrace_dif_emulate(dp, &mstate, vstate, state);
+
+			if (*flags & CPU_DTRACE_ERROR)
+				continue;
+
+			switch (act->dta_kind) {
+			case DTRACEACT_SPECULATE:
+				ASSERT(buf == &state->dts_buffer[cpuid]);
+				buf = dtrace_speculation_buffer(state, cpuid,
+								val);
+
+				if (buf == NULL) {
+					*flags |= CPU_DTRACE_DROP;
+					continue;
+				}
+
+				offs = dtrace_buffer_reserve(buf,
+							     ecb->dte_needed,
+							     ecb->dte_alignment,
+							     state, NULL);
+
+				if (offs < 0) {
+					*flags |= CPU_DTRACE_DROP;
+					continue;
+				}
+
+				tomax = buf->dtb_tomax;
+				ASSERT(tomax != NULL);
+
+				if (ecb->dte_size != 0)
+					DTRACE_STORE(uint32_t, tomax, offs,
+						     ecb->dte_epid);
+
+				continue;
+
+			case DTRACEACT_CHILL:
+				if (dtrace_priv_kernel_destructive(state))
+					dtrace_action_chill(&mstate, val);
+
+				continue;
+
+			case DTRACEACT_RAISE:
+				if (dtrace_priv_proc_destructive(state))
+					dtrace_action_raise(val);
+
+				continue;
+
+			case DTRACEACT_COMMIT:
+				ASSERT(!committed);
+
+				/*
+				 * We need to commit our buffer state.
+				 */
+				if (ecb->dte_size)
+					buf->dtb_offset = offs + ecb->dte_size;
+
+				buf = &state->dts_buffer[cpuid];
+				dtrace_speculation_commit(state, cpuid, val);
+				committed = 1;
+				continue;
+
+			case DTRACEACT_DISCARD:
+				dtrace_speculation_discard(state, cpuid, val);
+				continue;
+
+			case DTRACEACT_DIFEXPR:
+			case DTRACEACT_LIBACT:
+			case DTRACEACT_PRINTF:
+			case DTRACEACT_PRINTA:
+			case DTRACEACT_SYSTEM:
+			case DTRACEACT_FREOPEN:
+				break;
+
+			case DTRACEACT_SYM:
+			case DTRACEACT_MOD:
+				if (!dtrace_priv_kernel(state))
+					continue;
+				break;
+
+			case DTRACEACT_USYM:
+			case DTRACEACT_UMOD:
+			case DTRACEACT_UADDR: {
+				pid_t	pid = current->pid;
+
+				if (!dtrace_priv_proc(state))
+					continue;
+
+				DTRACE_STORE(uint64_t, tomax, valoffs,
+					     (uint64_t)pid);
+				DTRACE_STORE(uint64_t, tomax,
+					     valoffs + sizeof(uint64_t), val);
+
+				continue;
+			}
+
+			case DTRACEACT_EXIT: {
+				/*
+				 * For the exit action, we are going to attempt
+				 * to atomically set our activity to be
+				 * draining.  If this fails (either because
+				 * another CPU has beat us to the exit action,
+				 * or because our current activity is something
+				 * other than ACTIVE or WARMUP), we will
+				 * continue.  This assures that the exit action
+				 * can be successfully recorded at most once
+				 * when we're in the ACTIVE state.  If we're
+				 * encountering the exit() action while in
+				 * COOLDOWN, however, we want to honor the new
+				 * status code.  (We know that we're the only
+				 * thread in COOLDOWN, so there is no race.)
+				 */
+				dtrace_activity_t	*activity =
+							&state->dts_activity;
+				dtrace_activity_t	curr =
+							state->dts_activity;
+
+				if (curr == DTRACE_ACTIVITY_COOLDOWN)
+					break;
+
+				if (curr != DTRACE_ACTIVITY_WARMUP)
+					curr = DTRACE_ACTIVITY_ACTIVE;
+
+				if (cmpxchg(activity, curr,
+					    DTRACE_ACTIVITY_DRAINING) != curr) {
+					*flags |= CPU_DTRACE_DROP;
+					continue;
+				}
+
+				break;
+			}
+
+			default:
+				ASSERT(0);
+			}
+
+			if (dp->dtdo_rtype.dtdt_flags & DIF_TF_BYREF) {
+				uintptr_t	end = valoffs + size;
+
+				if (!dtrace_vcanload((void *)(uintptr_t)val,
+						      &dp->dtdo_rtype, &mstate,
+						      vstate))
+					continue;
+
+				/*
+				 * If this is a string, we're going to only
+				 * load until we find the zero byte -- after
+				 * which we'll store zero bytes.
+				 */
+				if (dp->dtdo_rtype.dtdt_kind ==
+				    DIF_TYPE_STRING) {
+					char	c = '\0' + 1;
+					int	intuple = act->dta_intuple;
+					size_t	s;
+
+					for (s = 0; s < size; s++) {
+						if (c != '\0')
+							c = dtrace_load8(val++);
+
+						DTRACE_STORE(uint8_t, tomax,
+							     valoffs++, c);
+
+						if (c == '\0' && intuple)
+							break;
+					}
+
+					continue;
+				}
+
+				while (valoffs < end)
+					DTRACE_STORE(uint8_t, tomax, valoffs++,
+						     dtrace_load8(val++));
+
+				continue;
+			}
+
+			switch (size) {
+			case 0:
+				break;
+			case sizeof(uint8_t):
+				DTRACE_STORE(uint8_t, tomax, valoffs, val);
+				break;
+			case sizeof(uint16_t):
+				DTRACE_STORE(uint16_t, tomax, valoffs, val);
+				break;
+			case sizeof(uint32_t):
+				DTRACE_STORE(uint32_t, tomax, valoffs, val);
+				break;
+			case sizeof(uint64_t):
+				DTRACE_STORE(uint64_t, tomax, valoffs, val);
+				break;
+			default:
+				/*
+				 * Any other size should have been returned by
+				 * reference, not by value.
+				 */
+				ASSERT(0);
+				break;
+			}
+		}
+
+		if (*flags & CPU_DTRACE_DROP)
+			continue;
+
+		if (*flags & CPU_DTRACE_FAULT) {
+			int		ndx;
+			dtrace_action_t	*err;
+
+			buf->dtb_errors++;
+
+			if (probe->dtpr_id == dtrace_probeid_error) {
+				/*
+				 * There's nothing we can do -- we had an
+				 * error on the error probe.  We bump an
+				 * error counter to at least indicate that
+				 * this condition happened.
+				 */
+				dtrace_error(&state->dts_dblerrors);
+				continue;
+			}
+
+			if (vtime)
+				/*
+				 * Before recursing on dtrace_probe(), we
+				 * need to explicitly clear out our start
+				 * time to prevent it from being accumulated
+				 * into t_dtrace_vtime.
+				 */
+				current->dtrace_start = 0;
+
+			/*
+			 * Iterate over the actions to figure out which action
+			 * we were processing when we experienced the error.
+			 * Note that act points _past_ the faulting action; if
+			 * act is ecb->dte_action, the fault was in the
+			 * predicate, if it's ecb->dte_action->dta_next it's
+			 * in action #1, and so on.
+			 */
+			for (err = ecb->dte_action, ndx = 0;
+			     err != act; err = err->dta_next, ndx++)
+				continue;
+
+			dtrace_probe_error(
+				state, ecb->dte_epid, ndx,
+				(mstate.dtms_present & DTRACE_MSTATE_FLTOFFS)
+					?  mstate.dtms_fltoffs
+					: -1,
+				DTRACE_FLAGS2FLT(*flags),
+			cpu_core[cpuid].cpuc_dtrace_illval);
+
+			continue;
+		}
+
+		if (!committed)
+			buf->dtb_offset = offs + ecb->dte_size;
+	}
+
+	if (vtime)
+		current->dtrace_start = dtrace_gethrtime();
+
+	dtrace_interrupt_enable(cookie);
+}
+
+void dtrace_probe_init(void)
+{
+	idr_init(&dtrace_probe_idr);
+}
+
+void dtrace_probe_exit(void)
+{
+	idr_destroy(&dtrace_probe_idr);
+}
+
+void dtrace_probe_remove_id(dtrace_id_t id)
+{
+	return idr_remove(&dtrace_probe_idr, id);
+}
+
+dtrace_probe_t *dtrace_probe_lookup_id(dtrace_id_t id)
+{
+	return idr_find(&dtrace_probe_idr, id);
+}
+
+int dtrace_probe_for_each(int (*fn)(int id, void *p, void *data), void *data)
+{
+	return idr_for_each(&dtrace_probe_idr, fn, data);
+}
diff -urN ../linux-2.6.34/kernel/dtrace/dtrace_probe_ctx.c ./kernel/dtrace/dtrace_probe_ctx.c
--- ../linux-2.6.34/kernel/dtrace/dtrace_probe_ctx.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/dtrace_probe_ctx.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,462 @@
+/*
+ * FILE:	dtrace_probe_ctx.c
+ * DESCRIPTION:	Dynamic Tracing: probe context functions
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include "dtrace.h"
+
+void dtrace_panic(const char *fmt, ...)
+{
+	va_list		alist;
+
+	va_start(alist, fmt);
+	vprintk(fmt, alist);
+	va_end(alist);
+
+	BUG();
+}
+
+int dtrace_assfail(const char *a, const char *f, int l)
+{
+	dtrace_panic("assertion failed: %s, file: %s, line: %d", a, f, l);
+
+	/*
+	 * FIXME: We can do better than this.  The OpenSolaris DTrace source
+	 * states that this cannot be optimized away.
+	 */
+	return a[(uintptr_t)f];
+}
+EXPORT_SYMBOL(dtrace_assfail);
+
+#define DT_MASK_LO	0x00000000FFFFFFFFULL
+
+static void dtrace_add_128(uint64_t *addend1, uint64_t *addend2, uint64_t *sum)
+{
+	uint64_t	result[2];
+
+	result[0] = addend1[0] + addend2[0];
+	result[1] = addend1[1] + addend2[1] +
+		    (result[0] < addend1[0] || result[0] < addend2[0] ? 1 : 0);
+
+	sum[0] = result[0];
+	sum[1] = result[1];
+}
+
+static void dtrace_shift_128(uint64_t *a, int b)
+{
+	uint64_t	mask;
+
+	if (b == 0)
+		return;
+
+	if (b < 0) {
+		b = -b;
+
+		if (b >= 64) {
+			a[0] = a[1] >> (b - 64);
+			a[1] = 0;
+		} else {
+			a[0] >>= b;
+			mask = 1LL << (64 - b);
+			mask -= 1;
+			a[0] |= ((a[1] & mask) << (64 - b));
+			a[1] >>= b;
+		}
+	} else {
+		if (b >= 64) {
+			a[1] = a[0] << (b - 64);
+			a[0] = 0;
+		} else {
+			a[1] <<= b;
+			mask = a[0] >> (64 - b);
+			a[1] |= mask;
+			a[0] <<= b;
+		}
+	}
+}
+
+static void dtrace_multiply_128(uint64_t factor1, uint64_t factor2,
+				uint64_t *product)
+{
+	uint64_t	hi1, hi2, lo1, lo2;
+	uint64_t	tmp[2];
+
+	hi1 = factor1 >> 32;
+	hi2 = factor2 >> 32;
+
+	lo1 = factor1 & DT_MASK_LO;
+	lo2 = factor2 & DT_MASK_LO;
+
+	product[0] = lo1 * lo2;
+	product[1] = hi1 * hi2;
+
+	tmp[0] = hi1 * lo2;
+	tmp[1] = 0;
+	dtrace_shift_128(tmp, 32);
+	dtrace_add_128(product, tmp, product);
+
+	tmp[0] = hi2 * lo1;
+	tmp[1] = 0;
+	dtrace_shift_128(tmp, 32);
+	dtrace_add_128(product, tmp, product);
+}
+
+void dtrace_aggregate_min(uint64_t *oval, uint64_t nval, uint64_t arg)
+{
+	if ((int64_t)nval < (int64_t)*oval)
+		*oval = nval;
+}
+
+void dtrace_aggregate_max(uint64_t *oval, uint64_t nval, uint64_t arg)
+{
+	if ((int64_t)nval > (int64_t)*oval)
+		*oval = nval;
+}
+
+void dtrace_aggregate_quantize(uint64_t *quanta, uint64_t nval, uint64_t incr)
+{
+	int	i, zero = DTRACE_QUANTIZE_ZEROBUCKET;
+	int64_t	val = (int64_t)nval;
+
+	if (val < 0) {
+		for (i = 0; i < zero; i++) {
+			if (val <= DTRACE_QUANTIZE_BUCKETVAL(i)) {
+				quanta[i] += incr;
+
+				return;
+			}
+		}
+	} else {
+		for (i = zero + 1; i < DTRACE_QUANTIZE_NBUCKETS; i++) {
+			if (val < DTRACE_QUANTIZE_BUCKETVAL(i)) {
+				quanta[i - 1] += incr;
+
+				return;
+			}
+		}
+
+		quanta[DTRACE_QUANTIZE_NBUCKETS - 1] += incr;
+
+		return;
+	}
+
+	ASSERT(0);
+}
+
+void dtrace_aggregate_lquantize(uint64_t *lquanta, uint64_t nval,
+				uint64_t incr)
+{
+	uint64_t	arg = *lquanta++;
+	int32_t		base = DTRACE_LQUANTIZE_BASE(arg);
+	uint16_t	step = DTRACE_LQUANTIZE_STEP(arg);
+	uint16_t	levels = DTRACE_LQUANTIZE_LEVELS(arg);
+	int32_t		val = (int32_t)nval, level;
+
+	ASSERT(step != 0);
+	ASSERT(levels != 0);
+
+	if (val < base) {
+		lquanta[0] += incr;
+
+		return;
+	}
+
+	level = (val - base) / step;
+
+	if (level < levels) {
+		lquanta[level + 1] += incr;
+
+		return;
+	}
+
+	lquanta[levels + 1] += incr;
+}
+
+void dtrace_aggregate_avg(uint64_t *data, uint64_t nval, uint64_t arg)
+{
+	data[0]++;
+	data[1] += nval;
+}
+
+void dtrace_aggregate_stddev(uint64_t *data, uint64_t nval, uint64_t arg)
+{
+	int64_t		snval = (int64_t)nval;
+	uint64_t	tmp[2];
+
+	data[0]++;
+	data[1] += nval;
+
+	if (snval < 0)
+		snval = -snval;
+
+	dtrace_multiply_128((uint64_t)snval, (uint64_t)snval, tmp);
+	dtrace_add_128(data + 2, tmp, data + 2);
+}
+
+void dtrace_aggregate_count(uint64_t *oval, uint64_t nval, uint64_t arg)
+{
+	*oval = *oval + 1;
+}
+
+void dtrace_aggregate_sum(uint64_t *oval, uint64_t nval, uint64_t arg)
+{
+	*oval += nval;
+}
+
+/*
+ * Aggregate given the tuple in the principal data buffer, and the aggregating
+ * action denoted by the specified dtrace_aggregation_t.  The aggregation
+ * buffer is specified as the buf parameter.  This routine does not return
+ * failure; if there is no space in the aggregation buffer, the data will be
+ * dropped, and a corresponding counter incremented.
+ */
+void dtrace_aggregate(dtrace_aggregation_t *agg, dtrace_buffer_t *dbuf,
+		      intptr_t offset, dtrace_buffer_t *buf, uint64_t expr,
+		      uint64_t arg)
+{
+	dtrace_recdesc_t	*rec = &agg->dtag_action.dta_rec;
+	uint32_t		i, ndx, size, fsize;
+	uint32_t		align = sizeof (uint64_t) - 1;
+	dtrace_aggbuffer_t	*agb;
+	dtrace_aggkey_t		*key;
+	uint32_t		hashval = 0, limit, isstr;
+	caddr_t			tomax, data, kdata;
+	dtrace_actkind_t	action;
+	dtrace_action_t		*act;
+	uintptr_t		offs;
+
+	if (buf == NULL)
+		return;
+
+	if (!agg->dtag_hasarg)
+		/*
+		 * Currently, only quantize() and lquantize() take additional
+		 * arguments, and they have the same semantics:  an increment
+		 * value that defaults to 1 when not present.  If additional
+		 * aggregating actions take arguments, the setting of the
+		 * default argument value will presumably have to become more
+		 * sophisticated...
+		 */
+		arg = 1;
+
+	action = agg->dtag_action.dta_kind - DTRACEACT_AGGREGATION;
+	size = rec->dtrd_offset - agg->dtag_base;
+	fsize = size + rec->dtrd_size;
+
+	ASSERT(dbuf->dtb_tomax != NULL);
+	data = dbuf->dtb_tomax + offset + agg->dtag_base;
+
+	if ((tomax = buf->dtb_tomax) == NULL) {
+		dtrace_buffer_drop(buf);
+		return;
+	}
+
+	/*
+	 * The metastructure is always at the bottom of the buffer.
+	 */
+	agb = (dtrace_aggbuffer_t *)(tomax + buf->dtb_size -
+					     sizeof (dtrace_aggbuffer_t));
+
+	if (buf->dtb_offset == 0) {
+		/*
+		 * We just kludge up approximately 1/8th of the size to be
+		 * buckets.  If this guess ends up being routinely
+		 * off-the-mark, we may need to dynamically readjust this
+		 * based on past performance.
+		 */
+		uintptr_t	hashsize = (buf->dtb_size >> 3) /
+					   sizeof (uintptr_t);
+
+		if ((uintptr_t)agb - hashsize * sizeof (dtrace_aggkey_t *) <
+		    (uintptr_t)tomax || hashsize == 0) {
+			/*
+			 * We've been given a ludicrously small buffer;
+			 * increment our drop count and leave.
+			 */
+			dtrace_buffer_drop(buf);
+			return;
+		}
+
+		/*
+		 * And now, a pathetic attempt to try to get a an odd (or
+		 * perchance, a prime) hash size for better hash distribution.
+		 */
+		if (hashsize > (DTRACE_AGGHASHSIZE_SLEW << 3))
+			hashsize -= DTRACE_AGGHASHSIZE_SLEW;
+
+		agb->dtagb_hashsize = hashsize;
+		agb->dtagb_hash = (dtrace_aggkey_t **)((uintptr_t)agb -
+		agb->dtagb_hashsize * sizeof (dtrace_aggkey_t *));
+		agb->dtagb_free = (uintptr_t)agb->dtagb_hash;
+
+		for (i = 0; i < agb->dtagb_hashsize; i++)
+			agb->dtagb_hash[i] = NULL;
+	}
+
+	ASSERT(agg->dtag_first != NULL);
+	ASSERT(agg->dtag_first->dta_intuple);
+
+	/*
+	 * Calculate the hash value based on the key.  Note that we _don't_
+	 * include the aggid in the hashing (but we will store it as part of
+	 * the key).  The hashing algorithm is Bob Jenkins' "One-at-a-time"
+	 * algorithm: a simple, quick algorithm that has no known funnels, and
+	 * gets good distribution in practice.  The efficacy of the hashing
+	 * algorithm (and a comparison with other algorithms) may be found by
+	 * running the ::dtrace_aggstat MDB dcmd.
+	 */
+	for (act = agg->dtag_first; act->dta_intuple; act = act->dta_next) {
+		i = act->dta_rec.dtrd_offset - agg->dtag_base;
+		limit = i + act->dta_rec.dtrd_size;
+		ASSERT(limit <= size);
+		isstr = DTRACEACT_ISSTRING(act);
+
+		for (; i < limit; i++) {
+			hashval += data[i];
+			hashval += (hashval << 10);
+			hashval ^= (hashval >> 6);
+
+			if (isstr && data[i] == '\0')
+				break;
+		}
+	}
+
+	hashval += (hashval << 3);
+	hashval ^= (hashval >> 11);
+	hashval += (hashval << 15);
+
+	/*
+	 * Yes, the divide here is expensive -- but it's generally the least
+	 * of the performance issues given the amount of data that we iterate
+	 * over to compute hash values, compare data, etc.
+	 */
+	ndx = hashval % agb->dtagb_hashsize;
+
+	for (key = agb->dtagb_hash[ndx]; key != NULL; key = key->dtak_next) {
+		ASSERT((caddr_t)key >= tomax);
+		ASSERT((caddr_t)key < tomax + buf->dtb_size);
+
+		if (hashval != key->dtak_hashval || key->dtak_size != size)
+			continue;
+
+		kdata = key->dtak_data;
+		ASSERT(kdata >= tomax && kdata < tomax + buf->dtb_size);
+
+		for (act = agg->dtag_first; act->dta_intuple;
+		     act = act->dta_next) {
+			i = act->dta_rec.dtrd_offset - agg->dtag_base;
+			limit = i + act->dta_rec.dtrd_size;
+			ASSERT(limit <= size);
+			isstr = DTRACEACT_ISSTRING(act);
+
+			for (; i < limit; i++) {
+				if (kdata[i] != data[i])
+					goto next;
+
+				if (isstr && data[i] == '\0')
+					break;
+			}
+		}
+
+		if (action != key->dtak_action) {
+			/*
+			 * We are aggregating on the same value in the same
+			 * aggregation with two different aggregating actions.
+			 * (This should have been picked up in the compiler,
+			 * so we may be dealing with errant or devious DIF.)
+			 * This is an error condition; we indicate as much,
+			 * and return.
+			 */
+			DTRACE_CPUFLAG_SET(CPU_DTRACE_ILLOP);
+			return;
+		}
+
+		/*
+		 * This is a hit:  we need to apply the aggregator to
+		 * the value at this key.
+		 */
+		agg->dtag_aggregate((uint64_t *)(kdata + size), expr, arg);
+		return;
+next:
+		continue;
+	}
+
+	/*
+	 * We didn't find it.  We need to allocate some zero-filled space,
+	 * link it into the hash table appropriately, and apply the aggregator
+	 * to the (zero-filled) value.
+	 */
+	offs = buf->dtb_offset;
+	while (offs & (align - 1))
+		offs += sizeof (uint32_t);
+
+	/*
+	 * If we don't have enough room to both allocate a new key _and_
+	 * its associated data, increment the drop count and return.
+	 */
+	if ((uintptr_t)tomax + offs + fsize >
+	    agb->dtagb_free - sizeof (dtrace_aggkey_t)) {
+		dtrace_buffer_drop(buf);
+		return;
+	}
+
+	ASSERT(!(sizeof (dtrace_aggkey_t) & (sizeof (uintptr_t) - 1)));
+	key = (dtrace_aggkey_t *)(agb->dtagb_free - sizeof (dtrace_aggkey_t));
+	agb->dtagb_free -= sizeof (dtrace_aggkey_t);
+
+	key->dtak_data = kdata = tomax + offs;
+	buf->dtb_offset = offs + fsize;
+
+	/*
+	 * Now copy the data across.
+	 */
+	*((dtrace_aggid_t *)kdata) = agg->dtag_id;
+
+	for (i = sizeof (dtrace_aggid_t); i < size; i++)
+		kdata[i] = data[i];
+
+	/*
+	 * Because strings are not zeroed out by default, we need to iterate
+	 * looking for actions that store strings, and we need to explicitly
+	 * pad these strings out with zeroes.
+	 */
+	for (act = agg->dtag_first; act->dta_intuple; act = act->dta_next) {
+		int	nul;
+
+		if (!DTRACEACT_ISSTRING(act))
+			continue;
+
+		i = act->dta_rec.dtrd_offset - agg->dtag_base;
+		limit = i + act->dta_rec.dtrd_size;
+		ASSERT(limit <= size);
+
+		for (nul = 0; i < limit; i++) {
+			if (nul) {
+				kdata[i] = '\0';
+				continue;
+			}
+
+			if (data[i] != '\0')
+				continue;
+
+			nul = 1;
+		}
+	}
+
+	for (i = size; i < fsize; i++)
+		kdata[i] = 0;
+
+	key->dtak_hashval = hashval;
+	key->dtak_size = size;
+	key->dtak_action = action;
+	key->dtak_next = agb->dtagb_hash[ndx];
+	agb->dtagb_hash[ndx] = key;
+
+	/*
+	 * Finally, apply the aggregator.
+	 */
+	*((uint64_t *)(key->dtak_data + size)) = agg->dtag_initial;
+	agg->dtag_aggregate((uint64_t *)(key->dtak_data + size), expr, arg);
+}
diff -urN ../linux-2.6.34/kernel/dtrace/dtrace_ptofapi.c ./kernel/dtrace/dtrace_ptofapi.c
--- ../linux-2.6.34/kernel/dtrace/dtrace_ptofapi.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/dtrace_ptofapi.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,335 @@
+/*
+ * FILE:	dtrace_ptofapi.c
+ * DESCRIPTION:	Dynamic Tracing: provider-to-framework API
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/idr.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+
+#include "dtrace.h"
+
+dtrace_provider_t	*dtrace_provider;
+
+DEFINE_MUTEX(dtrace_lock);
+DEFINE_MUTEX(dtrace_provider_lock);
+DEFINE_MUTEX(dtrace_meta_lock);
+
+/*
+ * Register the calling provider with the DTrace core.  This should generally
+ * be called by providers during module initialization.
+ */
+int dtrace_register(const char *name, const dtrace_pattr_t *pap, uint32_t priv,
+		    cred_t *cr, const dtrace_pops_t *pops, void *arg,
+		    dtrace_provider_id_t *idp)
+{
+	dtrace_provider_t	*provider;
+
+	if (name == NULL || pap == NULL || pops == NULL || idp == NULL) {
+		pr_warning("Failed to register provider %s: invalid args\n",
+			   name ? name : "<NULL>");
+		return -EINVAL;
+	}
+
+	if (name[0] == '\0' || dtrace_badname(name)) {
+		pr_warning("Failed to register provider %s: invalid name\n",
+			   name);
+		return -EINVAL;
+	}
+
+	if ((pops->dtps_provide == NULL && pops->dtps_provide_module == NULL) ||
+	    pops->dtps_enable == NULL || pops->dtps_disable == NULL ||
+	    pops->dtps_destroy == NULL ||
+	    ((pops->dtps_resume == NULL) != (pops->dtps_suspend == NULL))) {
+		pr_warning("Failed to register provider %s: invalid ops\n",
+			   name);
+		return -EINVAL;
+	}
+
+	if (dtrace_badattr(&pap->dtpa_provider) ||
+	    dtrace_badattr(&pap->dtpa_mod) ||
+	    dtrace_badattr(&pap->dtpa_func) ||
+	    dtrace_badattr(&pap->dtpa_name) ||
+	    dtrace_badattr(&pap->dtpa_args)) {
+		pr_warning("Failed to register provider %s: invalid "
+			   "attributes\n", name);
+		return -EINVAL;
+	}
+
+	if (priv & ~DTRACE_PRIV_ALL) {
+		pr_warning("Failed to register provider %s: invalid privilege "
+			   "attributes\n", name);
+		return -EINVAL;
+	}
+
+	if ((priv & DTRACE_PRIV_KERNEL) &&
+	    (priv & (DTRACE_PRIV_USER | DTRACE_PRIV_OWNER)) &&
+	    pops->dtps_usermode == NULL) {
+		pr_warning("Failed to register provider %s: need "
+			   "dtps_usermode() op for given privilege "
+			   "attributes\n", name);
+		return -EINVAL;
+	}
+
+	provider = kmalloc(sizeof (dtrace_provider_t), GFP_KERNEL);
+	provider->dtpv_name = kstrdup(name, GFP_KERNEL);
+	provider->dtpv_attr = *pap;
+	provider->dtpv_priv.dtpp_flags = priv;
+
+	if (cr != NULL) {
+		provider->dtpv_priv.dtpp_uid = get_cred(cr)->uid;
+		put_cred(cr);
+	}
+
+	provider->dtpv_pops = *pops;
+
+	if (pops->dtps_provide == NULL) {
+		ASSERT(pops->dtps_provide_module != NULL);
+		provider->dtpv_pops.dtps_provide =
+		    (void (*)(void *, const dtrace_probedesc_t *))dtrace_nullop;
+	}
+
+	if (pops->dtps_provide_module == NULL) {
+		ASSERT(pops->dtps_provide != NULL);
+		provider->dtpv_pops.dtps_provide_module =
+		    (void (*)(void *, struct module *))dtrace_nullop;
+	}
+
+	if (pops->dtps_suspend == NULL) {
+		ASSERT(pops->dtps_resume != NULL);
+		provider->dtpv_pops.dtps_suspend =
+		    (void (*)(void *, dtrace_id_t, void *))dtrace_nullop;
+		provider->dtpv_pops.dtps_resume =
+		    (void (*)(void *, dtrace_id_t, void *))dtrace_nullop;
+	}
+
+	provider->dtpv_arg = arg;
+	*idp = (dtrace_provider_id_t)provider;
+
+	if (pops == &dtrace_provider_ops) {
+		ASSERT(mutex_is_locked(&dtrace_provider_lock));
+		ASSERT(mutex_is_locked(&dtrace_lock));
+		ASSERT(dtrace_anon.dta_enabling == NULL);
+
+		/*
+		 * The DTrace provider must be at the head of the provider
+		 * chain.
+		 */
+		provider->dtpv_next = dtrace_provider;
+		dtrace_provider = provider;
+
+		return 0;
+	}
+
+	mutex_lock(&dtrace_provider_lock);
+	mutex_lock(&dtrace_lock);
+
+	/*
+	 * If there is at least one provider registered, we'll add this new one
+	 * after the first provider.
+	 */
+	if (dtrace_provider != NULL) {
+		provider->dtpv_next = dtrace_provider->dtpv_next;
+		dtrace_provider->dtpv_next = provider;
+	} else
+		dtrace_provider = provider;
+
+	if (dtrace_retained != NULL) {
+		dtrace_enabling_provide(provider);
+
+		/*
+		 * We must now call dtrace_enabling_matchall() which needs to
+		 * acquire FIXME(cpu_lock) and dtrace_lock.  We therefore need
+		 * to drop our locks before calling it.
+		 */
+		mutex_unlock(&dtrace_lock);
+		mutex_unlock(&dtrace_provider_lock);
+		dtrace_enabling_matchall();
+
+		return 0;
+	}
+
+	mutex_unlock(&dtrace_lock);
+	mutex_unlock(&dtrace_provider_lock);
+
+	return 0;
+}
+EXPORT_SYMBOL(dtrace_register);
+
+/*
+ * Check whether the given probe is still enabled for the given provider.
+ */
+static int dtrace_unregister_check(int id, void *p, void *data)
+{
+	dtrace_probe_t		*probe = (dtrace_probe_t *)p;
+	dtrace_provider_t	*prov = (dtrace_provider_t *)data;
+
+	if (probe->dtpr_provider != prov)
+		return 0;
+
+	if (probe->dtpr_ecb == NULL)
+		return 0;
+
+	return -EBUSY;
+}
+
+/*
+ * Remove the given probe from the hash tables and the probe IDR.  The probes
+ * are chained for further processing.
+ */
+static int dtrace_unregister_probe(int id, void *p, void *data)
+{
+	dtrace_probe_t	*probe = (dtrace_probe_t *)p;
+	dtrace_probe_t	**first = (dtrace_probe_t **)data;
+
+	dtrace_hash_remove(dtrace_bymod, probe);
+	dtrace_hash_remove(dtrace_byfunc, probe);
+	dtrace_hash_remove(dtrace_byname, probe);
+
+	if (*first == NULL) {
+		*first = probe;
+		probe->dtpr_nextmod = NULL;
+	} else {
+		probe->dtpr_nextmod = *first;
+		*first = probe;
+	}
+
+	return 0;
+}
+
+/*
+ * Unregister the specified provider from the DTrace core.  This should be
+ * called by provider during module cleanup.
+ */
+int dtrace_unregister(dtrace_provider_id_t id)
+{
+	dtrace_provider_t	*old = (dtrace_provider_t *)id;
+	dtrace_provider_t	*prev = NULL;
+	int			err, self = 0;
+	dtrace_probe_t		*probe, *first = NULL;
+
+	if (old->dtpv_pops.dtps_enable ==
+	    (int (*)(void *, dtrace_id_t, void *))dtrace_enable_nullop) {
+		/*
+		 * When the provider is the DTrace core itself, we're called
+		 * with locks already held.
+		 */
+		ASSERT(old == dtrace_provider);
+		ASSERT(mutex_is_locked(&dtrace_provider_lock));
+		ASSERT(mutex_is_locked(&dtrace_lock));
+
+		self = 1;
+
+		if (dtrace_provider->dtpv_next != NULL) {
+			/*
+			 * We cannot and should not remove the DTrace provider
+			 * if there is any other provider left.
+			 */
+			return -EBUSY;
+		}
+	} else {
+		mutex_lock(&dtrace_provider_lock);
+		/* FIXME: mutex_lock(&mod_lock); */
+		mutex_lock(&dtrace_lock);
+	}
+
+	/*
+	 * If /dev/dtrace/dtrace is still held open by a process, or if there
+	 * are anonymous probes that are still enabled, we refuse to deregister
+	 * providers, unless the provider has been invalidated explicitly.
+	 */
+	if (!old->dtpv_defunct &&
+	    (dtrace_opens || (dtrace_anon.dta_state != NULL &&
+	     dtrace_anon.dta_state->dts_necbs > 0))) {
+		if (!self) {
+			mutex_unlock(&dtrace_lock);
+			/* FIXME: mutex_unlock(&mod_lock); */
+			mutex_unlock(&dtrace_provider_lock);
+		}
+
+		return -EBUSY;
+	}
+
+	/*
+	 * Check whether any of the probes associated with this provider are
+	 * still enabled (having at least one ECB).  If any are found, we
+	 * cannot remove this provider.
+	 */
+	err = dtrace_probe_for_each(dtrace_unregister_check, old);
+	if (err < 0) {
+		if (!self) {
+			mutex_unlock(&dtrace_lock);
+			/* FIXME: mutex_unlock(&mod_lock); */
+			mutex_unlock(&dtrace_provider_lock);
+		}
+
+		return err;
+	}
+
+	/*
+	 * All the probes associated with this provider are disabled.  We can
+	 * safely remove these probes from the hashtables and the probe array.
+	 * We chain all the probes together for further processing.
+	 */
+	dtrace_probe_for_each(dtrace_unregister_probe, &first);
+
+	/*
+	 * The probes associated with the provider have been removed.  Ensure
+	 * synchronization on probe IDR processing.
+	 */
+	dtrace_sync();
+
+	/*
+	 * Now get rid of the actual probes.
+	 */
+	for (probe = first; probe != NULL; probe = first) {
+		int	probe_id = probe->dtpr_id;
+
+		first = probe->dtpr_nextmod;
+
+		old->dtpv_pops.dtps_destroy(old->dtpv_arg, probe_id,
+					    probe->dtpr_arg);
+
+		kfree(probe->dtpr_mod);
+		kfree(probe->dtpr_func);
+		kfree(probe->dtpr_name);
+		kfree(probe);
+
+		dtrace_probe_remove_id(probe_id);
+	}
+
+	if ((prev = dtrace_provider) == old) {
+		/*
+		 * We are removing the provider at the head of the chain.
+		 */
+		ASSERT(self);
+		ASSERT(old->dtpv_next == NULL);
+
+		dtrace_provider = old->dtpv_next;
+	} else {
+		while (prev != NULL && prev->dtpv_next != old)
+			prev = prev->dtpv_next;
+
+		if (prev == NULL) {
+			pr_err("Attempt to unregister non-existent DTrace "
+			       "provider %p\n", (void *)id);
+			BUG();
+		}
+
+		prev->dtpv_next = old->dtpv_next;
+	}
+
+	if (!self) {
+		mutex_unlock(&dtrace_lock);
+		/* FIXME: mutex_unlock(&mod_lock); */
+		mutex_unlock(&dtrace_provider_lock);
+	}
+
+	kfree(old->dtpv_name);
+	kfree(old);
+
+	return 0;
+}
+EXPORT_SYMBOL(dtrace_unregister);
diff -urN ../linux-2.6.34/kernel/dtrace/dtrace_spec.c ./kernel/dtrace/dtrace_spec.c
--- ../linux-2.6.34/kernel/dtrace/dtrace_spec.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/dtrace_spec.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,423 @@
+/*
+ * FILE:	dtrace_spec.c
+ * DESCRIPTION:	Dynamic Tracing: speculation functions
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/smp.h>
+#include <asm/cmpxchg.h>
+
+#include "dtrace.h"
+
+/*
+ * Given consumer state, this routine finds a speculation in the INACTIVE
+ * state and transitions it into the ACTIVE state.  If there is no speculation
+ * in the INACTIVE state, 0 is returned.  In this case, no error counter is
+ * incremented -- it is up to the caller to take appropriate action.
+ */
+static int dtrace_speculation(dtrace_state_t *state)
+{
+	int				i = 0;
+	dtrace_speculation_state_t	curr;
+	uint32_t			*stat =
+					    &state->dts_speculations_unavail,
+					count;
+
+	while (i < state->dts_nspeculations) {
+		dtrace_speculation_t	*spec = &state->dts_speculations[i];
+
+		curr = spec->dtsp_state;
+
+		if (curr != DTRACESPEC_INACTIVE) {
+			if (curr == DTRACESPEC_COMMITTINGMANY ||
+			    curr == DTRACESPEC_COMMITTING ||
+			    curr == DTRACESPEC_DISCARDING)
+				stat = &state->dts_speculations_busy;
+
+			i++;
+			continue;
+		}
+
+			if (cmpxchg((uint32_t *)&spec->dtsp_state, curr,
+				    DTRACESPEC_ACTIVE) == curr)
+				return i + 1;
+	}
+
+	/*
+	 * We couldn't find a speculation.  If we found as much as a single
+	 * busy speculation buffer, we'll attribute this failure as "busy"
+	 * instead of "unavail".
+	 */
+	do {
+		count = *stat;
+	} while (cmpxchg(stat, count, count + 1) != count);
+
+	return 0;
+}
+
+/*
+ * This routine commits an active speculation.  If the specified speculation
+ * is not in a valid state to perform a commit(), this routine will silently do
+ * nothing.  The state of the specified speculation is transitioned according
+ * to the state transition diagram outlined in <sys/dtrace_impl.h>
+ */
+void dtrace_speculation_commit(dtrace_state_t *state, processorid_t cpu,
+			       dtrace_specid_t which)
+{
+	dtrace_speculation_t		*spec;
+	dtrace_buffer_t			*src, *dest;
+	uintptr_t			daddr, saddr, dlimit;
+	dtrace_speculation_state_t	curr, new;
+	intptr_t			offs;
+
+	if (which == 0)
+		return;
+
+	if (which > state->dts_nspeculations) {
+		cpu_core[cpu].cpuc_dtrace_flags |= CPU_DTRACE_ILLOP;
+		return;
+	}
+
+	spec = &state->dts_speculations[which - 1];
+	src = &spec->dtsp_buffer[cpu];
+	dest = &state->dts_buffer[cpu];
+
+	do {
+		curr = spec->dtsp_state;
+
+		if (curr == DTRACESPEC_COMMITTINGMANY)
+			break;
+
+		switch (curr) {
+		case DTRACESPEC_INACTIVE:
+		case DTRACESPEC_DISCARDING:
+			return;
+
+		case DTRACESPEC_COMMITTING:
+			/*
+			 * This is only possible if we are (a) commit()'ing
+			 * without having done a prior speculate() on this CPU
+			 * and (b) racing with another commit() on a different
+			 * CPU.  There's nothing to do -- we just assert that
+			 * our offset is 0.
+			 */
+			ASSERT(src->dtb_offset == 0);
+			return;
+
+		case DTRACESPEC_ACTIVE:
+			new = DTRACESPEC_COMMITTING;
+			break;
+
+		case DTRACESPEC_ACTIVEONE:
+			/*
+			 * This speculation is active on one CPU.  If our
+			 * buffer offset is non-zero, we know that the one CPU
+			 * must be us.  Otherwise, we are committing on a
+			 * different CPU from the speculate(), and we must
+			 * rely on being asynchronously cleaned.
+			 */
+			if (src->dtb_offset != 0) {
+				new = DTRACESPEC_COMMITTING;
+				break;
+			}
+			/*FALLTHROUGH*/
+
+		case DTRACESPEC_ACTIVEMANY:
+			new = DTRACESPEC_COMMITTINGMANY;
+			break;
+
+		default:
+			ASSERT(0);
+		}
+	} while (cmpxchg((uint32_t *)&spec->dtsp_state, curr, new) !=
+		 curr);
+
+	/*
+	 * We have set the state to indicate that we are committing this
+	 * speculation.  Now reserve the necessary space in the destination
+	 * buffer.
+	 */
+	offs = dtrace_buffer_reserve(dest, src->dtb_offset, sizeof (uint64_t),
+				     state, NULL);
+	if (offs < 0) {
+		dtrace_buffer_drop(dest);
+		goto out;
+	}
+
+	/*
+	 * We have the space; copy the buffer across.  (Note that this is a
+	 * highly subobtimal bcopy(); in the unlikely event that this becomes
+	 * a serious performance issue, a high-performance DTrace-specific
+	 * bcopy() should obviously be invented.)
+	 */
+	daddr = (uintptr_t)dest->dtb_tomax + offs;
+	dlimit = daddr + src->dtb_offset;
+	saddr = (uintptr_t)src->dtb_tomax;
+
+	/*
+	 * First, the aligned portion.
+	 */
+	while (dlimit - daddr >= sizeof (uint64_t)) {
+		*((uint64_t *)daddr) = *((uint64_t *)saddr);
+		*((uint64_t *)daddr) = *((uint64_t *)saddr);
+
+		daddr += sizeof (uint64_t);
+		saddr += sizeof (uint64_t);
+	}
+
+	/*
+	 * Now any left-over bit...
+	 */
+	while (dlimit - daddr)
+		*((uint8_t *)daddr++) = *((uint8_t *)saddr++);
+
+	/*
+	 * Finally, commit the reserved space in the destination buffer.
+	 */
+	dest->dtb_offset = offs + src->dtb_offset;
+
+out:
+	/*
+	 * If we're lucky enough to be the only active CPU on this speculation
+	 * buffer, we can just set the state back to DTRACESPEC_INACTIVE.
+	 */
+	if (curr == DTRACESPEC_ACTIVE ||
+	    (curr == DTRACESPEC_ACTIVEONE && new == DTRACESPEC_COMMITTING)) {
+		/*
+		 * Will cause unused warning if DEBUG is not defined.
+		 */
+		uint32_t	rval =
+				cmpxchg((uint32_t *)&spec->dtsp_state,
+					DTRACESPEC_COMMITTING,
+					DTRACESPEC_INACTIVE);
+
+		ASSERT(rval == DTRACESPEC_COMMITTING);
+		rval = 0; /* Avoid warning about unused variable if !DEBUG */
+	}
+
+	src->dtb_offset = 0;
+	src->dtb_xamot_drops += src->dtb_drops;
+	src->dtb_drops = 0;
+}
+
+/*
+ * This routine discards an active speculation.  If the specified speculation
+ * is not in a valid state to perform a discard(), this routine will silently
+ * do nothing.  The state of the specified speculation is transitioned
+ * according to the state transition diagram outlined in <sys/dtrace_impl.h>
+ */
+void dtrace_speculation_discard(dtrace_state_t *state, processorid_t cpu,
+				dtrace_specid_t which)
+{
+	dtrace_speculation_t		*spec;
+	dtrace_speculation_state_t	current, new;
+	dtrace_buffer_t			*buf;
+
+	if (which == 0)
+		return;
+
+	if (which > state->dts_nspeculations) {
+		cpu_core[cpu].cpuc_dtrace_flags |= CPU_DTRACE_ILLOP;
+		return;
+	}
+
+	spec = &state->dts_speculations[which - 1];
+	buf = &spec->dtsp_buffer[cpu];
+
+	do {
+		curr = spec->dtsp_state;
+
+		switch (curr) {
+		case DTRACESPEC_INACTIVE:
+		case DTRACESPEC_COMMITTINGMANY:
+		case DTRACESPEC_COMMITTING:
+		case DTRACESPEC_DISCARDING:
+			return;
+
+		case DTRACESPEC_ACTIVE:
+		case DTRACESPEC_ACTIVEMANY:
+			new = DTRACESPEC_DISCARDING;
+			break;
+
+		case DTRACESPEC_ACTIVEONE:
+			if (buf->dtb_offset != 0)
+				new = DTRACESPEC_INACTIVE;
+			else
+				new = DTRACESPEC_DISCARDING;
+
+			break;
+
+		default:
+			ASSERT(0);
+		}
+	} while (cmpxchg((uint32_t *)&spec->dtsp_state, curr, new) != curr);
+
+	buf->dtb_offset = 0;
+	buf->dtb_drops = 0;
+}
+
+/*
+ * Note:  not called from probe context.  This function is called
+ * asynchronously from cross call context to clean any speculations that are
+ * in the COMMITTINGMANY or DISCARDING states.  These speculations may not be
+ * transitioned back to the INACTIVE state until all CPUs have cleaned the
+ * speculation.
+ */
+void dtrace_speculation_clean_here(dtrace_state_t *state)
+{
+	dtrace_icookie_t	cookie;
+	processorid_t		cpu = smp_processor_id();
+	dtrace_buffer_t		*dest = &state->dts_buffer[cpu];
+	dtrace_specid_t		i;
+
+	cookie = dtrace_interrupt_disable();
+
+	if (dest->dtb_tomax == NULL) {
+		dtrace_interrupt_enable(cookie);
+		return;
+	}
+
+	for (i = 0; i < state->dts_nspeculations; i++) {
+		dtrace_speculation_t	*spec = &state->dts_speculations[i];
+		dtrace_buffer_t		*src = &spec->dtsp_buffer[cpu];
+
+		if (src->dtb_tomax == NULL)
+			continue;
+
+		if (spec->dtsp_state == DTRACESPEC_DISCARDING) {
+			src->dtb_offset = 0;
+			continue;
+		}
+
+		if (spec->dtsp_state != DTRACESPEC_COMMITTINGMANY)
+			continue;
+
+		if (src->dtb_offset == 0)
+			continue;
+
+		dtrace_speculation_commit(state, cpu, i + 1);
+	}
+
+	dtrace_interrupt_enable(cookie);
+}
+
+void dtrace_speculation_clean(dtrace_state_t *state)
+{
+	int		work = 0, rv;
+	dtrace_specid_t	i;
+
+	for (i = 0; i < state->dts_nspeculations; i++) {
+		dtrace_speculation_t	*spec = &state->dts_speculations[i];
+
+		ASSERT(!spec->dtsp_cleaning);
+
+		if (spec->dtsp_state != DTRACESPEC_DISCARDING &&
+		    spec->dtsp_state != DTRACESPEC_COMMITTINGMANY)
+			continue;
+
+		work++;
+		spec->dtsp_cleaning = 1;
+	}
+
+	if (!work)
+		return;
+
+	dtrace_xcall(DTRACE_CPUALL,
+		     (dtrace_xcall_t)dtrace_speculation_clean_here, state);
+
+	/*
+	 * We now know that all CPUs have committed or discarded their
+	 * speculation buffers, as appropriate.  We can now set the state
+	 * to inactive.
+	 */
+	for (i = 0; i < state->dts_nspeculations; i++) {
+		dtrace_speculation_t		*spec =
+						&state->dts_speculations[i];
+		dtrace_speculation_state_t	curr, new;
+
+		if (!spec->dtsp_cleaning)
+			continue;
+
+		curr= spec->dtsp_state;
+		ASSERT(curr == DTRACESPEC_DISCARDING ||
+		       curr == DTRACESPEC_COMMITTINGMANY);
+
+		new = DTRACESPEC_INACTIVE;
+
+		rv = cmpxchg((uint32_t *)&spec->dtsp_state, curr, new);
+		ASSERT(rv == curr);
+		spec->dtsp_cleaning = 0;
+	}
+}
+
+/*
+ * Called as part of a speculate() to get the speculative buffer associated
+ * with a given speculation.  Returns NULL if the specified speculation is not
+ * in an ACTIVE state.  If the speculation is in the ACTIVEONE state -- and
+ * the active CPU is not the specified CPU -- the speculation will be
+ * atomically transitioned into the ACTIVEMANY state.
+ */
+dtrace_buffer_t *dtrace_speculation_buffer(dtrace_state_t *state,
+					   processorid_t cpuid,
+					   dtrace_specid_t which)
+{
+	dtrace_speculation_t		*spec;
+	dtrace_speculation_state_t	curr, new;
+	dtrace_buffer_t			*buf;
+
+	if (which == 0)
+		return NULL;
+
+	if (which > state->dts_nspeculations) {
+		cpu_core[cpuid].cpuc_dtrace_flags |= CPU_DTRACE_ILLOP;
+		return NULL;
+	}
+
+	spec = &state->dts_speculations[which - 1];
+	buf = &spec->dtsp_buffer[cpuid];
+
+	do {
+		curr = spec->dtsp_state;
+
+		switch (curr) {
+		case DTRACESPEC_INACTIVE:
+		case DTRACESPEC_COMMITTINGMANY:
+		case DTRACESPEC_DISCARDING:
+			return NULL;
+
+		case DTRACESPEC_COMMITTING:
+			ASSERT(buf->dtb_offset == 0);
+			return NULL;
+
+		case DTRACESPEC_ACTIVEONE:
+			/*
+			 * This speculation is currently active on one CPU.
+			 * Check the offset in the buffer; if it's non-zero,
+			 * that CPU must be us (and we leave the state alone).
+			 * If it's zero, assume that we're starting on a new
+			 * CPU -- and change the state to indicate that the
+			 * speculation is active on more than one CPU.
+			 */
+			if (buf->dtb_offset != 0)
+				return buf;
+
+			new = DTRACESPEC_ACTIVEMANY;
+			break;
+
+		case DTRACESPEC_ACTIVEMANY:
+			return buf;
+
+		case DTRACESPEC_ACTIVE:
+			new = DTRACESPEC_ACTIVEONE;
+			break;
+
+		default:
+			ASSERT(0);
+		}
+	} while (cmpxchg((uint32_t *)&spec->dtsp_state, curr, new) != curr);
+
+	ASSERT(new == DTRACESPEC_ACTIVEONE || new == DTRACESPEC_ACTIVEMANY);
+
+	return buf;
+}
diff -urN ../linux-2.6.34/kernel/dtrace/dtrace_state.c ./kernel/dtrace/dtrace_state.c
--- ../linux-2.6.34/kernel/dtrace/dtrace_state.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/dtrace_state.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,962 @@
+/*
+ * FILE:	dtrace_state.c
+ * DESCRIPTION:	Dynamic Tracing: consumer state functions
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/fs.h>
+#include <linux/slab.h>
+#include <linux/smp.h>
+#include <asm/cmpxchg.h>
+
+#include "cyclic.h"
+#include "dtrace.h"
+
+struct kmem_cache	*dtrace_state_cache;
+int			dtrace_destructive_disallow = 0;
+dtrace_optval_t		dtrace_nspec_default = 1;
+dtrace_optval_t		dtrace_specsize_default = 32 * 1024;
+dtrace_optval_t		dtrace_dstate_defsize = 1 * 1024 * 1024;
+size_t			dtrace_strsize_default = 256;
+dtrace_optval_t		dtrace_stackframes_default = 20;
+dtrace_optval_t		dtrace_ustackframes_default = 20;
+dtrace_optval_t		dtrace_cleanrate_default = 9900990;
+dtrace_optval_t		dtrace_cleanrate_min = 20000;
+dtrace_optval_t		dtrace_cleanrate_max = (uint64_t)60 * NANOSEC;
+dtrace_optval_t		dtrace_aggrate_default = NANOSEC;
+dtrace_optval_t		dtrace_switchrate_default = NANOSEC;
+dtrace_optval_t		dtrace_statusrate_default = NANOSEC;
+dtrace_optval_t		dtrace_statusrate_max = (uint64_t)10 * NANOSEC;
+dtrace_optval_t		dtrace_jstackframes_default = 50;
+dtrace_optval_t		dtrace_jstackstrsize_default = 512;
+cycle_t			dtrace_deadman_interval = NANOSEC;
+cycle_t			dtrace_deadman_timeout = (cycle_t)10 * NANOSEC;
+cycle_t			dtrace_deadman_user = (cycle_t)30 * NANOSEC;
+
+dtrace_id_t		dtrace_probeid_begin;
+dtrace_id_t		dtrace_probeid_end;
+dtrace_id_t		dtrace_probeid_error;
+
+static dtrace_dynvar_t	dtrace_dynhash_sink;
+
+#define DTRACE_DYNHASH_FREE		0
+#define DTRACE_DYNHASH_SINK		1
+#define DTRACE_DYNHASH_VALID		2
+
+#define DTRACE_DYNVAR_CHUNKSIZE		256
+
+static void dtrace_dynvar_clean(dtrace_dstate_t *dstate)
+{
+	dtrace_dynvar_t		*dirty;
+	dtrace_dstate_percpu_t	*dcpu;
+	int			i, work = 0;
+
+	for (i = 0; i < NR_CPUS; i++) {
+		dcpu = &dstate->dtds_percpu[i];
+
+		ASSERT(dcpu->dtdsc_rinsing == NULL);
+
+		/*
+		 * If the dirty list is NULL, there is no dirty work to do.
+		*/
+		if (dcpu->dtdsc_dirty == NULL)
+			continue;
+
+		/*
+		 * If the clean list is non-NULL, then we're not going to do
+		 * any work for this CPU -- it means that there has not been
+		 * a dtrace_dynvar() allocation on this CPU (or from this CPU)
+		 * since the last time we cleaned house.
+		 */
+		if (dcpu->dtdsc_clean != NULL)
+			continue;
+
+		work = 1;
+
+		/*
+		 * Atomically move the dirty list aside.
+		 */
+		do {
+			dirty = dcpu->dtdsc_dirty;
+
+			/*
+			 * Before we zap the dirty list, set the rinsing list.
+			 * (This allows for a potential assertion in
+			 * dtrace_dynvar():  if a free dynamic variable appears
+			 * on a hash chain, either the dirty list or the
+			 * rinsing list for some CPU must be non-NULL.)
+			 */
+			dcpu->dtdsc_rinsing = dirty;
+			dtrace_membar_producer();
+		} while (cmpxchg(&dcpu->dtdsc_dirty, dirty, NULL) != dirty);
+	}
+
+	/*
+	 * No work to do; return.
+	 */
+	if (!work)
+		return;
+
+	dtrace_sync();
+
+	for (i = 0; i < NR_CPUS; i++) {
+		dcpu = &dstate->dtds_percpu[i];
+
+		if (dcpu->dtdsc_rinsing == NULL)
+			continue;
+
+		/*
+		 * We are now guaranteed that no hash chain contains a pointer
+		 * into this dirty list; we can make it clean.
+		 */
+		ASSERT(dcpu->dtdsc_clean == NULL);
+		dcpu->dtdsc_clean = dcpu->dtdsc_rinsing;
+		dcpu->dtdsc_rinsing = NULL;
+	}
+
+	/*
+	 * Before we actually set the state to be DTRACE_DSTATE_CLEAN, make
+	 * sure that all CPUs have seen all of the dtdsc_clean pointers.
+	 * This prevents a race whereby a CPU incorrectly decides that
+	 * the state should be something other than DTRACE_DSTATE_CLEAN
+	 * after dtrace_dynvar_clean() has completed.
+	 */
+	dtrace_sync();
+
+	dstate->dtds_state = DTRACE_DSTATE_CLEAN;
+}
+
+int dtrace_dstate_init(dtrace_dstate_t *dstate, size_t size)
+{
+	size_t		hashsize, maxper, min,
+			chunksize = dstate->dtds_chunksize;
+	void		*base;
+	uintptr_t	limit;
+	dtrace_dynvar_t	*dvar, *next, *start;
+	int		i;
+
+	ASSERT(MUTEX_HELD(&dtrace_lock));
+	ASSERT(dstate->dtds_base == NULL && dstate->dtds_percpu == NULL);
+
+	memset(dstate, 0, sizeof (dtrace_dstate_t));
+
+	if ((dstate->dtds_chunksize = chunksize) == 0)
+		dstate->dtds_chunksize = DTRACE_DYNVAR_CHUNKSIZE;
+
+	if (size < (min = dstate->dtds_chunksize + sizeof (dtrace_dynhash_t)))
+		size = min;
+
+	if ((base = kzalloc(size, GFP_KERNEL)) == NULL)
+		return -ENOMEM;
+
+	dstate->dtds_size = size;
+	dstate->dtds_base = base;
+	dstate->dtds_percpu = kmem_cache_alloc(dtrace_state_cache, GFP_KERNEL);
+	memset(dstate->dtds_percpu, 0,
+	       NR_CPUS * sizeof (dtrace_dstate_percpu_t));
+
+	hashsize = size / (dstate->dtds_chunksize + sizeof (dtrace_dynhash_t));
+
+	if (hashsize != 1 && (hashsize & 1))
+		hashsize--;
+
+	dstate->dtds_hashsize = hashsize;
+	dstate->dtds_hash = dstate->dtds_base;
+
+	/*
+	 * Set all of our hash buckets to point to the single sink, and (if
+	 * it hasn't already been set), set the sink's hash value to be the
+	 * sink sentinel value.  The sink is needed for dynamic variable
+	 * lookups to know that they have iterated over an entire, valid hash
+	 * chain.
+	 */
+	for (i = 0; i < hashsize; i++)
+		dstate->dtds_hash[i].dtdh_chain = &dtrace_dynhash_sink;
+
+	if (dtrace_dynhash_sink.dtdv_hashval != DTRACE_DYNHASH_SINK)
+		dtrace_dynhash_sink.dtdv_hashval = DTRACE_DYNHASH_SINK;
+
+	/*
+	 * Determine number of active CPUs.  Divide free list evenly among
+	 * active CPUs.
+	 */
+	start = (dtrace_dynvar_t *)((uintptr_t)base +
+				    hashsize * sizeof (dtrace_dynhash_t));
+	limit = (uintptr_t)base + size;
+
+	maxper = (limit - (uintptr_t)start) / NR_CPUS;
+	maxper = (maxper / dstate->dtds_chunksize) * dstate->dtds_chunksize;
+
+	for (i = 0; i < NR_CPUS; i++) {
+		dstate->dtds_percpu[i].dtdsc_free = dvar = start;
+
+		/*
+		 * If we don't even have enough chunks to make it once through
+		 * NCPUs, we're just going to allocate everything to the first
+		 * CPU.  And if we're on the last CPU, we're going to allocate
+		 * whatever is left over.  In either case, we set the limit to
+		 * be the limit of the dynamic variable space.
+		 */
+		if (maxper == 0 || i == NR_CPUS - 1) {
+			limit = (uintptr_t)base + size;
+			start = NULL;
+		} else {
+			limit = (uintptr_t)start + maxper;
+			start = (dtrace_dynvar_t *)limit;
+		}
+
+		ASSERT(limit <= (uintptr_t)base + size);
+
+		for (;;) {
+			next = (dtrace_dynvar_t *)((uintptr_t)dvar +
+						   dstate->dtds_chunksize);
+
+			if ((uintptr_t)next + dstate->dtds_chunksize >= limit)
+				break;
+
+			dvar->dtdv_next = next;
+			dvar = next;
+		}
+
+		if (maxper == 0)
+			break;
+	}
+
+	return 0;
+}
+
+void dtrace_dstate_fini(dtrace_dstate_t *dstate)
+{
+	/* FIXME: ASSERT(mutex_is_locked(&cpu_lock)); */
+
+	if (dstate->dtds_base == NULL)
+		return;
+
+	kfree(dstate->dtds_base);
+	kmem_cache_free(dtrace_state_cache, dstate->dtds_percpu);
+}
+
+void dtrace_vstate_fini(dtrace_vstate_t *vstate)
+{
+	/*
+	 * If only there was a logical XOR operator...
+	 */
+	ASSERT((vstate->dtvs_nglobals == 0) ^ (vstate->dtvs_globals != NULL));
+
+	if (vstate->dtvs_nglobals > 0)
+		kfree(vstate->dtvs_globals);
+
+	if (vstate->dtvs_ntlocals > 0)
+		kfree(vstate->dtvs_tlocals);
+
+	ASSERT((vstate->dtvs_nlocals == 0) ^ (vstate->dtvs_locals != NULL));
+
+	if (vstate->dtvs_nlocals > 0)
+		kfree(vstate->dtvs_locals);
+}
+
+static void dtrace_state_clean(dtrace_state_t *state)
+{
+	if (state->dts_activity == DTRACE_ACTIVITY_INACTIVE)
+		return;
+
+	dtrace_dynvar_clean(&state->dts_vstate.dtvs_dynvars);
+	dtrace_speculation_clean(state);
+}
+
+static void dtrace_state_deadman(dtrace_state_t *state)
+{
+	hrtime_t	now;
+
+	dtrace_sync();
+
+	now = dtrace_gethrtime();
+
+	if (state != dtrace_anon.dta_state &&
+	    now - state->dts_laststatus >= dtrace_deadman_user)
+		return;
+
+	/*
+	 * We must be sure that dts_alive never appears to be less than the
+	 * value upon entry to dtrace_state_deadman(), and because we lack a
+	 * dtrace_cas64(), we cannot store to it atomically.  We thus instead
+	 * store INT64_MAX to it, followed by a memory barrier, followed by
+	 * the new value.  This assures that dts_alive never appears to be
+	 * less than its true value, regardless of the order in which the
+	 * stores to the underlying storage are issued.
+	 */
+	state->dts_alive = INT64_MAX;
+	dtrace_membar_producer();
+	state->dts_alive = now;
+}
+
+dtrace_state_t *dtrace_state_create(struct file *file)
+{
+	dtrace_state_t	*state;
+	dtrace_optval_t	*opt;
+	int		bufsize = NR_CPUS * sizeof (dtrace_buffer_t), i;
+	const cred_t	*cr = file->f_cred;
+
+	ASSERT(mutex_is_locked(&dtrace_lock));
+	/* FIXME: ASSERT(mutex_is_locked(&cpu_lock)); */
+
+	state = kmalloc(sizeof (dtrace_state_t), GFP_KERNEL);
+	state->dts_epid = DTRACE_EPIDNONE + 1;
+	/* state->dts_dev = NULL;  -- FIXME: Do we even need this? */
+	state->dts_buffer = kzalloc(bufsize, GFP_KERNEL);
+	state->dts_aggbuffer = kzalloc(bufsize, GFP_KERNEL);
+	state->dts_cleaner = 0;
+	state->dts_deadman = 0;
+	state->dts_vstate.dtvs_state = state;
+
+	for (i = 0; i < DTRACEOPT_MAX; i++)
+		state->dts_options[i] = DTRACEOPT_UNSET;
+
+	/*
+	 * Set the default options.
+	 */
+	opt = state->dts_options;
+	opt[DTRACEOPT_BUFPOLICY] = DTRACEOPT_BUFPOLICY_SWITCH;
+	opt[DTRACEOPT_BUFRESIZE] = DTRACEOPT_BUFRESIZE_AUTO;
+	opt[DTRACEOPT_NSPEC] = dtrace_nspec_default;
+	opt[DTRACEOPT_SPECSIZE] = dtrace_specsize_default;
+	opt[DTRACEOPT_CPU] = (dtrace_optval_t)DTRACE_CPUALL;
+	opt[DTRACEOPT_STRSIZE] = dtrace_strsize_default;
+	opt[DTRACEOPT_STACKFRAMES] = dtrace_stackframes_default;
+	opt[DTRACEOPT_USTACKFRAMES] = dtrace_ustackframes_default;
+	opt[DTRACEOPT_CLEANRATE] = dtrace_cleanrate_default;
+	opt[DTRACEOPT_AGGRATE] = dtrace_aggrate_default;
+	opt[DTRACEOPT_SWITCHRATE] = dtrace_switchrate_default;
+	opt[DTRACEOPT_STATUSRATE] = dtrace_statusrate_default;
+	opt[DTRACEOPT_JSTACKFRAMES] = dtrace_jstackframes_default;
+	opt[DTRACEOPT_JSTACKSTRSIZE] = dtrace_jstackstrsize_default;
+
+	state->dts_activity = DTRACE_ACTIVITY_INACTIVE;
+
+#ifdef FIXME
+	/*
+	 * Set probe visibility and destructiveness based on user credential
+	 * information.  For actual anonymous tracing or if all privileges are
+	 * set, checks are bypassed.
+	 */
+	if (cr == NULL ||
+	    PRIV_POLICY_ONLY(cr, PRIV_ALL, FALSE)) {
+		state->dts_cred.dcr_visible = DTRACE_CRV_ALL;
+		state->dts_cred.dcr_action = DTRACE_CRA_ALL;
+	} else {
+		state->dts_cred.dcr_cred = get_cred(cr);
+
+		/*
+		 * CRA_PROC means "we have *some* privilege for dtrace" and
+		 * it unlocks the use of variables like pid, etc.
+		 */
+		if (PRIV_POLICY_ONLY(cr, PRIV_DTRACE_USER, FALSE) ||
+		    PRIV_POLICY_ONLY(cr, PRIV_DTRACE_PROC, FALSE))
+			state->dts_cred.dcr_action |= DTRACE_CRA_PROC;
+
+		/*
+		 * The DTRACE_USER privilege allows the use of syscall and
+		 * profile providers.  If the user also has PROC_OWNER, we
+		 * extend the scope to include additional visibility and
+		 * destructive power.
+		 */
+		if (PRIV_POLICY_ONLY(cr, PRIV_DTRACE_USER, FALSE)) {
+			if (PRIV_POLICY_ONLY(cr, PRIV_PROC_OWNER, FALSE))
+				state->dts_cred.dcr_visible |=
+					DTRACE_CRV_ALLPROC;
+
+			state->dts_cred.dcr_action |=
+					DTRACE_CRA_PROC_DESTRUCTIVE_ALLUSER;
+		}
+
+		/*
+		 * Holding the DTRACE_KERNEL privilege also implies that
+		 * the user has the DTRACE_USER privilege from a visibility
+		 * perspective.  But without further privileges, some
+		 * destructive actions are not available.
+		 */
+		if (PRIV_POLICY_ONLY(cr, PRIV_DTRACE_KERNEL, FALSE)) {
+			/*
+			 * Make all probes in all zones visible.  However,
+			 * this doesn't mean that all actions become available
+			 * to all zones.
+			 */
+			state->dts_cred.dcr_visible |= DTRACE_CRV_KERNEL |
+						       DTRACE_CRV_ALLPROC;
+			state->dts_cred.dcr_action |= DTRACE_CRA_KERNEL |
+						      DTRACE_CRA_PROC;
+
+			/*
+			 * Holding PROC_OWNER means that destructive actions
+			 * are allowed.
+			 */
+			if (PRIV_POLICY_ONLY(cr, PRIV_PROC_OWNER, FALSE))
+				state->dts_cred.dcr_action |=
+					DTRACE_CRA_PROC_DESTRUCTIVE_ALLUSER;
+		}
+
+		/*
+		 * Holding the DTRACE_PROC privilege gives control over the
+		 * fasttrap and pid providers.  We need to grant wider
+		 * destructive privileges in the event that the user has
+		 * PROC_OWNER .
+		*/
+		if (PRIV_POLICY_ONLY(cr, PRIV_DTRACE_PROC, FALSE)) {
+			if (PRIV_POLICY_ONLY(cr, PRIV_PROC_OWNER, FALSE))
+				state->dts_cred.dcr_action |=
+					DTRACE_CRA_PROC_DESTRUCTIVE_ALLUSER;
+		}
+	}
+#endif
+
+	return state;
+}
+
+static int dtrace_state_buffer(dtrace_state_t *state, dtrace_buffer_t *buf,
+			       int which)
+{
+	dtrace_optval_t	*opt = state->dts_options, size;
+	processorid_t	cpu = DTRACE_CPUALL;
+	int		flags = 0, rval;
+
+	ASSERT(mutex_is_locked(&dtrace_lock));
+	/* FIXME: ASSERT(mutex_is_locked(&cpu_lock)); */
+	ASSERT(which < DTRACEOPT_MAX);
+	ASSERT(state->dts_activity == DTRACE_ACTIVITY_INACTIVE ||
+	       (state == dtrace_anon.dta_state &&
+	       state->dts_activity == DTRACE_ACTIVITY_ACTIVE));
+
+	if (opt[which] == DTRACEOPT_UNSET || opt[which] == 0)
+		return 0;
+
+	if (opt[DTRACEOPT_CPU] != DTRACEOPT_UNSET)
+		cpu = opt[DTRACEOPT_CPU];
+
+	if (which == DTRACEOPT_SPECSIZE)
+		flags |= DTRACEBUF_NOSWITCH;
+
+	if (which == DTRACEOPT_BUFSIZE) {
+		if (opt[DTRACEOPT_BUFPOLICY] == DTRACEOPT_BUFPOLICY_RING)
+			flags |= DTRACEBUF_RING;
+
+		if (opt[DTRACEOPT_BUFPOLICY] == DTRACEOPT_BUFPOLICY_FILL)
+			flags |= DTRACEBUF_FILL;
+
+		if (state != dtrace_anon.dta_state ||
+		    state->dts_activity != DTRACE_ACTIVITY_ACTIVE)
+			flags |= DTRACEBUF_INACTIVE;
+	}
+
+	for (size = opt[which]; size >= sizeof (uint64_t); size >>= 1) {
+		/*
+		 * The size must be 8-byte aligned.  If the size is not 8-byte
+		 * aligned, drop it down by the difference.
+		 */
+		if (size & (sizeof (uint64_t) - 1))
+			size -= size & (sizeof (uint64_t) - 1);
+
+		if (size < state->dts_reserve) {
+			/*
+			 * Buffers always must be large enough to accommodate
+			 * their prereserved space.  We return -E2BIG instead
+			 * of ENOMEM in this case to allow for user-level
+			 * software to differentiate the cases.
+			 */
+			return -E2BIG;
+		}
+
+		rval = dtrace_buffer_alloc(buf, size, flags, cpu);
+
+		if (rval != -ENOMEM) {
+			opt[which] = size;
+			return rval;
+		}
+
+		if (opt[DTRACEOPT_BUFRESIZE] == DTRACEOPT_BUFRESIZE_MANUAL)
+			return rval;
+	}
+
+	return -ENOMEM;
+}
+
+static int dtrace_state_buffers(dtrace_state_t *state)
+{
+	dtrace_speculation_t	*spec = state->dts_speculations;
+	int			rval, i;
+
+	if ((rval = dtrace_state_buffer(state, state->dts_buffer,
+					DTRACEOPT_BUFSIZE)) != 0)
+		return rval;
+
+	if ((rval = dtrace_state_buffer(state, state->dts_aggbuffer,
+					DTRACEOPT_AGGSIZE)) != 0)
+		return rval;
+
+	for (i = 0; i < state->dts_nspeculations; i++) {
+		if ((rval = dtrace_state_buffer(state, spec[i].dtsp_buffer,
+						DTRACEOPT_SPECSIZE)) != 0)
+			return rval;
+	}
+
+	return 0;
+}
+
+static void dtrace_state_prereserve(dtrace_state_t *state)
+{
+	dtrace_ecb_t	*ecb;
+	dtrace_probe_t	*probe;
+
+	state->dts_reserve = 0;
+
+	if (state->dts_options[DTRACEOPT_BUFPOLICY] != DTRACEOPT_BUFPOLICY_FILL)
+		return;
+
+	/*
+	 * If our buffer policy is a "fill" buffer policy, we need to set the
+	 * prereserved space to be the space required by the END probes.
+	 */
+	probe = dtrace_probe_lookup_id(dtrace_probeid_end);
+	ASSERT(probe != NULL);
+
+	for (ecb = probe->dtpr_ecb; ecb != NULL; ecb = ecb->dte_next) {
+		if (ecb->dte_state != state)
+			continue;
+
+		state->dts_reserve += ecb->dte_needed + ecb->dte_alignment;
+	}
+}
+
+int dtrace_state_go(dtrace_state_t *state, processorid_t *cpu)
+{
+	dtrace_optval_t		*opt = state->dts_options, sz, nspec;
+	dtrace_speculation_t	*spec;
+	dtrace_buffer_t		*buf;
+	cyc_handler_t		hdlr;
+	cyc_time_t		when;
+	int			rval = 0, i,
+				bufsize = NR_CPUS * sizeof (dtrace_buffer_t);
+	dtrace_icookie_t	cookie;
+
+	/* FIXME: mutex_lock(&cpu_lock); */
+	mutex_lock(&dtrace_lock);
+
+	if (state->dts_activity != DTRACE_ACTIVITY_INACTIVE) {
+		rval = -EBUSY;
+		goto out;
+	}
+
+	/*
+	 * Before we can perform any checks, we must prime all of the
+	 * retained enablings that correspond to this state.
+	 */
+	dtrace_enabling_prime(state);
+
+	if (state->dts_destructive && !state->dts_cred.dcr_destructive) {
+		rval = -EACCES;
+		goto out;
+	}
+
+	dtrace_state_prereserve(state);
+
+	/*
+	 * Now we want to do is try to allocate our speculations.
+	 * We do not automatically resize the number of speculations; if
+	 * this fails, we will fail the operation.
+	 */
+	nspec = opt[DTRACEOPT_NSPEC];
+	ASSERT(nspec != DTRACEOPT_UNSET);
+
+	if (nspec > INT_MAX) {
+		rval = -ENOMEM;
+		goto out;
+	}
+
+	spec = kzalloc(nspec * sizeof (dtrace_speculation_t), GFP_KERNEL);
+	if (spec == NULL) {
+		rval = -ENOMEM;
+		goto out;
+	}
+
+	state->dts_speculations = spec;
+	state->dts_nspeculations = (int)nspec;
+
+	for (i = 0; i < nspec; i++) {
+		if ((buf = kzalloc(bufsize, GFP_KERNEL)) == NULL) {
+			rval = -ENOMEM;
+			goto err;
+		}
+
+		spec[i].dtsp_buffer = buf;
+	}
+
+	if (opt[DTRACEOPT_GRABANON] != DTRACEOPT_UNSET) {
+		if (dtrace_anon.dta_state == NULL) {
+			rval = -ENOENT;
+			goto out;
+		}
+
+		if (state->dts_necbs != 0) {
+			rval = -EALREADY;
+			goto out;
+		}
+
+		state->dts_anon = dtrace_anon_grab();
+		ASSERT(state->dts_anon != NULL);
+		state = state->dts_anon;
+
+		/*
+		 * We want "grabanon" to be set in the grabbed state, so we'll
+		 * copy that option value from the grabbing state into the
+		 * grabbed state.
+		 */
+		state->dts_options[DTRACEOPT_GRABANON] =
+						opt[DTRACEOPT_GRABANON];
+
+		*cpu = dtrace_anon.dta_beganon;
+
+		/*
+		 * If the anonymous state is active (as it almost certainly
+		 * is if the anonymous enabling ultimately matched anything),
+		 * we don't allow any further option processing -- but we
+		 * don't return failure.
+		 */
+		if (state->dts_activity != DTRACE_ACTIVITY_INACTIVE)
+			goto out;
+	}
+
+	if (opt[DTRACEOPT_AGGSIZE] != DTRACEOPT_UNSET &&
+	    opt[DTRACEOPT_AGGSIZE] != 0) {
+		if (state->dts_aggregations == NULL) {
+			/*
+			 * We're not going to create an aggregation buffer
+			 * because we don't have any ECBs that contain
+			 * aggregations -- set this option to 0.
+			 */
+			opt[DTRACEOPT_AGGSIZE] = 0;
+		} else {
+			/*
+			 * If we have an aggregation buffer, we must also have
+			 * a buffer to use as scratch.
+			 */
+			if (opt[DTRACEOPT_BUFSIZE] == DTRACEOPT_UNSET ||
+			    opt[DTRACEOPT_BUFSIZE] < state->dts_needed)
+				opt[DTRACEOPT_BUFSIZE] = state->dts_needed;
+		}
+	}
+
+	if (opt[DTRACEOPT_SPECSIZE] != DTRACEOPT_UNSET &&
+	    opt[DTRACEOPT_SPECSIZE] != 0) {
+		/*
+		 * We are not going to create speculation buffers if we do not
+		 * have any ECBs that actually speculate.
+		 */
+		if (!state->dts_speculates)
+			opt[DTRACEOPT_SPECSIZE] = 0;
+	}
+
+	/*
+	 * The bare minimum size for any buffer that we're actually going to
+	 * do anything to is sizeof (uint64_t).
+	 */
+	sz = sizeof (uint64_t);
+
+	if ((state->dts_needed != 0 && opt[DTRACEOPT_BUFSIZE] < sz) ||
+	    (state->dts_speculates && opt[DTRACEOPT_SPECSIZE] < sz) ||
+	    (state->dts_aggregations != NULL && opt[DTRACEOPT_AGGSIZE] < sz)) {
+		/*
+		 * A buffer size has been explicitly set to 0 (or to a size
+		 * that will be adjusted to 0) and we need the space -- we
+		 * need to return failure.  We return -ENOSPC to differentiate
+		 * it from failing to allocate a buffer due to failure to meet
+		 * the reserve (for which we return -E2BIG).
+		 */
+		rval = -ENOSPC;
+		goto out;
+	}
+
+	if ((rval = dtrace_state_buffers(state)) != 0)
+		goto err;
+
+	if ((sz = opt[DTRACEOPT_DYNVARSIZE]) == DTRACEOPT_UNSET)
+		sz = dtrace_dstate_defsize;
+
+	do {
+		rval = dtrace_dstate_init(&state->dts_vstate.dtvs_dynvars, sz);
+
+		if (rval == 0)
+			break;
+
+		if (opt[DTRACEOPT_BUFRESIZE] == DTRACEOPT_BUFRESIZE_MANUAL)
+			goto err;
+	} while (sz >>= 1);
+
+	opt[DTRACEOPT_DYNVARSIZE] = sz;
+
+	if (rval != 0)
+		goto err;
+
+	if (opt[DTRACEOPT_STATUSRATE] > dtrace_statusrate_max)
+		opt[DTRACEOPT_STATUSRATE] = dtrace_statusrate_max;
+
+	if (opt[DTRACEOPT_CLEANRATE] == 0)
+		opt[DTRACEOPT_CLEANRATE] = dtrace_cleanrate_max;
+
+	if (opt[DTRACEOPT_CLEANRATE] < dtrace_cleanrate_min)
+		opt[DTRACEOPT_CLEANRATE] = dtrace_cleanrate_min;
+
+	if (opt[DTRACEOPT_CLEANRATE] > dtrace_cleanrate_max)
+		opt[DTRACEOPT_CLEANRATE] = dtrace_cleanrate_max;
+
+	hdlr.cyh_func = (cyc_func_t)dtrace_state_clean;
+	hdlr.cyh_arg = state;
+	hdlr.cyh_level = CY_LOW_LEVEL;
+
+	when.cyt_when = 0;
+	when.cyt_interval = opt[DTRACEOPT_CLEANRATE];
+
+	state->dts_cleaner = cyclic_add(&hdlr, &when);
+
+	hdlr.cyh_func = (cyc_func_t)dtrace_state_deadman;
+	hdlr.cyh_arg = state;
+	hdlr.cyh_level = CY_LOW_LEVEL;
+
+	when.cyt_when = 0;
+	when.cyt_interval = dtrace_deadman_interval;
+
+	state->dts_alive = state->dts_laststatus = dtrace_gethrtime();
+	state->dts_deadman = cyclic_add(&hdlr, &when);
+
+	state->dts_activity = DTRACE_ACTIVITY_WARMUP;
+
+	/*
+	 * Now it's time to actually fire the BEGIN probe.  We need to disable
+	 * interrupts here both to record the CPU on which we fired the BEGIN
+	 * probe (the data from this CPU will be processed first at user
+	 * level) and to manually activate the buffer for this CPU.
+	 */
+	cookie = dtrace_interrupt_disable();
+	*cpu = smp_processor_id();
+	ASSERT(state->dts_buffer[*cpu].dtb_flags & DTRACEBUF_INACTIVE);
+	state->dts_buffer[*cpu].dtb_flags &= ~DTRACEBUF_INACTIVE;
+
+	dtrace_probe(dtrace_probeid_begin, (uint64_t)(uintptr_t)state, 0, 0, 0,
+		     0);
+	dtrace_interrupt_enable(cookie);
+
+	/*
+	 * We may have had an exit action from a BEGIN probe; only change our
+	 * state to ACTIVE if we're still in WARMUP.
+	 */
+	ASSERT(state->dts_activity == DTRACE_ACTIVITY_WARMUP ||
+	state->dts_activity == DTRACE_ACTIVITY_DRAINING);
+
+	if (state->dts_activity == DTRACE_ACTIVITY_WARMUP)
+		state->dts_activity = DTRACE_ACTIVITY_ACTIVE;
+
+	/*
+	 * Regardless of whether or not now we're in ACTIVE or DRAINING, we
+	 * want each CPU to transition its principal buffer out of the
+	 * INACTIVE state.  Doing this assures that no CPU will suddenly begin
+	 * processing an ECB halfway down a probe's ECB chain; all CPUs will
+	 * atomically transition from processing none of a state's ECBs to
+	 * processing all of them.
+	 */
+	dtrace_xcall(DTRACE_CPUALL, (dtrace_xcall_t)dtrace_buffer_activate,
+		     state);
+	goto out;
+
+err:
+	dtrace_buffer_free(state->dts_buffer);
+	dtrace_buffer_free(state->dts_aggbuffer);
+
+	if ((nspec = state->dts_nspeculations) == 0) {
+		ASSERT(state->dts_speculations == NULL);
+		goto out;
+	}
+
+	spec = state->dts_speculations;
+	ASSERT(spec != NULL);
+
+	for (i = 0; i < state->dts_nspeculations; i++) {
+		if ((buf = spec[i].dtsp_buffer) == NULL)
+			break;
+
+		dtrace_buffer_free(buf);
+		kfree(buf);
+	}
+
+	kfree(spec);
+	state->dts_nspeculations = 0;
+	state->dts_speculations = NULL;
+
+out:
+	mutex_unlock(&dtrace_lock);
+	/* FIXME: mutex_unlock(&cpu_lock); */
+
+	return rval;
+}
+
+int dtrace_state_option(dtrace_state_t *state, dtrace_optid_t option,
+			dtrace_optval_t val)
+{
+	ASSERT(mutex_is_locked(&dtrace_lock));
+
+	if (state->dts_activity != DTRACE_ACTIVITY_INACTIVE)
+		return -EBUSY;
+
+	if (option >= DTRACEOPT_MAX)
+		return -EINVAL;
+
+	if (option != DTRACEOPT_CPU && val < 0)
+		return -EINVAL;
+
+	switch (option) {
+	case DTRACEOPT_DESTRUCTIVE:
+		if (dtrace_destructive_disallow)
+			return -EACCES;
+
+		state->dts_cred.dcr_destructive = 1;
+		break;
+
+	case DTRACEOPT_BUFSIZE:
+	case DTRACEOPT_DYNVARSIZE:
+	case DTRACEOPT_AGGSIZE:
+	case DTRACEOPT_SPECSIZE:
+	case DTRACEOPT_STRSIZE:
+		if (val < 0)
+			return -EINVAL;
+
+		/*
+		 * If this is an otherwise negative value, set it to the
+		 * highest multiple of 128m less than LONG_MAX.  Technically,
+		 * we're adjusting the size without regard to the buffer
+		 * resizing policy, but in fact, this has no effect -- if we
+		 * set the buffer size to ~LONG_MAX and the buffer policy is
+		 * ultimately set to be "manual", the buffer allocation is
+		 * guaranteed to fail, if only because the allocation requires
+		 * two buffers.  (We set the the size to the highest multiple
+		 * of 128m because it ensures that the size will remain a
+		 * multiple of a megabyte when repeatedly halved -- all the
+		 * way down to 15m.)
+		 */
+		if (val >= LONG_MAX)
+			val = LONG_MAX - (1 << 27) + 1;
+	}
+
+	state->dts_options[option] = val;
+
+	return 0;
+}
+
+void dtrace_state_destroy(dtrace_state_t *state)
+{
+	dtrace_ecb_t		*ecb;
+	dtrace_vstate_t		*vstate = &state->dts_vstate;
+	int			i;
+	dtrace_speculation_t	*spec = state->dts_speculations;
+	int			nspec = state->dts_nspeculations;
+	uint32_t		match;
+
+	ASSERT(mutex_is_locked(&dtrace_lock));
+	/* FIXME: ASSERT(mutex_is_locked(&cpu_lock)); */
+
+	/*
+	 * First, retract any retained enablings for this state.
+	 */
+	dtrace_enabling_retract(state);
+	ASSERT(state->dts_nretained == 0);
+
+	if (state->dts_activity == DTRACE_ACTIVITY_ACTIVE ||
+	    state->dts_activity == DTRACE_ACTIVITY_DRAINING) {
+		/*
+		 * We have managed to come into dtrace_state_destroy() on a
+		 * hot enabling -- almost certainly because of a disorderly
+		 * shutdown of a consumer.  (That is, a consumer that is
+		 * exiting without having called dtrace_stop().) In this case,
+		 * we're going to set our activity to be KILLED, and then
+		 * issue a sync to be sure that everyone is out of probe
+		 * context before we start blowing away ECBs.
+		 */
+		state->dts_activity = DTRACE_ACTIVITY_KILLED;
+		dtrace_sync();
+	}
+
+	/*
+	 * Release the credential hold we took in dtrace_state_create().
+	 */
+	if (state->dts_cred.dcr_cred != NULL)
+		put_cred(state->dts_cred.dcr_cred);
+
+	/*
+	 * Now we can safely disable and destroy any enabled probes.  Because
+	 * any DTRACE_PRIV_KERNEL probes may actually be slowing our progress
+	 * (especially if they're all enabled), we take two passes through the
+	 * ECBs: in the first, we disable just DTRACE_PRIV_KERNEL probes, and
+	 * in the second we disable whatever is left over.
+	*/
+	for (match = DTRACE_PRIV_KERNEL; ; match = 0) {
+		for (i = 0; i < state->dts_necbs; i++) {
+			if ((ecb = state->dts_ecbs[i]) == NULL)
+				continue;
+
+			if (match && ecb->dte_probe != NULL) {
+				dtrace_probe_t		*probe =
+							ecb->dte_probe;
+				dtrace_provider_t	*prov =
+							probe->dtpr_provider;
+
+				if (!(prov->dtpv_priv.dtpp_flags & match))
+					continue;
+			}
+
+			dtrace_ecb_disable(ecb);
+			dtrace_ecb_destroy(ecb);
+		}
+
+		if (!match)
+			break;
+	}
+
+	/*
+	 * Before we free the buffers, perform one more sync to assure that
+	 * every CPU is out of probe context.
+	 */
+	dtrace_sync();
+
+	dtrace_buffer_free(state->dts_buffer);
+	dtrace_buffer_free(state->dts_aggbuffer);
+
+	for (i = 0; i < nspec; i++)
+		dtrace_buffer_free(spec[i].dtsp_buffer);
+
+	if (state->dts_cleaner != CYCLIC_NONE)
+		cyclic_remove(state->dts_cleaner);
+
+	if (state->dts_deadman != CYCLIC_NONE)
+		cyclic_remove(state->dts_deadman);
+
+	dtrace_dstate_fini(&vstate->dtvs_dynvars);
+	dtrace_vstate_fini(vstate);
+	kfree(state->dts_ecbs);
+
+	if (state->dts_aggregations != NULL) {
+#ifdef DEBUG
+		for (i = 0; i < state->dts_naggregations; i++)
+			ASSERT(state->dts_aggregations[i] == NULL);
+#endif
+
+		ASSERT(state->dts_naggregations > 0);
+		kfree(state->dts_aggregations);
+	}
+
+	kfree(state->dts_buffer);
+	kfree(state->dts_aggbuffer);
+
+	for (i = 0; i < nspec; i++)
+		kfree(spec[i].dtsp_buffer);
+
+	kfree(spec);
+
+	dtrace_format_destroy(state);
+}
diff -urN ../linux-2.6.34/kernel/dtrace/dtrace_util.c ./kernel/dtrace/dtrace_util.c
--- ../linux-2.6.34/kernel/dtrace/dtrace_util.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/dtrace_util.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,122 @@
+/*
+ * FILE:	dtrace_util.c
+ * DESCRIPTION:	DTrace utility functions
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include "dtrace.h"
+
+int dtrace_badattr(const dtrace_attribute_t *a)
+{
+	return a->dtat_name > DTRACE_STABILITY_MAX ||
+	       a->dtat_data > DTRACE_STABILITY_MAX ||
+	       a->dtat_class > DTRACE_CLASS_MAX;
+}
+
+/*
+ * Compare two strings using safe loads.
+ */
+int dtrace_strncmp(char *s1, char *s2, size_t limit)
+{
+	uint8_t			c1, c2;
+	volatile uint16_t	*flags;
+
+	if (s1 == s2 || limit == 0)
+		return 0;
+
+	flags = (volatile uint16_t *)
+		&cpu_core[smp_processor_id()].cpuc_dtrace_flags;
+
+	do {
+		if (s1 == NULL)
+			c1 = '\0';
+		else
+			c1 = dtrace_load8((uintptr_t)s1++);
+
+		if (s2 == NULL)
+			c2 = '\0';
+		else
+			c2 = dtrace_load8((uintptr_t)s2++);
+
+		if (c1 != c2)
+			return (c1 - c2);
+	} while (--limit && c1 != '\0' && !(*flags & CPU_DTRACE_FAULT));
+
+	return 0;
+}
+
+/*
+ * Compute strlen(s) for a string using safe memory accesses.  The additional
+ * len parameter is used to specify a maximum length to ensure completion.
+ */
+size_t dtrace_strlen(const char *s, size_t lim)
+{
+	uint_t	len;
+
+	for (len = 0; len != lim; len++) {
+		if (dtrace_load8((uintptr_t)s++) == '\0')
+			break;
+	}
+
+	return len;
+}
+
+#define DTRACE_ISALPHA(c)	(((c) >= 'a' && (c) <= 'z') || \
+				 ((c) >= 'A' && (c) <= 'Z'))
+int dtrace_badname(const char *s)
+{
+	char	c;
+
+	if (s == NULL || (c = *s++) == '\0')
+		return 0;
+
+	if (!DTRACE_ISALPHA(c) && c != '-' && c!= '_' && c != '.')
+		return 1;
+
+	while ((c = *s++) != '\0') {
+		if (!DTRACE_ISALPHA(c) && (c < '0' || c > '9') &&
+		    c != '-' && c!= '_' && c != '.' && c != '`')
+			return 1;
+	}
+
+	return 0;
+}
+
+void dtrace_cred2priv(const cred_t *cr, uint32_t *privp, uid_t *uidp)
+{
+#ifdef FIXME
+/*
+ * This should probably be rewritten based on capabilities in the cred_t struct.
+ */
+	uint32_t	priv;
+
+	if (cr == NULL)
+		priv = DTRACE_PRIV_ALL;
+	else {
+		const cred_t	*lcr = get_cred(cr);
+
+		if (PRIV_POLICY_ONLY(lcr, PRIV_ALL, FALSE))
+			priv = DTRACE_PRIV_ALL;
+		else {
+			*uidp = lcr->uid;
+			priv = 0;
+
+			if (PRIV_POLICY_ONLY(lcr, PRIV_DTRACE_KERNEL, FALSE))
+				priv |= DTRACE_PRIV_KERNEL | DTRACE_PRIV_USER;
+			else if (PRIV_POLICY_ONLY(lcr, PRIV_DTRACE_USER,
+						  FALSE))
+				priv |= DTRACE_PRIV_USER;
+
+			if (PRIV_POLICY_ONLY(lcr, PRIV_DTRACE_PROC, FALSE))
+				priv |= DTRACE_PRIV_PROC;
+			if (PRIV_POLICY_ONLY(lcr, PRIV_PROC_OWNER, FALSE))
+				priv |= DTRACE_PRIV_OWNER;
+		}
+
+		put_cred(cr);
+	}
+
+	*privp = priv;
+#endif
+}
diff -urN ../linux-2.6.34/kernel/dtrace/fasttrap_dev.c ./kernel/dtrace/fasttrap_dev.c
--- ../linux-2.6.34/kernel/dtrace/fasttrap_dev.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/fasttrap_dev.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,58 @@
+/*
+ * FILE:	fasttrap_dev.c
+ * DESCRIPTION:	Fasttrap Tracing: device file handling
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/fs.h>
+#include <linux/miscdevice.h>
+
+#include "dtrace_dev.h"
+
+static long fasttrap_ioctl(struct file *file,
+			 unsigned int cmd, unsigned long arg)
+{
+	return -EAGAIN;
+}
+
+static int fasttrap_open(struct inode *inode, struct file *file)
+{
+	return -EAGAIN;
+}
+
+static int fasttrap_close(struct inode *inode, struct file *file)
+{
+	return 0;
+}
+
+static const struct file_operations fasttrap_fops = {
+	.owner  = THIS_MODULE,
+        .unlocked_ioctl = fasttrap_ioctl,
+        .open   = fasttrap_open,
+        .release = fasttrap_close,
+};
+
+static struct miscdevice fasttrap_dev = {
+	.minor = DT_DEV_FASTTRAP_MINOR,
+	.name = "fasttrap",
+	.nodename = "dtrace/provider/fasttrap",
+	.fops = &fasttrap_fops,
+};
+
+int fasttrap_dev_init(void)
+{
+	int ret = 0;
+
+	ret = misc_register(&fasttrap_dev);
+	if (ret)
+		pr_err("%s: Can't register misc device %d\n",
+		       fasttrap_dev.name, fasttrap_dev.minor);
+
+	return ret;
+}
+
+void fasttrap_dev_exit(void)
+{
+	misc_deregister(&fasttrap_dev);
+}
diff -urN ../linux-2.6.34/kernel/dtrace/fasttrap.h ./kernel/dtrace/fasttrap.h
--- ../linux-2.6.34/kernel/dtrace/fasttrap.h	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/fasttrap.h	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,7 @@
+#ifndef _FASTTRAP_H_
+#define _FASTTRAP_H_
+
+extern int fasttrap_dev_init(void);
+extern int fasttrap_dev_exit(void);
+
+#endif /* _FASTTRAP_H_ */
diff -urN ../linux-2.6.34/kernel/dtrace/fasttrap_mod.c ./kernel/dtrace/fasttrap_mod.c
--- ../linux-2.6.34/kernel/dtrace/fasttrap_mod.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/fasttrap_mod.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,25 @@
+/*
+ * FILE:	fasttrap_mod.c
+ * DESCRIPTION:	Fasttrap Tracing: module handling
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/module.h>
+
+#include "dtrace.h"
+#include "dtrace_dev.h"
+#include "fasttrap.h"
+
+MODULE_AUTHOR("Kris Van Hees (kris.van.hees@oracle.com)");
+MODULE_DESCRIPTION("Fasttrap Tracing");
+MODULE_VERSION("v0.1");
+MODULE_LICENSE("Proprietary");
+
+static const dtrace_pattr_t fasttrap_attr = {
+};
+
+static dtrace_pops_t fasttrap_pops = {
+};
+
+DT_PROVIDER_MODULE(fasttrap)
diff -urN ../linux-2.6.34/kernel/dtrace/fbt_dev.c ./kernel/dtrace/fbt_dev.c
--- ../linux-2.6.34/kernel/dtrace/fbt_dev.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/fbt_dev.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,58 @@
+/*
+ * FILE:	fbt_dev.c
+ * DESCRIPTION:	Function Boundary Tracing: device file handling
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/fs.h>
+#include <linux/miscdevice.h>
+
+#include "dtrace_dev.h"
+
+static long fbt_ioctl(struct file *file,
+			 unsigned int cmd, unsigned long arg)
+{
+	return -EAGAIN;
+}
+
+static int fbt_open(struct inode *inode, struct file *file)
+{
+	return -EAGAIN;
+}
+
+static int fbt_close(struct inode *inode, struct file *file)
+{
+	return 0;
+}
+
+static const struct file_operations fbt_fops = {
+	.owner  = THIS_MODULE,
+        .unlocked_ioctl = fbt_ioctl,
+        .open   = fbt_open,
+        .release = fbt_close,
+};
+
+static struct miscdevice fbt_dev = {
+	.minor = DT_DEV_FBT_MINOR,
+	.name = "fbt",
+	.nodename = "dtrace/provider/fbt",
+	.fops = &fbt_fops,
+};
+
+int fbt_dev_init(void)
+{
+	int ret = 0;
+
+	ret = misc_register(&fbt_dev);
+	if (ret)
+		pr_err("%s: Can't register misc device %d\n",
+		       fbt_dev.name, fbt_dev.minor);
+
+	return ret;
+}
+
+void fbt_dev_exit(void)
+{
+	misc_deregister(&fbt_dev);
+}
diff -urN ../linux-2.6.34/kernel/dtrace/fbt.h ./kernel/dtrace/fbt.h
--- ../linux-2.6.34/kernel/dtrace/fbt.h	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/fbt.h	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,7 @@
+#ifndef _FBT_H_
+#define _FBT_H_
+
+extern int fbt_dev_init(void);
+extern int fbt_dev_exit(void);
+
+#endif /* _FBT_H_ */
diff -urN ../linux-2.6.34/kernel/dtrace/fbt_mod.c ./kernel/dtrace/fbt_mod.c
--- ../linux-2.6.34/kernel/dtrace/fbt_mod.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/fbt_mod.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,25 @@
+/*
+ * FILE:	fbt_dmod.c
+ * DESCRIPTION:	Function Boundary Tracing: module handling
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/module.h>
+
+#include "dtrace.h"
+#include "dtrace_dev.h"
+#include "fbt.h"
+
+MODULE_AUTHOR("Kris Van Hees (kris.van.hees@oracle.com)");
+MODULE_DESCRIPTION("Function Boundary Tracing");
+MODULE_VERSION("v0.1");
+MODULE_LICENSE("Proprietary");
+
+static const dtrace_pattr_t fbt_attr = {
+};
+
+static dtrace_pops_t fbt_pops = {
+};
+
+DT_PROVIDER_MODULE(fbt);
diff -urN ../linux-2.6.34/kernel/dtrace/Kconfig ./kernel/dtrace/Kconfig
--- ../linux-2.6.34/kernel/dtrace/Kconfig	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/Kconfig	2010-12-02 22:05:04.000000000 -0500
@@ -0,0 +1,55 @@
+#
+# DTrace Configuration
+#
+
+menuconfig DTRACE
+	bool "DTrace (Dynamic Tracing) Support"
+	default y
+	help
+	  To be written.
+
+if DTRACE
+
+config DT_CORE
+	tristate "DTrace core"
+	depends on DTRACE
+	help
+	  To be written.
+
+config DT_FASTTRAP
+	tristate "Fasttrap Tracing"
+	depends on DTRACE
+	help
+	  To be written.
+
+config DT_FBT
+	tristate "Function Boundary Tracing"
+	depends on DTRACE
+	help
+	  To be written.
+
+config DT_LOCKSTAT
+	tristate "Lock Statistics"
+	depends on DTRACE
+	help
+	  To be written.
+
+config DT_PROFILE
+	tristate "Profile Interrupt Tracing"
+	depends on DTRACE
+	help
+	  To be written.
+
+config DT_SDT
+	tristate "Statically Defined Tracing"
+	depends on DTRACE
+	help
+	  To be written.
+
+config DT_SYSTRACE
+	tristate "System Call Tracing"
+	depends on DTRACE
+	help
+	  To be written.
+
+endif   #DTRACE
diff -urN ../linux-2.6.34/kernel/dtrace/lockstat_dev.c ./kernel/dtrace/lockstat_dev.c
--- ../linux-2.6.34/kernel/dtrace/lockstat_dev.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/lockstat_dev.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,58 @@
+/*
+ * FILE:	lockstat_dev.c
+ * DESCRIPTION:	Lock Statistics: device file handling
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/fs.h>
+#include <linux/miscdevice.h>
+
+#include "dtrace_dev.h"
+
+static long lockstat_ioctl(struct file *file,
+			 unsigned int cmd, unsigned long arg)
+{
+	return -EAGAIN;
+}
+
+static int lockstat_open(struct inode *inode, struct file *file)
+{
+	return -EAGAIN;
+}
+
+static int lockstat_close(struct inode *inode, struct file *file)
+{
+	return 0;
+}
+
+static const struct file_operations lockstat_fops = {
+	.owner  = THIS_MODULE,
+        .unlocked_ioctl = lockstat_ioctl,
+        .open   = lockstat_open,
+        .release = lockstat_close,
+};
+
+static struct miscdevice lockstat_dev = {
+	.minor = DT_DEV_LOCKSTAT_MINOR,
+	.name = "dtrace",
+	.nodename = "dtrace/provider/lockstat",
+	.fops = &lockstat_fops,
+};
+
+int lockstat_dev_init(void)
+{
+	int ret = 0;
+
+	ret = misc_register(&lockstat_dev);
+	if (ret)
+		pr_err("%s: Can't register misc device %d\n",
+		       lockstat_dev.name, lockstat_dev.minor);
+
+	return ret;
+}
+
+void lockstat_dev_exit(void)
+{
+	misc_deregister(&lockstat_dev);
+}
diff -urN ../linux-2.6.34/kernel/dtrace/lockstat.h ./kernel/dtrace/lockstat.h
--- ../linux-2.6.34/kernel/dtrace/lockstat.h	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/lockstat.h	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,7 @@
+#ifndef _LOCKSTAT_H_
+#define _LOCKSTAT_H_
+
+extern int lockstat_dev_init(void);
+extern int lockstat_dev_exit(void);
+
+#endif /* _LOCKSTAT_H_ */
diff -urN ../linux-2.6.34/kernel/dtrace/lockstat_mod.c ./kernel/dtrace/lockstat_mod.c
--- ../linux-2.6.34/kernel/dtrace/lockstat_mod.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/lockstat_mod.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,25 @@
+/*
+ * FILE:	lockstat_mod.c
+ * DESCRIPTION:	Lock Statistics: module handling
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/module.h>
+
+#include "dtrace.h"
+#include "dtrace_dev.h"
+#include "lockstat.h"
+
+MODULE_AUTHOR("Kris Van Hees (kris.van.hees@oracle.com)");
+MODULE_DESCRIPTION("Lock Statistics");
+MODULE_VERSION("v0.1");
+MODULE_LICENSE("Proprietary");
+
+static const dtrace_pattr_t lockstat_attr = {
+};
+
+static dtrace_pops_t lockstat_pops = {
+};
+
+DT_PROVIDER_MODULE(lockstat)
diff -urN ../linux-2.6.34/kernel/dtrace/Makefile ./kernel/dtrace/Makefile
--- ../linux-2.6.34/kernel/dtrace/Makefile	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/Makefile	2010-12-02 22:05:11.000000000 -0500
@@ -0,0 +1,28 @@
+#
+# Makefile for DTrace
+#
+
+obj-$(CONFIG_DT_CORE)		+= dtrace.o
+obj-$(CONFIG_DT_FASTTRAP)	+= fasttrap.o
+obj-$(CONFIG_DT_FBT)		+= fbt.o
+obj-$(CONFIG_DT_LOCKSTAT)	+= lockstat.o
+obj-$(CONFIG_DT_PROFILE)	+= profile.o
+obj-$(CONFIG_DT_SDT)		+= sdt.o
+obj-$(CONFIG_DT_SYSTRACE)	+= systrace.o
+
+dtrace-y			:= dtrace_mod.o dtrace_dev.o \
+				   dtrace_actdesc.o dtrace_anon.o \
+				   dtrace_buffer.o dtrace_dif.o dtrace_dof.o \
+				   dtrace_ecb.o dtrace_enable.o \
+				   dtrace_fmt.o dtrace_hash.o \
+				   dtrace_match.o dtrace_probe.o \
+				   dtrace_probe_ctx.o \
+				   dtrace_ptofapi.o dtrace_predicate.o \
+				   dtrace_spec.o dtrace_state.o dtrace_util.o \
+				   cyclic.o
+fasttrap-y			:= fasttrap_mod.o fasttrap_dev.o
+fbt-y				:= fbt_mod.o fbt_dev.o
+lockstat-y			:= lockstat_mod.o lockstat_dev.o
+profile-y			:= profile_mod.o profile_dev.o
+sdt-y				:= sdt_mod.o sdt_dev.o
+systrace-y			:= systrace_mod.o systrace_dev.o
diff -urN ../linux-2.6.34/kernel/dtrace/profile_dev.c ./kernel/dtrace/profile_dev.c
--- ../linux-2.6.34/kernel/dtrace/profile_dev.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/profile_dev.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,58 @@
+/*
+ * FILE:	profile_dev.c
+ * DESCRIPTION:	Profile Interrupt Tracing: device file handling
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/fs.h>
+#include <linux/miscdevice.h>
+
+#include "dtrace_dev.h"
+
+static long profile_ioctl(struct file *file,
+			 unsigned int cmd, unsigned long arg)
+{
+	return -EAGAIN;
+}
+
+static int profile_open(struct inode *inode, struct file *file)
+{
+	return -EAGAIN;
+}
+
+static int profile_close(struct inode *inode, struct file *file)
+{
+	return 0;
+}
+
+static const struct file_operations profile_fops = {
+	.owner  = THIS_MODULE,
+        .unlocked_ioctl = profile_ioctl,
+        .open   = profile_open,
+        .release = profile_close,
+};
+
+static struct miscdevice profile_dev = {
+	.minor = DT_DEV_PROFILE_MINOR,
+	.name = "profile",
+	.nodename = "dtrace/provider/profile",
+	.fops = &profile_fops,
+};
+
+int profile_dev_init(void)
+{
+	int ret = 0;
+
+	ret = misc_register(&profile_dev);
+	if (ret)
+		pr_err("%s: Can't register misc device %d\n",
+		       profile_dev.name, profile_dev.minor);
+
+	return ret;
+}
+
+void profile_dev_exit(void)
+{
+	misc_deregister(&profile_dev);
+}
diff -urN ../linux-2.6.34/kernel/dtrace/profile.h ./kernel/dtrace/profile.h
--- ../linux-2.6.34/kernel/dtrace/profile.h	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/profile.h	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,7 @@
+#ifndef _PROFILE_H_
+#define _PROFILE_H_
+
+extern int profile_dev_init(void);
+extern int profile_dev_exit(void);
+
+#endif /* _PROFILE_H_ */
diff -urN ../linux-2.6.34/kernel/dtrace/profile_mod.c ./kernel/dtrace/profile_mod.c
--- ../linux-2.6.34/kernel/dtrace/profile_mod.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/profile_mod.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,25 @@
+/*
+ * FILE:	profile_mod.c
+ * DESCRIPTION:	Profile Interrupt Tracing: module handling
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/module.h>
+
+#include "dtrace.h"
+#include "dtrace_dev.h"
+#include "profile.h"
+
+MODULE_AUTHOR("Kris Van Hees (kris.van.hees@oracle.com)");
+MODULE_DESCRIPTION("Profile Interrupt Tracing");
+MODULE_VERSION("v0.1");
+MODULE_LICENSE("Proprietary");
+
+static const dtrace_pattr_t profile_attr = {
+};
+
+static dtrace_pops_t profile_pops = {
+};
+
+DT_PROVIDER_MODULE(profile)
diff -urN ../linux-2.6.34/kernel/dtrace/sdt_dev.c ./kernel/dtrace/sdt_dev.c
--- ../linux-2.6.34/kernel/dtrace/sdt_dev.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/sdt_dev.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,58 @@
+/*
+ * FILE:	sdt_dev.c
+ * DESCRIPTION:	Statically Defined Tracing: device file handling
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/fs.h>
+#include <linux/miscdevice.h>
+
+#include "dtrace_dev.h"
+
+static long sdt_ioctl(struct file *file,
+			 unsigned int cmd, unsigned long arg)
+{
+	return -EAGAIN;
+}
+
+static int sdt_open(struct inode *inode, struct file *file)
+{
+	return -EAGAIN;
+}
+
+static int sdt_close(struct inode *inode, struct file *file)
+{
+	return 0;
+}
+
+static const struct file_operations sdt_fops = {
+	.owner  = THIS_MODULE,
+        .unlocked_ioctl = sdt_ioctl,
+        .open   = sdt_open,
+        .release = sdt_close,
+};
+
+static struct miscdevice sdt_dev = {
+	.minor = DT_DEV_SDT_MINOR,
+	.name = "sdt",
+	.nodename = "dtrace/provider/sdt",
+	.fops = &sdt_fops,
+};
+
+int sdt_dev_init(void)
+{
+	int ret = 0;
+
+	ret = misc_register(&sdt_dev);
+	if (ret)
+		pr_err("%s: Can't register misc device %d\n",
+		       sdt_dev.name, sdt_dev.minor);
+
+	return ret;
+}
+
+void sdt_dev_exit(void)
+{
+	misc_deregister(&sdt_dev);
+}
diff -urN ../linux-2.6.34/kernel/dtrace/sdt.h ./kernel/dtrace/sdt.h
--- ../linux-2.6.34/kernel/dtrace/sdt.h	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/sdt.h	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,7 @@
+#ifndef _SDT_H_
+#define _SDT_H_
+
+extern int sdt_dev_init(void);
+extern int sdt_dev_exit(void);
+
+#endif /* _SDT_H_ */
diff -urN ../linux-2.6.34/kernel/dtrace/sdt_mod.c ./kernel/dtrace/sdt_mod.c
--- ../linux-2.6.34/kernel/dtrace/sdt_mod.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/sdt_mod.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,25 @@
+/*
+ * FILE:	sdt_mod.c
+ * DESCRIPTION:	Statically Defined Tracing: module handling
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/module.h>
+
+#include "dtrace.h"
+#include "dtrace_dev.h"
+#include "sdt.h"
+
+MODULE_AUTHOR("Kris Van Hees (kris.van.hees@oracle.com)");
+MODULE_DESCRIPTION("Statically Defined Tracing");
+MODULE_VERSION("v0.1");
+MODULE_LICENSE("Proprietary");
+
+static const dtrace_pattr_t sdt_attr = {
+};
+
+static dtrace_pops_t sdt_pops = {
+};
+
+DT_PROVIDER_MODULE(sdt)
diff -urN ../linux-2.6.34/kernel/dtrace/systrace_dev.c ./kernel/dtrace/systrace_dev.c
--- ../linux-2.6.34/kernel/dtrace/systrace_dev.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/systrace_dev.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,58 @@
+/*
+ * FILE:	systrace_dev.c
+ * DESCRIPTION:	System Call Tracing: device file handling
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/fs.h>
+#include <linux/miscdevice.h>
+
+#include "dtrace_dev.h"
+
+static long systrace_ioctl(struct file *file,
+			 unsigned int cmd, unsigned long arg)
+{
+	return -EAGAIN;
+}
+
+static int systrace_open(struct inode *inode, struct file *file)
+{
+	return -EAGAIN;
+}
+
+static int systrace_close(struct inode *inode, struct file *file)
+{
+	return 0;
+}
+
+static const struct file_operations systrace_fops = {
+	.owner  = THIS_MODULE,
+        .unlocked_ioctl = systrace_ioctl,
+        .open   = systrace_open,
+        .release = systrace_close,
+};
+
+static struct miscdevice systrace_dev = {
+	.minor = DT_DEV_SYSTRACE_MINOR,
+	.name = "systrace",
+	.nodename = "dtrace/provider/systrace",
+	.fops = &systrace_fops,
+};
+
+int systrace_dev_init(void)
+{
+	int ret = 0;
+
+	ret = misc_register(&systrace_dev);
+	if (ret)
+		pr_err("%s: Can't register misc device %d\n",
+		       systrace_dev.name, systrace_dev.minor);
+
+	return ret;
+}
+
+void systrace_dev_exit(void)
+{
+	misc_deregister(&systrace_dev);
+}
diff -urN ../linux-2.6.34/kernel/dtrace/systrace.h ./kernel/dtrace/systrace.h
--- ../linux-2.6.34/kernel/dtrace/systrace.h	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/systrace.h	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,7 @@
+#ifndef _SYSTRACE_H_
+#define _SYSTRACE_H_
+
+extern int systrace_dev_init(void);
+extern int systrace_dev_exit(void);
+
+#endif /* _SYSTRACE_H_ */
diff -urN ../linux-2.6.34/kernel/dtrace/systrace_mod.c ./kernel/dtrace/systrace_mod.c
--- ../linux-2.6.34/kernel/dtrace/systrace_mod.c	1969-12-31 19:00:00.000000000 -0500
+++ ./kernel/dtrace/systrace_mod.c	2010-12-21 14:34:13.000000000 -0500
@@ -0,0 +1,25 @@
+/*
+ * FILE:	systrace_mod.c
+ * DESCRIPTION:	System Call Tracing: module handling
+ *
+ * Copyright (C) 2010 Oracle Corporation
+ */
+
+#include <linux/module.h>
+
+#include "dtrace.h"
+#include "dtrace_dev.h"
+#include "systrace.h"
+
+MODULE_AUTHOR("Kris Van Hees (kris.van.hees@oracle.com)");
+MODULE_DESCRIPTION("System Call Tracing");
+MODULE_VERSION("v0.1");
+MODULE_LICENSE("Proprietary");
+
+static const dtrace_pattr_t systrace_attr = {
+};
+
+static dtrace_pops_t systrace_pops = {
+};
+
+DT_PROVIDER_MODULE(systrace);
diff -urN ../linux-2.6.34/kernel/Makefile ./kernel/Makefile
--- ../linux-2.6.34/kernel/Makefile	2010-07-28 17:48:29.000000000 -0400
+++ ./kernel/Makefile	2010-08-19 00:33:59.000000000 -0400
@@ -105,6 +105,7 @@
 obj-$(CONFIG_HAVE_HW_BREAKPOINT) += hw_breakpoint.o
 obj-$(CONFIG_USER_RETURN_NOTIFIER) += user-return-notifier.o
 obj-$(CONFIG_PADATA) += padata.o
+obj-$(CONFIG_DTRACE) += dtrace/
 
 ifneq ($(CONFIG_SCHED_OMIT_FRAME_POINTER),y)
 # According to Alan Modra <alan@linuxcare.com.au>, the -fno-omit-frame-pointer is
